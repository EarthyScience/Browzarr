(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[974],{1306:(e,t,r)=>{"use strict";r.d(t,{default:()=>E});var n=r(3044),a=r(7086),i=r(9519),o=r(5029),s=r(4088),l=r(1920),u=r(5660);r(1663);let c=e=>"string"==typeof e?e:Array.isArray(e)?e.join(", "):String(e),m=e=>{let{meta:t}=e,[r,a]=(0,s.useState)(!1),i=(0,l.o)((0,u.k)(e=>e.setVariable));return(0,n.jsxs)("div",{className:"meta-container",children:[(0,n.jsxs)("div",{className:"meta-info",children:[(0,n.jsx)("b",{children:"Long Name:"})," ","".concat(t.long_name),(0,n.jsx)("br",{}),(0,n.jsxs)("div",{style:{maxHeight:r?"500px":"0px",overflow:"hidden",transition:"0.3s"},children:[(0,n.jsx)("b",{children:"Shape:"})," ","[".concat(c(t.shape),"]"),(0,n.jsx)("br",{}),(0,n.jsx)("b",{children:"dType: "})," ","".concat(t.dtype),(0,n.jsx)("br",{}),(0,n.jsx)("b",{children:"Total Size: "}),"".concat(t.totalSizeFormatted),(0,n.jsx)("br",{}),(0,n.jsx)("b",{children:"Chunk Shape:"})," ","[".concat(c(t.chunks),"]"),(0,n.jsx)("br",{}),(0,n.jsx)("b",{children:"Chunk Count:"})," ","".concat(t.chunkCount),(0,n.jsx)("br",{}),(0,n.jsx)("b",{children:"Chunk Size:"})," ","".concat(t.chunkSizeFormatted)]}),(0,n.jsx)("div",{className:"meta-hidden",style:{display:"flex",justifyContent:"center"},onClick:()=>a(e=>!e),children:r?"Î›":"V"})]}),(0,n.jsx)("button",{onClick:()=>i(t.name),children:(0,n.jsx)("b",{children:"Plot"})})]})},d=e=>{let{zMeta:t}=e,r=(0,l.o)((0,u.k)(e=>e.variables)),[a,i]=(0,s.useState)(Math.floor(r.length/2)),[o,c]=(0,s.useState)(null),[d,h]=(0,s.useState)(82),p=(0,s.useRef)(null),f=(0,s.useRef)(0);function x(){let e=window.innerWidth;e<=480?h(42):e<=570?h(54):h(82)}return(0,s.useEffect)(()=>{let e=e=>{e.cancelable&&e.preventDefault()};return document.addEventListener("touchmove",e,{passive:!1}),()=>{document.removeEventListener("touchmove",e)}},[]),(0,s.useEffect)(()=>{if(r&&t){let e=r[a];c(t.find(t=>t.name===e))}},[a,r]),(0,s.useEffect)(()=>{let e=window.innerWidth;return e<=480?h(42):e<=570?h(54):h(82),window.addEventListener("resize",x)},[]),(0,n.jsxs)("div",{className:"scroll-container",onWheel:e=>{let t=a+(e.deltaY>0?1:-1);t>=0&&t<r.length&&i(t)},onTouchMove:e=>{let t=e.touches[0].clientY,n=p.current?p.current:t;if(p.current=t,f.current+=n-t,Math.abs(f.current)>=d){let e=a+(f.current>0?1:-1);e>=0&&e<r.length&&(i(e),f.current=0)}},onTouchEnd:()=>{p.current=null,f.current=0},children:[o&&(0,n.jsx)(m,{meta:o}),(0,n.jsx)("div",{className:"scroll-element",style:{transform:"translateY(calc(50% + ".concat(-a*d,"px))")},children:r.map((e,t)=>{let r=Math.abs(a-t);return(0,n.jsx)("div",{className:"scroll-item",style:{opacity:1-.3*r,fontWeight:a===t?"bold":"normal"},onClick:()=>i(t),children:e},t)})})]})};var h=r(3003),p=r(466);let f=e=>{let{volTexture:t}=e,{shape:r,colormap:i,flipY:o}=(0,l.o)((0,u.k)(e=>({shape:e.shape,colormap:e.colormap,flipY:e.flipY}))),{valueRange:c,xRange:m,yRange:d,zRange:f,quality:x}=(0,l.W)((0,u.k)(e=>({valueRange:e.valueRange,xRange:e.xRange,yRange:e.yRange,zRange:e.zRange,quality:e.quality}))),v=(0,p.aF)("plot-pane"),g=(0,h.ap)({flip:!1},{title:"Volume",container:null!=v?v:void 0,expanded:!1}),[y]=(0,h.jD)(g,{label:"Clip Values",value:0,min:0,max:1,step:.01,format:e=>e.toFixed(2)}),[w]=(0,h.jD)(g,{label:"Quality",value:200,min:50,max:1e3,step:25}),[S]=(0,h.Kr)(g,"flip",{label:"Invert values",value:!1}),b=new a.BKk({glslVersion:a.Wdf,uniforms:{map:{value:t},cmap:{value:i},cameraPos:{value:new a.Pq0},threshold:{value:y},scale:{value:r},flatBounds:{value:new a.IUQ(m[0],m[1],f[0],f[1])},vertBounds:{value:new a.I9Y(d[0],d[1])},steps:{value:x},flip:{value:S}},vertexShader:" // by Jeran Poehls\r\n\r\nout vec3 vOrigin;\r\nout vec3 vDirection;\r\nvarying vec2 Vuv;\r\n\r\nvoid main() {\r\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n    vOrigin = vec3( inverse( modelMatrix ) * vec4( cameraPosition, 1.0 ) ).xyz;\r\n    vDirection = position - vOrigin;\r\n    Vuv = uv;\r\n    gl_Position = projectionMatrix * mvPosition;\r\n}",fragmentShader:"// by Jeran Poehls\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nuniform mat4 modelViewMatrix;\r\nuniform mat4 projectionMatrix;\r\n\r\nin vec3 vOrigin;\r\nin vec3 vDirection;\r\n\r\nout vec4 color;\r\n\r\nuniform sampler3D map;\r\nuniform sampler2D cmap;\r\n\r\nuniform vec3 scale;\r\nuniform float threshold;\r\nuniform float steps;\r\nuniform bool flip;\r\nuniform vec4 flatBounds;\r\nuniform vec2 vertBounds;\r\nuniform float intensity;\r\n\r\nvec2 hitBox(vec3 orig, vec3 dir) {\r\n    vec3 box_min = vec3(-(scale * 0.5));\r\n    vec3 box_max = vec3(scale * 0.5);\r\n    vec3 inv_dir = 1.0 / dir;\r\n    vec3 tmin_tmp = (box_min - orig) * inv_dir;\r\n    vec3 tmax_tmp = (box_max - orig) * inv_dir;\r\n    vec3 tmin = min(tmin_tmp, tmax_tmp);\r\n    vec3 tmax = max(tmin_tmp, tmax_tmp);\r\n    float t0 = max(tmin.x, max(tmin.y, tmin.z));\r\n    float t1 = min(tmax.x, min(tmax.y, tmax.z));\r\n    return vec2(t0, t1);\r\n}\r\n\r\nfloat sample1( vec3 p ) {\r\n    return texture( map, p ).r;\r\n}\r\n\r\n#define epsilon 0.0001\r\n\r\nvoid main() {\r\n    vec3 rayDir = normalize(vDirection);\r\n    vec2 bounds = hitBox(vOrigin, rayDir);\r\n\r\n    if (bounds.x > bounds.y) discard;\r\n\r\n    bounds.x = max(bounds.x, 0.0);\r\n\r\n    vec3 p = vOrigin + bounds.x * rayDir;\r\n    vec3 inc = 1.0 / abs(rayDir);\r\n    float delta = min(inc.x, min(inc.y, inc.z));\r\n    delta /= steps;\r\n\r\n    vec4 accumColor = vec4(0.0);\r\n    float alphaAcc = 0.0;\r\n    for (float t = bounds.x; t < bounds.y; t += delta) {\r\n        if (p.x > -flatBounds.x || p.x < -flatBounds.y) {\r\n            p += rayDir * delta;\r\n            continue;\r\n        }\r\n        if (-p.z > -flatBounds.z || -p.z < -flatBounds.w) {\r\n            p += rayDir * delta;\r\n            continue;\r\n        }\r\n        if (p.y < vertBounds.x || p.y > vertBounds.y) {\r\n            p += rayDir * delta;\r\n            continue;\r\n        }\r\n\r\n        float d = sample1(p / scale + 0.5);\r\n\r\n        bool cond = (d > threshold) || (d == 0.0 && threshold == 0.0);\r\n        cond = flip ? !cond : cond;\r\n\r\n        if (cond) {\r\n            vec4 col = texture(cmap, vec2(d, 0.5));\r\n            // Change this later back to use intensity then delete comment. Or maybe we don't need intensity\r\n            float alpha = float(col.a > 0.);\r\n\r\n            accumColor.rgb += (1.0 - alphaAcc) * alpha * col.rgb;\r\n            alphaAcc += alpha * (1.0 - alphaAcc);\r\n\r\n            if (alphaAcc >= 1.0) break;\r\n        }\r\n\r\n        p += rayDir * delta;\r\n    }\r\n\r\n    accumColor.a = alphaAcc; // Set the final accumulated alpha\r\n    color = accumColor;\r\n    if (color.a == 0.0) discard;\r\n}\r\n",transparent:!0,blending:a.NTi,depthWrite:!1,side:a.hsX}),j=(0,s.useMemo)(()=>new a.WBB(4,8),[]);return(0,s.useEffect)(()=>()=>{j.dispose()},[]),(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("mesh",{geometry:j,scale:[1,o?-1:1,1],children:(0,n.jsx)("primitive",{attach:"material",object:b})})})};var x=r(3924);let v=e=>{let{ZarrDS:t}=e,[r,i]=(0,s.useState)(null),{setTimeSeries:o,setPlotDim:c,setDimCoords:m}=(0,l.o)((0,u.k)(e=>({setTimeSeries:e.setTimeSeries,setPlotDim:e.setPlotDim,setDimCoords:e.setDimCoords}))),{shape:d,dimArrays:h,dimNames:p,dimUnits:f}=(0,l.o)((0,u.k)(e=>({shape:e.shape,dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits}))),v=(0,s.useMemo)(()=>new a.iNn(1,1,1),[]);return(0,s.useEffect)(()=>()=>{v.dispose()},[]),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("mesh",{geometry:v,scale:d,onClick:e=>{e.stopPropagation(),e.intersections.length>0&&function(e){let r=e.point,n=e.uv,a=e.normal;if(t){var s,l;t.GetTimeSeries({uv:n,normal:a}).then(e=>o(e));let e=a.toArray().map((e,t)=>Math.abs(e)>0?t:null).filter(e=>null!==e);c(2-e[0]);let r=(0,x.jT)({normal:a,uv:n}).map((e,t)=>e?h[t][Math.round(e*h[t].length)]:null),i=p.filter((e,t)=>null!==r[t]),u=f.filter((e,t)=>null!==r[t]);r=r.filter(e=>null!==e),m({first:{name:i[0],loc:null!=(s=r[0])?s:0,units:u[0]},second:{name:i[1],loc:null!=(l=r[1])?l:0,units:u[1]},plot:{units:f[2-e[0]]}})}i(r)}(e.intersections[0])},children:(0,n.jsx)("meshBasicMaterial",{transparent:!0,opacity:0})}),r&&(0,n.jsxs)("mesh",{position:r,scale:.01,children:[(0,n.jsx)("boxGeometry",{}),(0,n.jsx)("meshBasicMaterial",{color:"#ff0000"})]})]})};var g=r(8041);function y(e){let{points:t,pointSize:r,pointColor:i,pointSetters:o}=e,l=(0,s.useRef)(null),u=t.length,[c,m]=(0,s.useState)(!1),{setPointID:d,setPointLoc:h,setShowPointInfo:p}=o,[f,x]=(0,s.useState)(1),v=(0,s.useMemo)(()=>new a.Gu$(r),[r]),y=(0,s.useMemo)(()=>new a.V9B({color:i}),[i]);return(0,s.useEffect)(()=>{if(l.current){let e=new a.B69;for(let r=0;r<u;r++){let n=t[r].toArray();e.position.set(...n),e.scale.set(1/f,1/f,1/f),e.updateMatrix(),l.current.setMatrixAt(r,e.matrix)}l.current.instanceMatrix.needsUpdate=!0}},[t,f,v,y]),(0,g.C)(e=>{let{camera:t}=e;t.zoom!==f&&x(t.zoom)}),(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("mesh",{onPointerEnter:function(e){if(l.current){let t=new a.B69,r=new a.kn4;l.current.getMatrixAt(e.instanceId,r);let n=new a.Pq0;n.setFromMatrixPosition(r),t.scale.set(3/f,3/f,3/f),t.position.copy(n),t.updateMatrix(),l.current.setMatrixAt(e.instanceId,t.matrix),l.current.instanceMatrix.needsUpdate=!0,m(e=>!e),d(e.instanceId),h([e.clientX,e.clientY]),p(!0)}},onPointerLeave:function(){if(l.current){let e=new a.B69,t=new a.kn4,r=new a.Pq0;for(let n=0;n<u;n++)l.current.getMatrixAt(n,t),r.setFromMatrixPosition(t),e.scale.set(1/f,1/f,1/f),e.position.copy(r),e.updateMatrix(),l.current.setMatrixAt(n,e.matrix);l.current.instanceMatrix.needsUpdate=!0,m(e=>!e),p(!1)}},children:(0,n.jsx)("instancedMesh",{ref:l,args:[v,y,u]})})})}let w=e=>{let{height:t,pointSetters:r,yScale:i,xScale:o}=e,[c,m]=(0,s.useState)(!1),d=(0,p.aF)("line-plot-pane"),f=(0,h.ap)({pointColor:"#777777",interpolation:"linear"},{title:"Line",container:null!=d?d:void 0,expanded:!0});(0,h.CZ)(f,{title:"".concat(c?"Hide":"Show"," Points")},()=>m(e=>!e));let[x]=(0,h.Kr)(f,"pointColor",{label:"Point Color",value:"#2d4967"}),[v]=(0,h.jD)(f,{label:"Point Size",value:5,min:1,max:20,step:1}),[g]=(0,h.Kr)(f,"interpolation",{label:"Line Interpolation",options:[{text:"Linear",value:"linear"},{text:"Curved",value:"curved"}]}),[w]=(0,h.jD)(f,{label:"Line Width",value:5,min:1,max:20,step:1}),{valueScales:S,timeSeries:b,colormap:j}=(0,l.o)((0,u.k)(e=>({valueScales:e.valueScales,timeSeries:e.timeSeries,colormap:e.colormap}))),{maxVal:C,minVal:D}=S,[A,M]=(0,s.useMemo)(()=>{if(!b||0===b.length)return[[new a.Pq0(0,0,0)],[0]];let e=window.innerWidth,r=window.innerHeight-t,n=function(e,t,r){let n=(t-e)/(r-1);return Array.from({length:r},(t,r)=>e+n*r)}(-e*o/2,e*o/2,b.length),s=b.map(e=>(e-D)/(C-D));return[s.map((e,t)=>new a.Pq0(n[t],(e-.5)*r*i,5)),s]},[b,g,t,i,o]),z=(0,s.useMemo)(()=>{if(!b||0===b.length)return null;if("curved"===g){let e=new a.B6O(A),t=new a.LoY().setFromPoints(e.getPoints(5*M.length-1));return t.setAttribute("normed",new a.qtW(M.flatMap(e=>[,,,,,].fill(e)),1)),t}{let e=new a.LoY().setFromPoints(A);return e.setAttribute("normed",new a.qtW(M,1)),e}},[A]),V=(0,s.useMemo)(()=>new a.BKk({glslVersion:a.Wdf,uniforms:{cmap:{value:j}},vertexShader:"\n                    varying float vNormed;\n                    attribute float normed;\n\n                    void main() {\n                        vNormed = normed;\n                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                    }\n                    ",fragmentShader:"\n                    out vec4 Color;\n                    uniform sampler2D cmap;\n                    varying float vNormed;\n\n                    void main() {\n                        vec4 texColor = texture(cmap, vec2(vNormed, 0.5));\n                        texColor.a = 2.;\n                        // Color = vec4(1.,0.0,0.,1.);\n                        Color = texColor;\n                    }\n                    ",linewidth:w,depthWrite:!1}),[w]);return b&&0!==b.length?(0,n.jsxs)("group",{children:[z&&(0,n.jsx)("primitive",{object:new a.N1A(z,V)}),c&&(0,n.jsx)(y,{points:A,pointSize:v,pointColor:x,pointSetters:r})]}):null},S=e=>{let{textures:t}=e,{texture:r,colormap:i}=t;(0,p.aF)("plot-cloud");let o=(0,l.o)(e=>e.flipY),{scalePoints:c,scaleIntensity:m,pointSize:d}=(0,l.W)((0,u.k)(e=>({scalePoints:e.scalePoints,scaleIntensity:e.scaleIntensity,pointSize:e.pointSize}))),{data:h,width:f,height:x,depth:v}=(0,s.useMemo)(()=>r instanceof a.dYF?{data:r.image.data,width:r.image.width,height:r.image.height,depth:r.image.depth}:(console.warn("Provided texture is not a Data3DTexture"),{data:[],width:0,height:0,depth:0}),[r]),{positions:g,values:y}=(0,s.useMemo)(()=>{let e=[],t=[],r=f/x,n=v/x;n=n>10?10:n;for(let a=0;a<v;a++)for(let i=0;i<x;i++)for(let o=0;o<f;o++){let s=h[o+i*f+a*f*x]||0;if(s>0){let l=(o/(f-1)-.5)*r,u=i/(x-1)-.5,c=(a/(v-1)-.5)*n;e.push(2*l,2*u,2*c),t.push(s)}}return{positions:e,values:t}},[h,f,x,v]),w=(0,s.useMemo)(()=>{let e=new a.LoY;return e.setAttribute("position",new a.qtW(g,3)),e.setAttribute("value",new a.qtW(y,1)),e},[g,y]),S=new a.BKk({glslVersion:a.Wdf,uniforms:{pointSize:{value:d},cmap:{value:i},scalePoints:{value:c},scaleIntensity:{value:m}},vertexShader:"attribute float value;\r\nvarying float vValue;\r\nuniform float pointSize;\r\nuniform bool scalePoints;\r\nuniform float scaleIntensity;\r\n\r\nvoid main() {\r\n    vValue = value/255.;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    //If it is nan we just yeet it tf out of the screen space. LMAO I love this solution\r\n    float pointScale = pointSize/gl_Position.w;\r\n    pointScale = scalePoints ? pointScale*pow(vValue,scaleIntensity) : pointScale;\r\n\r\n    if (value == 255. || (pointScale*gl_Position.w < 0.75 && scalePoints)){\r\n        gl_Position = vec4(2.0, 2.0, 2.0, 1.0);\r\n    }\r\n\r\n    gl_PointSize = pointScale;\r\n}\r\n",fragmentShader:"out vec4 Color;\r\n\r\nvarying float vValue;\r\nuniform sampler2D cmap;\r\n\r\nvoid main() {\r\n\r\n    vec4 color = texture(cmap, vec2(vValue, 0.5));\r\n    color.a = 1.;\r\n\r\n    Color = color;\r\n    \r\n}\r\n",depthWrite:!0,transparent:!0,blending:a.NTi,side:a.$EB});return(0,n.jsx)("mesh",{scale:[1,o?-1:1,1],children:(0,n.jsx)("points",{geometry:w,material:S})})};var b=r(7028);function j(e){let{pointID:t,pointLoc:r,showPointInfo:a,plotUnits:i}=e,{plotDim:o,dimArrays:c,dimNames:m,dimUnits:d,timeSeries:h}=(0,l.o)((0,u.k)(e=>({plotDim:e.plotDim,dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits,timeSeries:e.timeSeries}))),p=h[t],f=c[o][t],[v,g]=r,[y,w]=(0,s.useState)(!1);return(0,s.useEffect)(()=>{if(!a){let e=setTimeout(()=>{w(!1)},100);return()=>clearTimeout(e)}w(!0)},[a]),(0,n.jsx)(n.Fragment,{children:y&&(0,n.jsxs)("div",{className:"point-info",style:{left:"".concat(v,"px"),top:"".concat(g,"px")},children:["".concat(p.toFixed(2)).concat(i),(0,n.jsx)("br",{}),"".concat(m[o],": ").concat((0,x.SB)(f,d[o]),"       \n        ")]})})}function C(){let e=(0,l.o)(e=>e.dimCoords),[t,r]=(0,s.useState)(!1),a=(0,s.useRef)([0,Math.round(.255*window.innerHeight)]),i=(0,s.useRef)([0,Math.round(.255*window.innerHeight)]),[o,u]=(0,s.useState)([0,Math.round(.255*window.innerHeight)]);function c(e){if(t){let t=a.current[0]-e.clientX,r=a.current[1]-e.clientY,n=Math.max(i.current[0]-t,10),o=Math.max(i.current[1]+r,0);u([Math.min(n,window.innerWidth-100),Math.min(o,window.innerHeight-100)])}}function m(){r(!1)}return(0,s.useEffect)(()=>(t&&(document.addEventListener("mousemove",c),document.addEventListener("mouseup",m)),()=>{document.removeEventListener("mousemove",c),document.removeEventListener("mouseup",m)}),[t]),(0,n.jsx)(n.Fragment,{children:e&&"Default"!==e.first.name&&(0,n.jsxs)("div",{className:"plot-coords",style:{left:"".concat(o[0],"px"),bottom:"".concat(o[1],"px")},onPointerDown:function(e){a.current=[e.clientX,e.clientY],i.current=[...o],r(!0)},onPointerMove:c,onPointerUp:()=>r(!1),children:[(0,n.jsx)("b",{children:"".concat(e.first.name,": ")}),"".concat((0,x.SB)(e.first.loc,e.first.units)),(0,n.jsx)("br",{}),(0,n.jsx)("b",{children:"".concat(e.second.name,": ")}),"".concat((0,x.SB)(e.second.loc,e.second.units))]})})}function D(){let[e,t]=(0,s.useState)(0),[r,a]=(0,s.useState)([0,0]),[i,o]=(0,s.useState)(!1),[u,c]=(0,s.useState)(Math.round(window.innerHeight-.25*window.innerHeight)),m=(0,l.o)(e=>e.metadata),d=m?m.units:"Default",[h,f]=(0,s.useState)(1),[x,v]=(0,s.useState)(1);(0,s.useEffect)(()=>{let e=()=>{let e=Math.round(window.innerHeight-.25*window.innerHeight);c(e),document.documentElement.style.setProperty("--plot-height","".concat(e,"px"))};return window.addEventListener("orientationchange",e),window.addEventListener("resize",e),()=>{window.removeEventListener("orientationchange",e),window.removeEventListener("resize",e)}},[]),(0,s.useEffect)(()=>{document.documentElement.style.setProperty("--plot-height","".concat(u,"px"))},[u]);let g=window.innerHeight-u>=10;return(0,n.jsxs)(n.Fragment,{children:[!g&&(0,n.jsx)(p.de,{onClick:()=>{c(window.innerHeight-60)}}),g&&(0,n.jsxs)("div",{className:"plot-canvas",children:[(0,n.jsx)(j,{pointID:e,pointLoc:r,showPointInfo:i,plotUnits:d}),(0,n.jsx)(p.A,{height:u,setHeight:c}),(0,n.jsx)(p.gj,{scale:h,setScale:f}),(0,n.jsx)(p.LC,{scale:x,setScale:v}),(0,n.jsxs)(b.Hl,{orthographic:!0,camera:{position:[0,0,40]},frameloop:"demand",children:[(0,n.jsx)(w,{height:u,pointSetters:{setPointID:t,setPointLoc:a,setShowPointInfo:o},yScale:h,xScale:x}),(0,n.jsx)(z,{height:u,yScale:h,xScale:x})]}),(0,n.jsx)(C,{})]})]})}r(6375);var A=r(1267),M=r(2338);function z(e){let{colorTicks:t="grey",tickSize:r=4,fontSize:a=14,showGrid:i=!0,gridOpacity:o=.5,height:c,yScale:m=1,xScale:d=1}=e,{camera:h}=(0,g.A)(),[p,f]=(0,s.useState)({left:0,right:0,top:0,bottom:0}),{dimCoords:v,dimArrays:y,plotDim:w,valueScales:S}=(0,l.o)((0,u.k)(e=>({dimCoords:e.dimCoords,dimArrays:e.dimArrays,plotDim:e.plotDim,valueScales:e.valueScales}))),b=y[w],j=b.length,C=S.maxVal-S.minVal,D=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],z=(0,s.useMemo)(()=>{if(b){if(b.every(e=>"bigint"==typeof e)){let e=v?(0,x.lt)(v.plot.units):1,t=[];for(let r=0;r<b.length;r++){let n=new Date(Number(b[r])*e),a="".concat(n.getDate().toString().padStart(2,"0")," ").concat(D[n.getMonth()],"\n").concat(n.getFullYear());t.push(a)}return t}return b.map(e=>String(e))}},[b,v]),V=(0,s.useMemo)(()=>{let e=window.innerWidth,t=window.innerHeight-c;return{left:-e/2+h.position.x,right:e/2+h.position.x,top:t/2+h.position.y,bottom:-t/2+h.position.y}},[]),[T,P]=(0,s.useState)(h.zoom),F=(0,s.useMemo)(()=>{let e=1/h.zoom;return{tickSize:r*e,fontSize:a/e,labelOffset:r*e}},[h.zoom,r,a]);(0,g.C)(()=>{h.zoom!==T&&P(h.zoom);let e=window.innerWidth/h.zoom,t=(window.innerHeight-c)/h.zoom,r={left:-e/2+h.position.x,right:e/2+h.position.x,top:t/2+h.position.y,bottom:-t/2+h.position.y};JSON.stringify(p)!=JSON.stringify(r)&&f(r)});let R=(0,s.useRef)(null),k=(0,s.useRef)(null);(0,s.useEffect)(()=>(R.current&&clearTimeout(R.current),k.current&&(R.current=setTimeout(()=>{k.current&&k.current.reset()},100)),()=>{null!==R.current&&clearTimeout(R.current)}),[c]);let N=(p.top+p.bottom)/2,Y=(p.left+p.right)/2;return(0,n.jsxs)("group",{children:[i&&(0,n.jsxs)(n.Fragment,{children:[Array.from({length:10},(e,r)=>{var a;if(0===r||9===r)return null;let i=+Math.round(p.left/1)+(Math.round(p.right/1)-Math.round(p.left/1))*(r/9),l=i/d/(V.right-V.left)+.5;return(0,n.jsxs)(s.Fragment,{children:[(0,n.jsx)("group",{position:[i,N,0],children:(0,n.jsxs)("line",{children:[(0,n.jsx)("bufferGeometry",{children:(0,n.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([0,p.top-N,0,0,p.bottom-N,0]),3]})}),(0,n.jsx)("lineDashedMaterial",{color:t,opacity:o,transparent:!0,dashSize:.5,gapSize:.5})]},"vgrid-".concat(r))}),(0,n.jsxs)("group",{position:[i,p.top,0],children:[(0,n.jsxs)("line",{children:[(0,n.jsx)("bufferGeometry",{children:(0,n.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([0,0,0,0,-F.tickSize,0]),3]})}),(0,n.jsx)("lineBasicMaterial",{color:t})]}),0!==r&&9!==r&&(0,n.jsx)(A.E,{position:[0,F.tickSize/4-F.labelOffset,0],fontSize:F.fontSize/T**2,color:t,anchorX:"center",anchorY:"top",children:null!=(a=null==z?void 0:z[Math.round(l*j-.5)])?a:""})]},"top-tick-".concat(r))]},"vert-group-".concat(r))}),Array.from({length:8},(e,r)=>{if(0===r||7===r)return null;let a=p.bottom+(p.top-p.bottom)*(r/7),i=a/m/(p.top-p.bottom)/T+.5;return(0,n.jsxs)(s.Fragment,{children:[(0,n.jsx)("group",{position:[Y,a,0],children:(0,n.jsxs)("line",{children:[(0,n.jsx)("bufferGeometry",{children:(0,n.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([p.left-Y,0,0,p.right-Y,0,0]),3]})}),(0,n.jsx)("lineDashedMaterial",{color:t,opacity:o,transparent:!0,dashSize:0,gapSize:.5,linewidth:1})]})},"hgrid-".concat(r)),(0,n.jsxs)("group",{position:[p.right,a,0],children:[(0,n.jsxs)("line",{children:[(0,n.jsx)("bufferGeometry",{children:(0,n.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([0,0,0,-F.tickSize,0,0]),3]})}),(0,n.jsx)("lineBasicMaterial",{color:t})]}),0!==r&&7!==r&&(0,n.jsx)(A.E,{position:[-F.tickSize-F.labelOffset,0,0],fontSize:F.fontSize/T**2,color:t,anchorX:"right",anchorY:"middle",children:(S.minVal+i*C).toFixed(1)})]},"right-tick-".concat(r))]},"vert-group-".concat(r))})]}),(0,n.jsx)(M.N,{ref:k,enableRotate:!1,enablePan:!0,enableZoom:!0,zoomSpeed:.85,maxDistance:500,maxZoom:20,minZoom:.5})]})}var V=r(6802);let T=e=>{let{values:t,setShowLoading:r}=e,{setShape:i,setFlipY:o,setValueScales:c,setMetadata:m,setDimArrays:d,setDimNames:h,setDimUnits:p}=(0,l.o)((0,u.k)(e=>({setShape:e.setShape,setFlipY:e.setFlipY,setValueScales:e.setValueScales,setMetadata:e.setMetadata,setDimArrays:e.setDimArrays,setDimNames:e.setDimNames,setDimUnits:e.setDimUnits}))),x=(0,l.o)(e=>e.colormap),{ZarrDS:g,variable:y,canvasWidth:w}=t,j=(0,l.W)(e=>e.plotType),[C,D]=(0,s.useState)(null),[A,z]=(0,s.useState)(!0),[T,P]=(0,s.useState)(0);return(0,s.useEffect)(()=>{P(window.innerWidth);let e=()=>P(window.innerWidth);return window.addEventListener("resize",e),()=>window.removeEventListener("resize",e)},[]),(0,s.useEffect)(()=>{let e=new MutationObserver(e=>{e.forEach(e=>{e.attributeName})});return e.observe(document.documentElement,{attributes:!0,attributeFilter:["data-theme"]}),()=>e.disconnect()},[]),(0,s.useEffect)(()=>{"Default"!=y?(r(!0),z(!1),g.GetArray(y).then(e=>{let[t,n]=(0,V.oW)({data:e.data,shape:e.shape});t instanceof a.GYF||t instanceof a.dYF?D(t):(console.error("Invalid texture type returned from ArrayToTexture"),D(null)),"object"==typeof n&&"maxVal"in n&&"minVal"in n&&c(n);let o=e.shape[1]/e.shape[2]*2;i(new a.Pq0(2,o,2)),r(!1),z(!0)}),g.GetAttributes(y).then(e=>{m(e);let[t,r,n]=g.GetDimArrays();d(t),t[1][1]<t[1][0]?o(!0):o(!1);let a=[];for(let e of r)a.push(e.units);h(n),p(a)})):(console.log("here?"),m(null))},[y]),(0,n.jsx)("div",{className:"main-canvas",style:{width:T-w},children:(0,n.jsxs)(b.Hl,{camera:{position:[-4.5,3,4.5],fov:50},frameloop:"demand",style:{},children:["volume"==j&&A&&(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(f,{volTexture:C}),(0,n.jsx)(v,{ZarrDS:g})]}),"point-cloud"==j&&A&&(0,n.jsx)(S,{textures:{texture:C,colormap:x}}),(0,n.jsx)(M.N,{minPolarAngle:0,maxPolarAngle:Math.PI/2,enablePan:!1,maxDistance:50})]})})};r(4221);let P=e=>{let{loc:t,show:r,info:a,plotDim:i}=e,{dimNames:o,dimUnits:c}=(0,l.o)((0,u.k)(e=>({dimNames:e.dimNames,dimUnits:e.dimUnits}))),m=(0,s.useMemo)(()=>o.filter((e,t)=>t!=i),[o,i]),d=(0,s.useMemo)(()=>c.filter((e,t)=>t!=i),[o,i]);return(0,n.jsxs)("div",{className:"analysis-info",style:{left:"".concat(t[0]+10,"px"),top:"".concat(t[1]+10,"px"),display:r?"":"none"},children:["".concat(m[0],": ").concat((0,x.SB)(a[0],d[0])),(0,n.jsx)("br",{}),"".concat(m[1],": ").concat((0,x.SB)(a[1],d[1])),(0,n.jsx)("br",{}),"Value: ".concat(Math.round(100*a[2])/100)]})};var F=r(2088);class R{initAxis(e){let t=this.shape.filter((t,r)=>r!==e);this.GPUCompute=new F.d(t[1],t[0],this.renderer),this.targetAxis=e,this.renderTarget.texture.dispose(),this.renderTarget=this.GPUCompute.createRenderTarget(t[1],t[0],a.ghU,a.ghU,1006,1006),this.renderTarget.texture.minFilter=a.hxR,this.renderTarget.texture.magFilter=a.hxR,this.renderTarget.texture.needsUpdate=!0}performReduction(e,t){e!=this.targetAxis&&this.initAxis(e);let r=this.GPUCompute.addVariable("reduction",t,this.initTexture);r.material.uniforms.dataArray={value:this.texture},r.material.uniforms.axisSize={value:this.shape[this.targetAxis]},r.material.uniforms.axis={value:this.targetAxis},this.GPUCompute.doRenderTarget(r.material,this.renderTarget);let n=new Float32Array(this.renderTarget.width*this.renderTarget.height*4);return this.renderer.readRenderTargetPixels(this.renderTarget,0,0,this.renderTarget.width,this.renderTarget.height,n),[this.renderTarget.texture,n]}Mean(e){return this.performReduction(e,"uniform sampler3D dataArray;\nuniform int axis;\nuniform int axisSize;\n\nvoid main() {\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\n\n    vec3 sampleCoord;\n    \n    // Initialize sampling coordinates based on reduction axis\n    if (axis == 0) {\n        // Reduce along depth (D0), uv maps to (s,t) = (D2,D1)\n        sampleCoord = vec3(uv.x, uv.y, 0.0);\n    } else if (axis == 1) {\n        // Reduce along height (D1), uv maps to (s,r) = (D2,D0)\n        sampleCoord = vec3(uv.x, 0.0, uv.y);\n    } else if (axis == 2) {\n        // Reduce along width (D2), uv maps to (t,r) = (D1,D0)\n        sampleCoord = vec3(0.0, uv.x, uv.y);\n    }\n\n    float sum = 0.0;\n    for (int m = 0; m < axisSize; m++) { \n        float coord = (float(m) + 0.5) / float(axisSize); //0.5 for center of pixel\n        // Vary the appropriate coordinate\n        if (axis == 0) {\n            sampleCoord.z = coord; // Vary r (depth)\n        } else if (axis == 1) {\n            sampleCoord.y = coord; // Vary t (height)\n        } else if (axis == 2) {\n            sampleCoord.x = coord; // Vary s (width)\n        }\n        float samp = texture(dataArray, sampleCoord).r;\n        sum += samp == 0.0 ? 0.6 : samp; // Assuming data in red channel\n    }\n    \n    float mean = sum / float(axisSize);\n    gl_FragColor = vec4(mean, 0.0, 0.0, 1.0); // Output mean in red channel\n}")}Max(e){return this.performReduction(e,"uniform sampler3D dataArray;\r\nuniform int axis;\r\nuniform int axisSize;\r\n\r\nvoid main() {\r\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\r\n\r\n    vec3 sampleCoord;\r\n    \r\n    // Initialize sampling coordinates based on reduction axis\r\n    if (axis == 0) {\r\n        // Reduce along depth (D0), uv maps to (s,t) = (D2,D1)\r\n        sampleCoord = vec3(uv.x, uv.y, 0.0);\r\n    } else if (axis == 1) {\r\n        // Reduce along height (D1), uv maps to (s,r) = (D2,D0)\r\n        sampleCoord = vec3(uv.x, 0.0, uv.y);\r\n    } else if (axis == 2) {\r\n        // Reduce along width (D2), uv maps to (t,r) = (D1,D0)\r\n        sampleCoord = vec3(0.0, uv.x, uv.y);\r\n    }\r\n\r\n    float maxVal = 0.0;\r\n    for (int m = 0; m < axisSize; m++) { \r\n        float coord = (float(m) + 0.5) / float(axisSize); //0.5 for center of pixel\r\n        \r\n        // Vary the appropriate coordinate\r\n        if (axis == 0) {\r\n            sampleCoord.z = coord; // Vary r (depth)\r\n        } else if (axis == 1) {\r\n            sampleCoord.y = coord; // Vary t (height)\r\n        } else if (axis == 2) {\r\n            sampleCoord.x = coord; // Vary s (width)\r\n        }\r\n        float sampled = texture(dataArray, sampleCoord).r; // Assuming data in red channel\r\n        maxVal = sampled > maxVal ? sampled : maxVal; \r\n    }\r\n    \r\n    gl_FragColor = vec4(maxVal, 0.0, 0.0, 1.0); // Output mean in red channel\r\n}")}Min(e){return this.performReduction(e,"uniform sampler3D dataArray;\r\nuniform int axis;\r\nuniform int axisSize;\r\n\r\nvoid main() {\r\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\r\n\r\n    vec3 sampleCoord;\r\n    \r\n    // Initialize sampling coordinates based on reduction axis\r\n    if (axis == 0) {\r\n        // Reduce along depth (D0), uv maps to (s,t) = (D2,D1)\r\n        sampleCoord = vec3(uv.x, uv.y, 0.0);\r\n    } else if (axis == 1) {\r\n        // Reduce along height (D1), uv maps to (s,r) = (D2,D0)\r\n        sampleCoord = vec3(uv.x, 0.0, uv.y);\r\n    } else if (axis == 2) {\r\n        // Reduce along width (D2), uv maps to (t,r) = (D1,D0)\r\n        sampleCoord = vec3(0.0, uv.x, uv.y);\r\n    }\r\n\r\n    float minVal = 1.0e15; //BigNum\r\n    for (int m = 0; m < axisSize; m++) { \r\n        float coord = (float(m) + 0.5) / float(axisSize); //0.5 for center of pixel\r\n        \r\n        // Vary the appropriate coordinate\r\n        if (axis == 0) {\r\n            sampleCoord.z = coord; // Vary r (depth)\r\n        } else if (axis == 1) {\r\n            sampleCoord.y = coord; // Vary t (height)\r\n        } else if (axis == 2) {\r\n            sampleCoord.x = coord; // Vary s (width)\r\n        }\r\n        float sampled = texture(dataArray, sampleCoord).r; // Assuming data in red channel\r\n        minVal = sampled < minVal ? sampled : minVal; \r\n    }\r\n    \r\n    gl_FragColor = vec4(minVal, 0.0, 0.0, 1.0); // Output mean in red channel\r\n}")}StDev(e){return this.performReduction(e,"uniform sampler3D dataArray;\r\nuniform int axis;\r\nuniform int axisSize;\r\n\r\nvoid main() {\r\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\r\n\r\n    vec3 sampleCoord;\r\n    \r\n    // Initialize sampling coordinates based on reduction axis\r\n    if (axis == 0) {\r\n        // Reduce along depth (D0), uv maps to (s,t) = (D2,D1)\r\n        sampleCoord = vec3(uv.x, uv.y, 0.0);\r\n    } else if (axis == 1) {\r\n        // Reduce along height (D1), uv maps to (s,r) = (D2,D0)\r\n        sampleCoord = vec3(uv.x, 0.0, uv.y);\r\n    } else if (axis == 2) {\r\n        // Reduce along width (D2), uv maps to (t,r) = (D1,D0)\r\n        sampleCoord = vec3(0.0, uv.x, uv.y);\r\n    }\r\n\r\n    float sum = 0.0;\r\n    for (int m = 0; m < axisSize; m++) { \r\n        float coord = (float(m) + 0.5) / float(axisSize); //0.5 for center of pixel\r\n        \r\n        // Vary the appropriate coordinate\r\n        if (axis == 0) {\r\n            sampleCoord.z = coord; // Vary r (depth)\r\n        } else if (axis == 1) {\r\n            sampleCoord.y = coord; // Vary t (height)\r\n        } else if (axis == 2) {\r\n            sampleCoord.x = coord; // Vary s (width)\r\n        }\r\n        \r\n        sum += texture(dataArray, sampleCoord).r; // Assuming data in red channel\r\n    }\r\n    \r\n    float mean = sum / float(axisSize);\r\n\r\n\r\n    float squaredDiffSum = 0.0;\r\n\r\n    for (int m = 0; m < axisSize; m++) { \r\n        float coord = (float(m) + 0.5) / float(axisSize); //0.5 for center of pixel\r\n        \r\n        // Vary the appropriate coordinate\r\n        if (axis == 0) {\r\n            sampleCoord.z = coord; // Vary r (depth)\r\n        } else if (axis == 1) {\r\n            sampleCoord.y = coord; // Vary t (height)\r\n        } else if (axis == 2) {\r\n            sampleCoord.x = coord; // Vary s (width)\r\n        }\r\n\r\n        float diff = mean - texture(dataArray, sampleCoord).r;\r\n\r\n        squaredDiffSum += pow(diff,2.); // Assuming data in red channel\r\n    }\r\n    float stdev = sqrt(squaredDiffSum / float(axisSize));\r\n\r\n    gl_FragColor = vec4(stdev, 0.0, 0.0, 1.0); // Output mean in red channel\r\n}")}dispose(){var e;null==(e=this.texture)||e.dispose(),this.renderTarget.texture.dispose(),this.initTexture.dispose()}constructor(e,t,r){this.shape=e.shape,this.renderer=t,this.GPUCompute=new F.d(10,10,this.renderer),this.initTexture=this.GPUCompute.createTexture(),this.targetAxis=5,this.renderTarget=this.GPUCompute.createRenderTarget(10,10,a.ghU,a.ghU,1006,1006);let n=e.shape[0]*e.shape[1]*e.shape[2],i=new Uint8Array(n),{minVal:o,maxVal:s}=r;for(let t=0;t<n;t++){let r=(e.data[t]-o)/(s-o)*254;i[t]=isNaN(e.data[t])?255:r}this.texture=new a.dYF(i,this.shape[2],this.shape[1],this.shape[0]),this.texture.format=a.VT0,this.texture.minFilter=a.hxR,this.texture.magFilter=a.hxR,this.texture.needsUpdate=!0}}class k{initAxis(e){let t=this.shape.filter((t,r)=>r!==e);this.GPUCompute=new F.d(t[1],t[0],this.renderer),this.targetAxis=e,this.renderTarget=this.GPUCompute.createRenderTarget(t[1],t[0],a.ghU,a.ghU,1006,1006),this.renderTarget.texture.format=a.VT0,this.renderTarget.texture.minFilter=a.hxR,this.renderTarget.texture.magFilter=a.hxR,this.renderTarget.texture.needsUpdate=!0}performReduction(e,t){e!==this.targetAxis&&this.initAxis(e);let r=this.GPUCompute.addVariable("reduction",t,this.initTexture);return r.material.uniforms.dataArray1={value:this.textureOne},r.material.uniforms.dataArray2={value:this.textureTwo},r.material.uniforms.axisSize={value:this.shape[this.targetAxis]},r.material.uniforms.axis={value:this.targetAxis},this.GPUCompute.doRenderTarget(r.material,this.renderTarget),this.renderTarget.texture}Correlate(e){return this.performReduction(e,"uniform sampler3D dataArray1;\r\nuniform sampler3D dataArray2;\r\nuniform int axis;\r\nuniform int axisSize;\r\n\r\n\r\n\r\nvoid main() {\r\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\r\n    vec3 sampleCoord;\r\n    \r\n    if (axis == 0) {\r\n        sampleCoord = vec3(uv.x, uv.y, 0.0);\r\n    } else if (axis == 1) {\r\n        sampleCoord = vec3(uv.x, 0.0, uv.y);\r\n    } else if (axis == 2) {\r\n        sampleCoord = vec3(0.0, uv.x, uv.y);\r\n    }\r\n\r\n    float sumX = 0.0;\r\n    float sumY = 0.0;\r\n    float sumXX = 0.0;\r\n    float sumYY = 0.0;\r\n    float sumXY = 0.0;\r\n\r\n    for (int m = 0; m < axisSize; m++) {\r\n        float coord = (float(m) + 0.5) / float(axisSize);\r\n        if (axis == 0) {\r\n            sampleCoord.z = coord;\r\n        } else if (axis == 1) {\r\n            sampleCoord.y = coord;\r\n        } else if (axis == 2) {\r\n            sampleCoord.x = coord;\r\n        }\r\n        float X_i = texture(dataArray1, sampleCoord).r;\r\n        float Y_i = texture(dataArray2, sampleCoord).r;\r\n        sumX += X_i;\r\n        sumY += Y_i;\r\n        sumXX += X_i * X_i;\r\n        sumYY += Y_i * Y_i;\r\n        sumXY += X_i * Y_i;\r\n    }\r\n\r\n    float N = float(axisSize);\r\n    float meanX = sumX / N;\r\n    float meanY = sumY / N;\r\n    float varX = (sumXX / N) - (meanX * meanX);\r\n    float varY = (sumYY / N) - (meanY * meanY);\r\n    float covXY = (sumXY / N) - (meanX * meanY);\r\n    float sigmaX = sqrt(max(0.0, varX));\r\n    float sigmaY = sqrt(max(0.0, varY));\r\n    float epsilon = 1e-6;\r\n    float denominator = sigmaX * sigmaY + epsilon;\r\n    float correlation = covXY / denominator;\r\n\r\n    float newCorrelation = (correlation + 1.)/2.;\r\n\r\n    gl_FragColor = vec4(newCorrelation, 0.0, 0.0, 1.0);\r\n    \r\n}")}dispose(){var e,t;null==(e=this.textureOne)||e.dispose(),null==(t=this.textureTwo)||t.dispose(),this.renderTarget.texture.dispose(),this.initTexture.dispose()}constructor(e,t,r){let{firstArray:n,secondArray:i}=e;this.shape=n.shape,this.renderer=t,this.GPUCompute=new F.d(10,10,this.renderer),this.initTexture=this.GPUCompute.createTexture(),this.targetAxis=5,this.renderTarget=this.GPUCompute.createRenderTarget(10,10,a.ghU,a.ghU,1006,1006);let o=n.shape[0]*n.shape[1]*n.shape[2],s=new Uint8Array(o),{minVal:l,maxVal:u}=r.firstArray;for(let e=0;e<o;e++){let t=(n.data[e]-l)/(u-l)*254;s[e]=isNaN(n.data[e])?255:t}this.textureOne=new a.dYF(s,this.shape[2],this.shape[1],this.shape[0]),this.textureOne.format=a.VT0,this.textureOne.minFilter=a.hxR,this.textureOne.magFilter=a.hxR,this.textureOne.needsUpdate=!0;let c=new Uint8Array(o);l=r.secondArray.minVal,u=r.secondArray.maxVal;for(let e=0;e<o;e++){let t=(i.data[e]-l)/(u-l)*254;c[e]=isNaN(i.data[e])?255:t}this.textureTwo=new a.dYF(c,this.shape[2],this.shape[1],this.shape[0]),this.textureTwo.format=a.VT0,this.textureTwo.minFilter=a.hxR,this.textureTwo.magFilter=a.hxR,this.textureTwo.needsUpdate=!0}}let N=e=>{let{arrays:t,values:r,setters:i}=e,{setShowInfo:o,setLoc:c,setUV:m,setVal:d}=i,{colormap:h,flipY:p}=(0,l.o)((0,u.k)(e=>({colormap:e.colormap,flipY:e.flipY}))),{stateVars:f,valueScales:x}=r,{firstArray:v,secondArray:y}=t,{axis:w,operation:S,execute:b}=f,j=v.shape,[C,D]=(0,s.useState)(j.filter((e,t)=>t!==w)),{gl:A}=(0,g.A)(),M=(0,s.useRef)(!1),z=(0,s.useRef)(new Float32Array(0)),V=(0,s.useMemo)(()=>y?new k({firstArray:v,secondArray:y},A,x):new R(v,A,x.firstArray),[v,y]),[T,P]=(0,s.useState)(null),F=new a.BKk({glslVersion:a.Wdf,uniforms:{data:{value:T},cmap:{value:h}},vertexShader:" // by Jeran Poehls\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}",fragmentShader:"uniform sampler2D data;\r\nuniform sampler2D cmap;\r\n\r\nvarying vec2 vUv;\r\nout vec4 Color;\r\n\r\nvoid main() {\r\n    vec4 val = texture(data,vUv);\r\n    vec4 color = texture(cmap, vec2(val.x,0.5));\r\n    // vec4 color = vec4(val.r > .9);\r\n    // color.a = 1.;\r\n    color.a = val.x > 0.999 ? 0. : 1.;\r\n\r\n    Color = color;\r\n}",side:a.$EB});(0,s.useEffect)(()=>{if(v){let e=null;if(y&&V instanceof k)e=V.Correlate(w);else switch(S){case"Max":[e,z.current]=V instanceof R?V.Max(w):[null,z.current];break;case"Min":[e,z.current]=V instanceof R?V.Min(w):[null,z.current];break;case"Mean":[e,z.current]=V instanceof R?V.Mean(w):[null,z.current];break;case"StDev":[e,z.current]=V instanceof R?V.StDev(w):[null,z.current];break;default:e=T}P(e),D(j.filter((e,t)=>t!==w))}},[b,w]);let N=(0,s.useMemo)(()=>p?-(C[0]/C[1]*2):C[0]/C[1]*2,[p,C]);(0,s.useEffect)(()=>{V&&V.dispose()},[v,y]);let Y=(0,s.useRef)(null),U=(0,s.useRef)(null),E=(0,s.useCallback)(e=>{M.current&&e.uv&&(Y.current=e,U.current||(U.current=setTimeout(()=>{if(Y.current){c([Y.current.clientX,Y.current.clientY]);let{x:e,y:t}=Y.current.uv;m([e,t]);let r=Math.round(C[0]*t),n=Math.round(C[1]*e),a=C[1]*r+n;d(function(e,t){return e*(t.maxVal-t.minVal)+t.minVal}(z.current[4*a],x.firstArray))}U.current=null},50)))},[c,m]),_=(0,s.useMemo)(()=>new a.bdM(2,N),[N]);return(0,s.useEffect)(()=>{_.dispose()},[_]),(0,n.jsx)("mesh",{material:F,onPointerEnter:()=>{o(!0),M.current=!0},onPointerLeave:()=>{o(!1),M.current=!1},onPointerMove:E,geometry:_,rotation:[0,0,2==w?Math.PI/2:0]})};function Y(e){let{values:t}=e,{dimNames:r,dimArrays:a,dimUnits:i,setDimNames:o,setDimArrays:c,setDimUnits:m}=(0,l.o)((0,u.k)(e=>({dimNames:e.dimNames,dimArrays:e.dimArrays,dimUnits:e.dimUnits,setDimNames:e.setDimNames,setDimArrays:e.setDimArrays,setDimUnits:e.setDimUnits})));(0,l.o)(e=>e.variables);let{ZarrDS:d,canvasWidth:f}=t,v=(0,s.useRef)({}),g=(0,l.o)(e=>e.setFlipY),[y,w]=(0,s.useState)(100),[S,j]=(0,s.useState)(0),[C,D]=(0,s.useState)(100),[A,z]=(0,s.useState)(0),[V,T]=(0,s.useState)(null),[F,R]=(0,s.useState)(null),[k,Y]=(0,s.useState)(!1),[U,E]=(0,s.useState)(!1),[_,B]=(0,s.useState)([0,0]),[X,O]=(0,s.useState)([0,0]),[W,G]=(0,s.useState)(0),[L,I]=(0,s.useState)(0),[H,q]=(0,s.useState)(0);(0,s.useMemo)(()=>r.map((e,t)=>({text:e,value:t})),[]);let K=(0,p.aF)("analysis"),J=(0,h.ap)({backgroundColor:"#292b32",operation:"Mean",firstVar:"Default",secondVar:"Default",execute:!1,axis:0,active:!1},{title:"Analysis",container:null!=K?K:void 0,expanded:!1}),[Z]=(0,h.Kr)(J,"backgroundColor",{label:"bgcolor",value:"#292b32"}),[Q]=(0,h.Kr)(J,"firstVar",{label:"Variable 1",options:[...optionsVariables],value:"Default"}),[$]=(0,h.Kr)(J,"secondVar",{label:"Variable 2",options:[{text:"Default",value:"Default"},...optionsVariables],value:"Default"}),[ee]=(0,h.Kr)(J,"operation",{label:"Operation",options:[{text:"Mean",value:"Mean"},{text:"Min",value:"Min"},{text:"Max",value:"Max"},{text:"StDev",value:"StDev"}],value:"Mean"}),[et]=(0,h.Kr)(J,"axis",{label:"Axis",options:[{text:"0",value:0},{text:"1",value:1},{text:"2",value:2}]});(0,h.CZ)(J,{title:"Compute"},()=>Y(e=>!e)),(0,s.useEffect)(()=>{"Default"!==Q&&(d.GetArray(Q).then(e=>{if(T(e),Q in v.current)j(v.current[Q].min),w(v.current[Q].max);else{let[t,r]=(0,x.Qt)(e.data);w(r),j(t),v.current[Q]={min:t,max:r}}}),d.GetAttributes(Q).then(()=>{let[e,t,r]=d.GetDimArrays();c(e),o(r);let n=[];for(let e of t)n.push(e.units);m(n),e[1][1]<e[1][0]?g(!0):g(!1)})),"Default"!==$&&d.GetArray($).then(e=>{if(R(e),$ in v.current)z(v.current[$].min),D(v.current[$].max);else{let[t,r]=(0,x.Qt)(e.data);D(r),z(t),v.current[$]={min:t,max:r}}}),"Default"===$&&R(null)},[Q,$]);let er=(0,s.useMemo)(()=>a.filter((e,t)=>t!=et),[et,a]);return(0,s.useEffect)(()=>{if(a){let e=setTimeout(()=>{let e=er[1].length,t=er[0].length,r=Math.round(X[0]*e-.5),n=Math.round(X[1]*t-.5);I(er[1][r]),q(er[0][n])},50);return()=>clearTimeout(e)}},[X,er]),(0,n.jsxs)("div",{className:"analysis-canvas",style:{width:f,background:Z},children:[(0,n.jsx)(P,{loc:_,show:U,info:[H,L,W],plotDim:et}),(0,n.jsxs)(b.Hl,{camera:{position:[0,0,50],zoom:400},orthographic:!0,children:[V&&(0,n.jsx)(N,{arrays:{firstArray:V,secondArray:F},values:{stateVars:{operation:ee,axis:et,execute:k},valueScales:{firstArray:{maxVal:y,minVal:S},secondArray:{maxVal:C,minVal:A}}},setters:{setShowInfo:E,setLoc:B,setUV:O,setVal:G}}),(0,n.jsx)(M.N,{enablePan:!0,enableRotate:!1})]})]})}var U=r(6769);a.l2R.enabled=!0;let E=function(){let[e,t]=(0,s.useState)({plotType:"volume",cmap:"Spectral",flipCmap:!1}),r=(0,l.o)((0,u.k)(e=>e.initStore)),[a,c]=(0,s.useState)([]),m=(0,s.useMemo)(()=>new o.Y5(r),[r]),[h,f]=(0,s.useState)({});(0,s.useEffect)(()=>{let e=!0;(0,i.tz)((0,o.Oe)(r)).then(t=>{e&&f(t)});let t=(0,o.Oe)(r),n=(0,i.Tk)(t),a=(0,i.Bi)(n);return n.then(e=>c(e)),a.then(e=>{y(e)}),()=>{e=!1}},[r]);let{title:x,description:v}=h,{setColormap:g,setVariables:y,colormap:w,timeSeries:S,variable:b,metadata:j}=(0,l.o)((0,u.k)(e=>({setColormap:e.setColormap,setVariables:e.setVariables,colormap:e.colormap,timeSeries:e.timeSeries,variable:e.variable,metadata:e.metadata}))),[C,A]=(0,s.useState)(!1);(0,U.default)("--foreground"),(0,U.default)("--background");let[M,z]=(0,s.useState)(0);(0,s.useEffect)(()=>{z(Math.round(0*window.innerWidth))},[]),(0,s.useEffect)(()=>{g((0,V.v6)(w,e.cmap,1,"#000000",0,e.flipCmap))},[e.cmap,e.flipCmap]);let P=(0,s.useMemo)(()=>({ZarrDS:m,variable:b,canvasWidth:M}),[e.plotType,m,b,M]),F=(0,s.useMemo)(()=>({setters:{},values:{ZarrDS:m,canvasWidth:M}}),[m,M]);return(0,n.jsxs)(n.Fragment,{children:[M<10&&"Default"!=b&&(0,n.jsx)(p.kW,{onClick:()=>z(.5*window.innerWidth),canvasWidth:M}),M>10&&(0,n.jsx)(p.t2,{canvasWidth:M,setCanvasWidth:z}),(0,n.jsx)(p.Rh,{showLoading:C}),M>10&&(0,n.jsx)(Y,{values:F.values}),"Default"===b&&(0,n.jsx)(d,{zMeta:a}),"Default"!=b&&(0,n.jsx)(T,{values:P,setShowLoading:A}),j&&(0,n.jsx)(p.OS,{data:j}),S.length>2&&(0,n.jsx)(D,{})]})}},1663:()=>{},4221:()=>{},6145:(e,t,r)=>{Promise.resolve().then(r.bind(r,1306))},6375:()=>{}},e=>{var t=t=>e(e.s=t);e.O(0,[318,633,757,383,667,217,195,230,970,912,984,269,378,983,466,398,23,358],()=>t(6145)),_N_E=e.O()}]);