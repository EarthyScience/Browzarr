(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[974],{66:(e,n,t)=>{"use strict";t.d(n,{default:()=>ee});var r=t(5917),i=t(4928),a=t(4021),o=t(7027),s=t(2185),l=t(8738),u=t(1436);t(4435),t(7257);let d=()=>{let{variables:e,zMeta:n,setVariable:t}=(0,l.on)((0,u.k)(e=>({variables:e.variables,zMeta:e.zMeta,setVariable:e.setVariable}))),[i,a]=(0,s.useState)(Math.floor(e.length/2)),[o,d]=(0,s.useState)(null),[c,m]=(0,s.useState)(82),f=(0,s.useRef)(null),p=(0,s.useRef)(0);function x(){let e=window.innerWidth;e<=480?m(42):e<=570?m(54):m(82)}return(0,s.useEffect)(()=>{let e=e=>{e.cancelable&&e.preventDefault()};return document.addEventListener("touchmove",e,{passive:!1}),()=>{document.removeEventListener("touchmove",e)}},[]),(0,s.useEffect)(()=>{if(e&&n){let t=e[i];d(n.find(e=>e.name===t))}},[i,e]),(0,s.useEffect)(()=>{let e=window.innerWidth;return e<=480?m(42):e<=570?m(54):m(82),window.addEventListener("resize",x)},[]),(0,r.jsx)("div",{className:"scroll-container",onWheel:n=>{let t=i+(n.deltaY>0?1:-1);t>=0&&t<e.length&&a(t)},onTouchMove:n=>{let t=n.touches[0].clientY,r=f.current?f.current:t;if(f.current=t,p.current+=r-t,Math.abs(p.current)>=c){let n=i+(p.current>0?1:-1);n>=0&&n<e.length&&(a(n),p.current=0)}},onTouchEnd:()=>{f.current=null,p.current=0},children:(0,r.jsx)("div",{className:"scroll-element",style:{transform:"translateY(calc(40% + ".concat(-i*c,"px))")},children:e.map((e,n)=>{let o=Math.abs(i-n);return(0,r.jsx)("div",{className:"scroll-item",style:{opacity:1-.3*o,fontWeight:i===n?"bold":"normal"},onClick:()=>a(n),onDoubleClick:()=>t(e),children:e},n)})})})},c=" // by Jeran Poehls\r\n\r\nout vec3 vOrigin;\r\nout vec3 vDirection;\r\nout vec3 aPosition;\r\n\r\nout vec2 Vuv;\r\n\r\nvoid main() {\r\n    vec4 worldPos = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n    aPosition = position; //Pass out position for sphere frag\r\n    vOrigin = vec3( inverse( modelMatrix ) * vec4( cameraPosition, 1.0 ) ).xyz;\r\n    vDirection = position - vOrigin;\r\n    Vuv = uv;\r\n    gl_Position = projectionMatrix * worldPos;\r\n}",m=e=>{let{volTexture:n}=e,{shape:t,colormap:a,flipY:o}=(0,l.on)((0,u.k)(e=>({shape:e.shape,colormap:e.colormap,flipY:e.flipY}))),{valueRange:d,xRange:m,yRange:f,zRange:p,quality:x,animate:v,animProg:h,resetAnim:g,cScale:S,cOffset:y,useFragOpt:z}=(0,l.Ws)((0,u.k)(e=>({valueRange:e.valueRange,xRange:e.xRange,yRange:e.yRange,zRange:e.zRange,quality:e.quality,animate:e.animate,animProg:e.animProg,resetAnim:e.resetAnim,cScale:e.cScale,cOffset:e.cOffset,useFragOpt:e.useFragOpt}))),w=(0,s.useMemo)(()=>new i.BKk({glslVersion:i.Wdf,uniforms:{map:{value:n},cmap:{value:a},cOffset:{value:y},cScale:{value:S},cameraPos:{value:new i.Pq0},threshold:{value:new i.I9Y(d[0],d[1])},scale:{value:t},flatBounds:{value:new i.IUQ(m[0],m[1],p[0],p[1])},vertBounds:{value:new i.I9Y(f[0]/t.x,f[1]/t.x)},steps:{value:x},animateProg:{value:h}},vertexShader:c,fragmentShader:z?"// by Jeran Poehls\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nin vec3 vOrigin;\r\nin vec3 vDirection;\r\n\r\nout vec4 color;\r\n\r\nuniform sampler3D map;\r\nuniform sampler2D cmap;\r\n\r\nuniform float cOffset;\r\nuniform float cScale;\r\nuniform vec3 scale;\r\nuniform vec2 threshold;\r\nuniform float steps;\r\nuniform vec4 flatBounds;\r\nuniform vec2 vertBounds;\r\nuniform float animateProg;\r\n\r\nvec2 hitBox(vec3 orig, vec3 dir) {\r\n    vec3 box_min = vec3(-(scale * 0.5));\r\n    vec3 box_max = vec3(scale * 0.5);\r\n    vec3 inv_dir = 1.0 / dir;\r\n    vec3 tmin_tmp = (box_min - orig) * inv_dir;\r\n    vec3 tmax_tmp = (box_max - orig) * inv_dir;\r\n    vec3 tmin = min(tmin_tmp, tmax_tmp);\r\n    vec3 tmax = max(tmin_tmp, tmax_tmp);\r\n    float t0 = max(tmin.x, max(tmin.y, tmin.z));\r\n    float t1 = min(tmax.x, min(tmax.y, tmax.z));\r\n    return vec2(t0, t1);\r\n}\r\n\r\nfloat sample1( vec3 p ) {\r\n    return texture( map, p ).r;\r\n}\r\n\r\n#define epsilon 0.0001\r\n\r\nvoid main() {\r\n    vec3 rayDir = normalize(vDirection);\r\n    vec2 bounds = hitBox(vOrigin, rayDir);\r\n\r\n    if (bounds.x > bounds.y) discard;\r\n\r\n    bounds.x = max(bounds.x, 0.0);\r\n\r\n    vec3 p = vOrigin + bounds.x * rayDir;\r\n    vec3 inc = 1.0 / abs(rayDir);\r\n\r\n    //Step Sizes\r\n    float fineDelta = min(inc.x, min(inc.y, inc.z)) / steps;\r\n\r\n    float coarseDelta = min(inc.x, min(inc.y, inc.z))/50.;\r\n\r\n    float delta = fineDelta;\r\n\r\n    vec4 accumColor = vec4(0.0);\r\n    float alphaAcc = 0.0;\r\n\r\n    float t = bounds.x;\r\n    int countdown = 0;\r\n    bool useCoarseStep = false;\r\n\r\n    while (t < bounds.y) {\r\n        vec3 p = vOrigin + rayDir * t;\r\n        \r\n        // --- Boundary checks ---\r\n        if (p.x < flatBounds.x || p.x > flatBounds.y ||\r\n            p.z < flatBounds.z || p.z > flatBounds.w ||\r\n            p.y < vertBounds.x || p.y > vertBounds.y) {\r\n\r\n            t += useCoarseStep ? coarseDelta : fineDelta;\r\n            continue;\r\n        }\r\n\r\n        vec3 texCoord = p / scale + 0.5;\r\n        texCoord.z = mod(texCoord.z + animateProg, 1.0001);\r\n        float d = sample1(texCoord);\r\n\r\n        bool cond = (d > threshold.x) && (d < threshold.y);\r\n        \r\n        if (cond) {\r\n            // Hit something interesting - switch to fine stepping\r\n            if (useCoarseStep) {\r\n                useCoarseStep = false;\r\n                countdown = 40;\r\n                // Step back to ensure we don't miss the boundary\r\n                t -= coarseDelta;\r\n                continue;\r\n            }\r\n            float sampLoc = d == 1. ? d : (d - 0.5)*cScale + 0.5;\r\n            sampLoc = d == 1. ? d : min(sampLoc+cOffset,0.99);\r\n            vec4 col = texture(cmap, vec2(sampLoc, 0.5));\r\n            float alpha = float(col.a > 0.);\r\n\r\n            accumColor.rgb += (1.0 - alphaAcc) * alpha * col.rgb;\r\n            alphaAcc += alpha * (1.0 - alphaAcc);\r\n\r\n            if (alphaAcc >= 1.0) break;\r\n            \r\n            t += fineDelta;\r\n        }\r\n        else {\r\n            // Nothing interesting here\r\n            if (countdown > 0) {\r\n                countdown--;\r\n                t += fineDelta; // Continue with fine steps while countdown > 0\r\n            } else {\r\n                useCoarseStep = true;\r\n                t += coarseDelta; // Switch to coarse steps\r\n            }\r\n        }\r\n    }\r\n    accumColor.a = alphaAcc; // Set the final accumulated alpha\r\n    color = accumColor;\r\n    if (color.a == 0.0) discard;\r\n}\r\n":"// by Jeran Poehls\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nin vec3 vOrigin;\r\nin vec3 vDirection;\r\n\r\nout vec4 color;\r\n\r\nuniform sampler3D map;\r\nuniform sampler2D cmap;\r\n\r\nuniform float cOffset;\r\nuniform float cScale;\r\nuniform vec3 scale;\r\nuniform vec2 threshold;\r\nuniform float steps;\r\nuniform vec4 flatBounds;\r\nuniform vec2 vertBounds;\r\nuniform float animateProg;\r\n\r\nvec2 hitBox(vec3 orig, vec3 dir) {\r\n    vec3 box_min = vec3(-(scale * 0.5));\r\n    vec3 box_max = vec3(scale * 0.5);\r\n    vec3 inv_dir = 1.0 / dir;\r\n    vec3 tmin_tmp = (box_min - orig) * inv_dir;\r\n    vec3 tmax_tmp = (box_max - orig) * inv_dir;\r\n    vec3 tmin = min(tmin_tmp, tmax_tmp);\r\n    vec3 tmax = max(tmin_tmp, tmax_tmp);\r\n    float t0 = max(tmin.x, max(tmin.y, tmin.z));\r\n    float t1 = min(tmax.x, min(tmax.y, tmax.z));\r\n    return vec2(t0, t1);\r\n}\r\n\r\nfloat sample1( vec3 p ) {\r\n    return texture( map, p ).r;\r\n}\r\n\r\n#define epsilon 0.0001\r\n\r\nvoid main() {\r\n    vec3 rayDir = normalize(vDirection);\r\n    vec2 bounds = hitBox(vOrigin, rayDir);\r\n\r\n    if (bounds.x > bounds.y) discard;\r\n\r\n    bounds.x = max(bounds.x, 0.0);\r\n\r\n    vec3 p = vOrigin + bounds.x * rayDir;\r\n    vec3 inc = 1.0 / abs(rayDir);\r\n    float delta = min(inc.x, min(inc.y, inc.z));\r\n    delta /= steps;\r\n    vec4 accumColor = vec4(0.0);\r\n    float alphaAcc = 0.0;\r\n\r\n    for (float t = bounds.x; t < bounds.y; t += delta) {\r\n        p = vOrigin + rayDir * t;\r\n        if (p.x > -flatBounds.x || p.x < -flatBounds.y) { \r\n            continue;\r\n        }\r\n        if (-p.z > -flatBounds.z || -p.z < -flatBounds.w) {\r\n            continue;\r\n        }\r\n        if (p.y < vertBounds.x || p.y > vertBounds.y) {\r\n            continue;\r\n        }\r\n\r\n        vec3 texCoord = p / scale + 0.5;\r\n        texCoord.z = mod(texCoord.z + animateProg, 1.0001);\r\n        float d = sample1(texCoord);\r\n\r\n        bool cond = (d > threshold.x) && (d < threshold.y);\r\n        \r\n        if (cond) {\r\n            float sampLoc = d == 1. ? d : (d - 0.5)*cScale + 0.5;\r\n            sampLoc = d == 1. ? d : min(sampLoc+cOffset,0.99);\r\n            vec4 col = texture(cmap, vec2(sampLoc, 0.5));\r\n            // Change this later back to use intensity then delete comment. Or maybe we don't need intensity\r\n            float alpha = float(col.a > 0.);\r\n\r\n            accumColor.rgb += (1.0 - alphaAcc) * alpha * col.rgb;\r\n            alphaAcc += alpha * (1.0 - alphaAcc);\r\n\r\n            if (alphaAcc >= 1.0) break;\r\n        }\r\n    }\r\n\r\n    accumColor.a = alphaAcc; // Set the final accumulated alpha\r\n    color = accumColor;\r\n    if (color.a == 0.0) discard;\r\n}\r\n",transparent:!0,blending:i.NTi,depthWrite:!1,side:i.hsX}),[n,a,y,S,d,m,f,p,x,h,z]),b=(0,s.useMemo)(()=>new i.WBB(2,4),[]);return(0,s.useEffect)(()=>()=>{b.dispose()},[]),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("mesh",{geometry:b,scale:[1,o?-1:1,1],children:(0,r.jsx)("primitive",{attach:"material",object:w})})})};var f=t(8042);let p=e=>{let{ZarrDS:n}=e,[t,a]=(0,s.useState)(null),{setTimeSeries:o,setPlotDim:d,setDimCoords:c,updateTimeSeries:m,updateDimCoords:p}=(0,l.on)((0,u.k)(e=>({setTimeSeries:e.setTimeSeries,setPlotDim:e.setPlotDim,setDimCoords:e.setDimCoords,updateTimeSeries:e.updateTimeSeries,updateDimCoords:e.updateDimCoords}))),{shape:x,dimArrays:v,dimNames:h,dimUnits:g}=(0,l.on)((0,u.k)(e=>({shape:e.shape,dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits}))),S=(0,l.Ws)(e=>e.selectTS),y=(0,s.useRef)(null),z=(0,s.useMemo)(()=>new i.iNn(1,1,1),[]);return(0,s.useEffect)(()=>()=>{z.dispose()},[]),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("mesh",{geometry:z,scale:x,onClick:e=>{e.stopPropagation(),e.intersections.length>0&&S&&function(e){let t=e.point,r=e.uv,i=e.normal,s=(0,f.getUnitAxis)(i);if(s!=y.current&&(o({}),c({})),y.current=s,n){var l,u;let e=n.GetTimeSeries({uv:r,normal:i}),t=i.toArray().map((e,n)=>Math.abs(e)>0?n:null).filter(e=>null!==e);d(2-t[0]);let a=(0,f.parseUVCoords)({normal:i,uv:r}).map((e,n)=>e?v[n][Math.round(e*v[n].length)]:null),o=h.filter((e,n)=>null!==a[n]),s=g.filter((e,n)=>null!==a[n]);a=a.filter(e=>null!==e);let c="".concat(a[0],"_").concat(a[1]);m({[c]:e}),p({[c]:{first:{name:o[0],loc:null!=(l=a[0])?l:0,units:s[0]},second:{name:o[1],loc:null!=(u=a[1])?u:0,units:s[1]},plot:{units:g[2-t[0]]}}})}a(t)}(e.intersections[0])},children:(0,r.jsx)("meshBasicMaterial",{transparent:!0,opacity:0})}),t&&(0,r.jsxs)("mesh",{position:t,scale:.01,children:[(0,r.jsx)("boxGeometry",{}),(0,r.jsx)("meshBasicMaterial",{color:"#ff0000"})]})]})},x=e=>{let{dimensions:n,ZarrDS:t,setters:i}=e,{width:a,height:o,depth:d}=n,{setPointIDs:c,setStride:m,setDimWidth:p}=i,x=(0,l.Ws)(e=>e.selectTS),v=a/o,h=d/o,{dimArrays:g,dimUnits:S,dimNames:y,strides:z,setPlotDim:w,setTimeSeries:b,updateTimeSeries:_,setDimCoords:k,updateDimCoords:D}=(0,l.on)((0,u.k)(e=>({dimArrays:e.dimArrays,dimUnits:e.dimUnits,dimNames:e.dimNames,strides:e.strides,setPlotDim:e.setPlotDim,setTimeSeries:e.setTimeSeries,updateTimeSeries:e.updateTimeSeries,setDimCoords:e.setDimCoords,updateDimCoords:e.updateDimCoords}))),C=(0,s.useRef)(null),P=(0,l.Ws)(e=>e.timeScale);return(0,r.jsxs)("mesh",{scale:[2*v,2,2*h*P],onClick:function(e){if(!x)return;let n=e.uv,r=e.normal,i=(0,f.getUnitAxis)(r);if(i!=C.current&&(b({}),k({}),c(Array(10).fill(-1))),C.current=i,t){var s,l;let e=t.GetTimeSeries({uv:n,normal:r}),i=r.toArray().map((e,n)=>Math.abs(e)>0?n:null).filter(e=>null!==e);w(2-i[0]);let u=(0,f.parseUVCoords)({normal:r,uv:n}),x=u.map((e,n)=>e?g[n][Math.round(e*g[n].length-.5)]:null),v=y.filter((e,n)=>null!==x[n]),h=S.filter((e,n)=>null!==x[n]);x=x.filter(e=>null!==e);let b="".concat(x[0],"_").concat(x[1]);_({[b]:e}),D({[b]:{first:{name:v[0],loc:null!=(s=x[0])?s:0,units:h[0]},second:{name:v[1],loc:null!=(l=x[1])?l:0,units:h[1]},plot:{units:S[2-i[0]]}}});let k=[d,o,a].filter((e,n)=>null!=u[n]),C=[d,o,a].filter((e,n)=>null==u[n]),P=u.filter(e=>null!=e),j=z.filter((e,n)=>null!=u[n]),M=Math.round(P[0]*k[0]-.5),O=Math.round(P[1]*k[1]-.5),A=M*j[0]+O*j[1],B=z.filter((e,n)=>null==u[n]);p(C[0]),c(e=>[A,...e].slice(0,10)),m(B[0])}},children:[(0,r.jsx)("boxGeometry",{}),(0,r.jsx)("meshBasicMaterial",{transparent:!0,opacity:0})]})},v=e=>{let{textures:n,ZarrDS:t}=e,{texture:a,colormap:o}=n,d=(0,l.on)(e=>e.flipY),{scalePoints:c,scaleIntensity:m,pointSize:f,cScale:p,cOffset:v,valueRange:h,animProg:g,selectTS:S,timeScale:y,xRange:z,yRange:w,zRange:b}=(0,l.Ws)((0,u.k)(e=>({scalePoints:e.scalePoints,scaleIntensity:e.scaleIntensity,pointSize:e.pointSize,cScale:e.cScale,cOffset:e.cOffset,valueRange:e.valueRange,animProg:e.animProg,selectTS:e.selectTS,timeScale:e.timeScale,xRange:e.xRange,yRange:e.yRange,zRange:e.zRange}))),_=(0,l.$U)(e=>e.setOom),[k,D]=(0,s.useState)(Array(10).fill(-1)),[C,P]=(0,s.useState)(1),[j,M]=(0,s.useState)(0),{data:O,width:A,height:B,depth:I}=(0,s.useMemo)(()=>a instanceof i.dYF?{data:a.image.data,width:a.image.width,height:a.image.height,depth:a.image.depth}:(console.warn("Provided texture is not a Data3DTexture"),{data:[],width:0,height:0,depth:0}),[a]),L=(0,s.useMemo)(()=>A/B,[A,B]),V=(0,s.useMemo)(()=>I/B,[I,B]),{positions:U,values:Y}=(0,s.useMemo)(()=>{let e;try{e=new Float32Array(I*B*A*3)}catch(e){return _(!0),{positions:[],values:[]}}let n=new Uint8Array(I*B*A);for(let t=0;t<I;t++)for(let r=0;r<B;r++)for(let i=0;i<A;i++){let a=i+r*A+t*A*B,o=O[a]||0,s=(i/(A-1)-.5)*L,l=r/(B-1)-.5,u=(t/(I-1)-.5)*V,d=3*a;e[d]=2*s,e[d+1]=2*l,e[d+2]=2*u,n[a]=o}return{positions:e,values:n}},[O,A,B,I]),R=(0,s.useMemo)(()=>{let e=new i.LoY;return e.setAttribute("position",new i.qtW(U,3)),e.setAttribute("value",new i.qtW(Y,1)),e},[U,Y]),G=(0,s.useMemo)(()=>new i.BKk({glslVersion:i.Wdf,uniforms:{pointSize:{value:f},cmap:{value:o},cOffset:{value:v},cScale:{value:p},valueRange:{value:new i.I9Y(h[0],h[1])},scalePoints:{value:c},scaleIntensity:{value:m},startIDs:{value:k},stride:{value:C},showTransect:{value:S},dimWidth:{value:j},timeScale:{value:y},animateProg:{value:g},depthRatio:{value:V},flatBounds:{value:new i.IUQ(z[0]*L,z[1]*L,b[0]*V,b[1]*V)},vertBounds:{value:new i.I9Y(w[0],w[1])}},vertexShader:"attribute float value;\r\nout float vValue;\r\n\r\nflat out int highlight;\r\n\r\nuniform float pointSize;\r\nuniform bool scalePoints;\r\nuniform float scaleIntensity;\r\nuniform vec2 valueRange;\r\nuniform int[10] startIDs;\r\nuniform int stride;\r\nuniform int dimWidth;\r\nuniform bool showTransect;\r\nuniform float timeScale;\r\nuniform float animateProg;\r\nuniform float depthRatio;\r\nuniform vec4 flatBounds;\r\nuniform vec2 vertBounds;\r\n\r\nbool isValidPoint(){\r\n    for (int i = 0; i < 10; i++){\r\n        if (startIDs[i] == -1){\r\n            return false;\r\n        }\r\n        int rePos = gl_VertexID - startIDs[i];\r\n        bool isValid = rePos % stride == 0;\r\n        bool secondary = gl_VertexID < (startIDs[i] + dimWidth*stride) && gl_VertexID > startIDs[i];\r\n        isValid = isValid && secondary;\r\n        if (isValid){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nvoid main() {\r\n    vValue = value/255.;\r\n    vec3 scaledPos = position;\r\n    scaledPos.z += depthRatio;\r\n    scaledPos.z = mod(scaledPos.z + animateProg*2.*depthRatio, 2.*depthRatio);\r\n    scaledPos.z -= depthRatio;\r\n\r\n    scaledPos.z *= timeScale;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(scaledPos, 1.0);\r\n    //If it is nan we just yeet it tf out of the screen space. LMAO I love this solution\r\n    float pointScale = pointSize/gl_Position.w;\r\n    pointScale = scalePoints ? pointScale*pow(vValue,scaleIntensity) : pointScale;\r\n\r\n    bool isValid = isValidPoint();\r\n    highlight = isValid ? 1 : 0;\r\n    \r\n    if (value == 255. || (pointScale*gl_Position.w < 0.75 && scalePoints)){ //Hide points that are invisible or get too small when scalled\r\n        gl_Position = vec4(2.0, 2.0, 2.0, 1.0);\r\n    }\r\n\r\n    if (vValue < valueRange.x || vValue > valueRange.y){ //Hide points that are outside of value range\r\n        gl_Position = vec4(2.0, 2.0, 2.0, 1.0);\r\n    }\r\n\r\n    vec2 scaledZBounds = vec2(flatBounds.z,  flatBounds.w) * vec2(timeScale);\r\n    bool xCheck = scaledPos.x < flatBounds.x || scaledPos.x > flatBounds.y;\r\n    bool zCheck = scaledPos.z < scaledZBounds.x || scaledPos.z > scaledZBounds.y;\r\n    bool yCheck = scaledPos.y < vertBounds.x || scaledPos.y> vertBounds.y;\r\n\r\n    if (xCheck || zCheck || yCheck){ //Hide points that are clipped\r\n        gl_Position = vec4(2.0, 2.0, 2.0, 1.0);\r\n    }\r\n    \r\n    if (showTransect){\r\n        gl_PointSize = isValid ? max(pointScale*5. , pointScale+80./gl_Position.w) : pointScale;\r\n    }\r\n    else{\r\n        gl_PointSize =  pointScale;\r\n    }\r\n\r\n}\r\n",fragmentShader:"out vec4 Color;\r\n\r\nin float vValue;\r\nflat in int highlight;\r\n\r\n\r\nuniform sampler2D cmap;\r\nuniform float cScale;\r\nuniform float cOffset;\r\nuniform bool showTransect;\r\n\r\nvoid main() {\r\n\r\n    float sampLoc = vValue == 1. ? vValue : (vValue - 0.5)*cScale + 0.5;\r\n    sampLoc = vValue == 1. ? vValue : min(sampLoc+cOffset,0.99);\r\n    vec4 color = texture(cmap, vec2(sampLoc, 0.5));\r\n    color.a = 1.;\r\n    Color = color;\r\n    if (showTransect){\r\n        Color = highlight == 1 ? color : color * vec4(vec3(0.4),1.);\r\n    }\r\n    else{\r\n        Color = color;\r\n    }\r\n\r\n}\r\n",depthWrite:!0,transparent:!0,blending:i.NTi,side:i.$EB}),[f,o,v,p,h,c,m,k,C,S,g,y,V,L,z,w,b]);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("mesh",{scale:[1,d?-1:1,1],children:(0,r.jsx)("points",{geometry:R,material:G})}),(0,r.jsx)(x,{dimensions:{width:A,height:B,depth:I},ZarrDS:t,setters:{setPointIDs:D,setStride:P,setDimWidth:M}})]})};var h=t(3758),g=t(5496);t(7619);var S=t(5461);t(6720);var y=t(4860),z=t(7010);function w(e){let{...n}=e;return(0,r.jsx)(y.Root,{"data-slot":"dropdown-menu",...n})}function b(e){let{...n}=e;return(0,r.jsx)(y.Trigger,{"data-slot":"dropdown-menu-trigger",...n})}function _(e){let{className:n,sideOffset:t=4,...i}=e;return(0,r.jsx)(y.Portal,{children:(0,r.jsx)(y.Content,{"data-slot":"dropdown-menu-content",sideOffset:t,className:(0,z.cn)("bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",n),...i})})}function k(e){let{...n}=e;return(0,r.jsx)(y.Group,{"data-slot":"dropdown-menu-group",...n})}function D(e){let{className:n,inset:t,variant:i="default",...a}=e;return(0,r.jsx)(y.Item,{"data-slot":"dropdown-menu-item","data-inset":t,"data-variant":i,className:(0,z.cn)("focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",n),...a})}function C(e){let{className:n,...t}=e;return(0,r.jsx)(y.Separator,{"data-slot":"dropdown-menu-separator",className:(0,z.cn)("bg-border -mx-1 my-1 h-px",n),...t})}let P=s.memo(function(){let{showPoints:e,linePointSize:n,pointColor:t,useCustomPointColor:i,setLinePointSize:a,setPointColor:o,setUseCustomPointColor:s}=(0,l.Ws)((0,u.k)(e=>({showPoints:e.showPoints,linePointSize:e.linePointSize,pointColor:e.pointColor,useCustomPointColor:e.useCustomPointColor,setLinePointSize:e.setLinePointSize,setPointColor:e.setPointColor,setUseCustomPointColor:e.setUseCustomPointColor})));return e?(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("div",{className:"w-full flex items-center",children:[(0,r.jsx)("div",{className:"w-[40%]",children:(0,r.jsx)("b",{children:"Point Size"})}),(0,r.jsx)("input",{type:"range",min:1,max:10,step:.1,value:n,onChange:e=>a(parseFloat(e.target.value))})]}),(0,r.jsxs)("div",{className:"w-full flex items-center",children:[(0,r.jsx)("div",{className:"w-[40%]",children:(0,r.jsx)("b",{children:"Point Color"})}),i&&(0,r.jsx)("input",{type:"color",title:"Point Color",value:t,onChange:e=>o(e.target.value)}),(0,r.jsxs)(S.$,{className:"h-8 px-2 py-1",variant:"outline",onClick:()=>s(!i),children:["Use",i?" Browzarr Color":" Custom Color"]})]})]}):null}),j=s.memo(function(){let{lineWidth:e,lineColor:n,useLineColor:t,lineResolution:i,useCustomColor:a,setLineWidth:o,setLineColor:s,setUseLineColor:d,setLineResolution:c,setUseCustomColor:m}=(0,l.Ws)((0,u.k)(e=>({lineWidth:e.lineWidth,lineColor:e.lineColor,useLineColor:e.useLineColor,lineResolution:e.lineResolution,useCustomColor:e.useCustomColor,setLineWidth:e.setLineWidth,setLineColor:e.setLineColor,setUseLineColor:e.setUseLineColor,setLineResolution:e.setLineResolution,setUseCustomColor:e.setUseCustomColor})));return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("div",{className:"w-full flex items-center",children:[(0,r.jsx)("div",{className:"w-[40%]",children:(0,r.jsx)("b",{children:"Line Width"})}),(0,r.jsx)("input",{type:"range",min:1,max:10,step:.2,value:e,onChange:e=>o(parseFloat(e.target.value))})]}),(0,r.jsxs)("div",{className:"w-full flex items-center",children:[(0,r.jsx)("div",{className:"w-[40%]",children:(0,r.jsx)("b",{children:"Line Resolution"})}),(0,r.jsx)("input",{type:"range",min:1,max:10,step:1,value:i,onChange:e=>c(parseFloat(e.target.value))})]}),(0,r.jsxs)("div",{className:"w-full flex items-center",children:[(0,r.jsx)("div",{className:"w-[40%]",children:(0,r.jsx)("b",{children:"Line Color"})}),a&&(0,r.jsx)("input",{type:"color",title:"Line Color",value:n,onChange:e=>s(e.target.value)}),!a&&(0,r.jsxs)(S.$,{className:"h-8 px-2 py-5",variant:"outline",onClick:()=>d(!t),children:["Use ",(0,r.jsx)("br",{}),t?"Individual Color":"Plot Color"]}),(0,r.jsxs)(S.$,{className:"h-8 px-2 py-5",variant:"outline",onClick:()=>m(!a),children:["Use ",(0,r.jsx)("br",{}),a?"Browzarr Color":"Custom Color"]})]})]})}),M=s.memo(function(){let{showPoints:e,setShowPoints:n}=(0,l.Ws)((0,u.k)(e=>({showPoints:e.showPoints,setShowPoints:e.setShowPoints})));return(0,r.jsx)("div",{className:"plotline-options",children:(0,r.jsxs)(w,{children:[(0,r.jsx)(b,{asChild:!0,children:(0,r.jsx)(S.$,{className:"cursor-pointer",variant:"outline",children:"Line Options"})}),(0,r.jsxs)(_,{className:"w-80 items-center",align:"center",children:[(0,r.jsx)(k,{onClick:e=>e.preventDefault(),children:(0,r.jsx)(D,{children:(0,r.jsx)(S.$,{variant:"outline",onClick:t=>{t.preventDefault(),n(!e)},children:e?"Hide Points":"Show Points"})})}),(0,r.jsx)(P,{}),(0,r.jsx)(C,{}),(0,r.jsx)(j,{})]})]})})});var O=t(958),A=t(3135);function B(e){let{pointID:n,pointLoc:t,showPointInfo:i,plotUnits:a}=e,{plotDim:o,dimArrays:d,dimNames:c,dimUnits:m,timeSeries:p}=(0,l.on)((0,u.k)(e=>({plotDim:e.plotDim,dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits,timeSeries:e.timeSeries}))),x=0,v=0;if(Object.entries(n).length>0&&Object.entries(p).length>0){let[e,t]=Object.entries(n)[0];x=p[e][t],v=d[o][t]}let[h,g]=t,[S,y]=(0,s.useState)(!1);return(0,s.useEffect)(()=>{if(!i){let e=setTimeout(()=>{y(!1)},100);return()=>clearTimeout(e)}y(!0)},[i]),(0,r.jsx)(r.Fragment,{children:S&&(0,r.jsxs)("div",{className:"point-info",style:{left:"".concat(h,"px"),top:"".concat(g,"px")},children:["".concat(x.toFixed(2)).concat(a),(0,r.jsx)("br",{}),"".concat(c[o],": ").concat((0,f.parseLoc)(v,m[o]),"       \n        ")]})})}function I(){let{coords:e,timeSeries:n,setDimCoords:t,setTimeSeries:i}=(0,l.on)((0,u.k)(e=>({coords:e.dimCoords,timeSeries:e.timeSeries,setDimCoords:e.setDimCoords,setTimeSeries:e.setTimeSeries}))),[a,o]=(0,s.useState)(!1),d=(0,s.useRef)([0,Math.round(.255*window.innerHeight)]),c=(0,s.useRef)([0,Math.round(.255*window.innerHeight)]),[m,p]=(0,s.useState)([0,Math.round(.255*window.innerHeight)]);function x(e){if(a){let n=d.current[0]-e.clientX,t=d.current[1]-e.clientY,r=Math.min(Math.max(c.current[0]-n,10),window.innerWidth-120),i=Math.max(c.current[1]+t,0);p([Math.min(r,window.innerWidth-100),Math.min(i,window.innerHeight-100)])}}function v(){o(!1)}return(0,s.useEffect)(()=>(a&&(document.addEventListener("mousemove",x),document.addEventListener("mouseup",v)),()=>{document.removeEventListener("mousemove",x),document.removeEventListener("mouseup",v)}),[a]),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("div",{className:"coord-container",onPointerDown:function(e){d.current=[e.clientX,e.clientY],c.current=[...m],o(!0)},onPointerMove:x,onPointerUp:()=>o(!1),style:{left:"".concat(m[0],"px"),bottom:"".concat(m[1],"px")},children:Object.keys(e).length>0&&Object.keys(e).reverse().map((a,o)=>(0,r.jsxs)("div",{className:"plot-coords",style:{background:"rgb(".concat((0,O.md)(o/10,"Paired"),")"),justifyContent:"space-between"},children:[(0,r.jsx)("b",{children:"".concat(e[a].first.name,": ")}),"".concat((0,f.parseLoc)(e[a].first.loc,e[a].first.units)),(0,r.jsx)("br",{}),(0,r.jsx)("b",{children:"".concat(e[a].second.name,": ")}),"".concat((0,f.parseLoc)(e[a].second.loc,e[a].second.units)),(0,r.jsx)(A.Xr4,{onClick:()=>(function(r){let{[r]:a,...o}=e;t(o);let{[r]:s,...l}=n;i(l)})(a),color:"red",style:{cursor:"pointer",zIndex:3}})]},a))})})}function L(){let[e,n]=(0,s.useState)({}),[t,i]=(0,s.useState)([0,0]),[a,o]=(0,s.useState)(!1),[u,d]=(0,s.useState)(Math.round(window.innerHeight-.25*window.innerHeight)),c=(0,l.on)(e=>e.metadata),m=c?c.units:"Default",[f,p]=(0,s.useState)(1),[x,v]=(0,s.useState)(1);(0,s.useEffect)(()=>{let e=()=>{let e=Math.round(window.innerHeight-.25*window.innerHeight);d(e),document.documentElement.style.setProperty("--plot-height","".concat(e,"px"))};return window.addEventListener("orientationchange",e),window.addEventListener("resize",e),()=>{window.removeEventListener("orientationchange",e),window.removeEventListener("resize",e)}},[]),(0,s.useEffect)(()=>{document.documentElement.style.setProperty("--plot-height","".concat(u,"px"))},[u]);let S=window.innerHeight-u>=10;return(0,r.jsxs)(r.Fragment,{children:[!S&&(0,r.jsx)(g.de,{onClick:()=>{d(window.innerHeight-60)}}),S&&(0,r.jsxs)("div",{className:"plot-canvas",children:[(0,r.jsx)(M,{}),a&&(0,r.jsx)(B,{pointID:e,pointLoc:t,showPointInfo:a,plotUnits:m}),(0,r.jsx)(g.A,{height:u,setHeight:d}),(0,r.jsx)(g.gj,{scale:f,setScale:p}),(0,r.jsx)(g.LC,{scale:x,setScale:v}),(0,r.jsxs)(h.Hl,{orthographic:!0,camera:{position:[0,0,100]},frameloop:"demand",children:[(0,r.jsx)($,{height:u,yScale:f,pointSetters:{setPointID:n,setPointLoc:i,setShowPointInfo:o},xScale:x}),(0,r.jsx)(R,{height:u,yScale:f,xScale:x})]}),(0,r.jsx)(I,{})]})]})}var V=t(5106),U=t(8340),Y=t(6290);function R(e){let{colorTicks:n="grey",tickSize:t=4,fontSize:i=14,showGrid:a=!0,gridOpacity:o=.5,height:d,yScale:c=1,xScale:m=1}=e,{camera:p}=(0,Y.C)(),[x,v]=(0,s.useState)({left:0,right:0,top:0,bottom:0}),{dimCoords:h,dimArrays:g,plotDim:S,valueScales:y}=(0,l.on)((0,u.k)(e=>({dimCoords:e.dimCoords,dimArrays:e.dimArrays,plotDim:e.plotDim,valueScales:e.valueScales}))),z=g[S],w=z.length,b=y.maxVal-y.minVal,_=(0,s.useMemo)(()=>{let e=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];if(z){if(z.every(e=>"bigint"==typeof e)){let n=Object.keys(h).length>0?Object.keys(h)[0]:null,t=n?(0,f.parseTimeUnit)(h[n].plot.units):1,r=[];for(let n=0;n<z.length;n++){let i=new Date(Number(z[n])*t),a="".concat(i.getDate().toString().padStart(2,"0")," ").concat(e[i.getMonth()],"\n").concat(i.getFullYear());r.push(a)}return r}return z.map(e=>String(e))}},[z,h]),k=(0,s.useMemo)(()=>{let e=window.innerWidth,n=window.innerHeight-d;return{left:-e/2+p.position.x,right:e/2+p.position.x,top:n/2+p.position.y,bottom:-n/2+p.position.y}},[]),[D,C]=(0,s.useState)(p.zoom),P=(0,s.useMemo)(()=>{let e=1/p.zoom;return{tickSize:t*e,fontSize:i/e,labelOffset:t*e}},[p.zoom,t,i]);(0,Y.D)(()=>{p.zoom!==D&&C(p.zoom);let e=window.innerWidth/p.zoom,n=(window.innerHeight-d)/p.zoom,t={left:-e/2+p.position.x,right:e/2+p.position.x,top:n/2+p.position.y,bottom:-n/2+p.position.y};JSON.stringify(x)!=JSON.stringify(t)&&v(t)});let j=(0,s.useRef)(null),M=(0,s.useRef)(null);(0,s.useEffect)(()=>(j.current&&clearTimeout(j.current),M.current&&(j.current=setTimeout(()=>{M.current&&M.current.reset()},100)),()=>{null!==j.current&&clearTimeout(j.current)}),[d]);let O=(x.top+x.bottom)/2,A=(x.left+x.right)/2;return(0,r.jsxs)("group",{children:[a&&(0,r.jsxs)(r.Fragment,{children:[Array.from({length:10},(e,t)=>{var i;if(0===t||9===t)return null;let a=+Math.round(x.left/1)+(Math.round(x.right/1)-Math.round(x.left/1))*(t/9),l=a/m/(k.right-k.left)+.5;return(0,r.jsxs)(s.Fragment,{children:[(0,r.jsx)("group",{position:[a,O,0],children:(0,r.jsxs)("line",{children:[(0,r.jsx)("bufferGeometry",{children:(0,r.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([0,x.top-O,0,0,x.bottom-O,0]),3]})}),(0,r.jsx)("lineDashedMaterial",{color:n,opacity:o,transparent:!0,dashSize:.5,gapSize:.5})]},"vgrid-".concat(t))}),(0,r.jsxs)("group",{position:[a,x.top,0],children:[(0,r.jsxs)("line",{children:[(0,r.jsx)("bufferGeometry",{children:(0,r.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([0,0,0,0,-P.tickSize,0]),3]})}),(0,r.jsx)("lineBasicMaterial",{color:n})]}),0!==t&&9!==t&&(0,r.jsx)(V.E,{position:[0,P.tickSize/4-P.labelOffset,0],fontSize:P.fontSize/D**2,color:n,anchorX:"center",anchorY:"top",children:null!=(i=null==_?void 0:_[Math.round(l*w-.5)])?i:""})]},"top-tick-".concat(t))]},"vert-group-".concat(t))}),Array.from({length:8},(e,t)=>{if(0===t||7===t)return null;let i=x.bottom+(x.top-x.bottom)*(t/7),a=i/c/(x.top-x.bottom)/D+.5;return(0,r.jsxs)(s.Fragment,{children:[(0,r.jsx)("group",{position:[A,i,0],children:(0,r.jsxs)("line",{children:[(0,r.jsx)("bufferGeometry",{children:(0,r.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([x.left-A,0,0,x.right-A,0,0]),3]})}),(0,r.jsx)("lineDashedMaterial",{color:n,opacity:o,transparent:!0,dashSize:0,gapSize:.5,linewidth:1})]})},"hgrid-".concat(t)),(0,r.jsxs)("group",{position:[x.right,i,0],children:[(0,r.jsxs)("line",{children:[(0,r.jsx)("bufferGeometry",{children:(0,r.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([0,0,0,-P.tickSize,0,0]),3]})}),(0,r.jsx)("lineBasicMaterial",{color:n})]}),0!==t&&7!==t&&(0,r.jsx)(V.E,{position:[-P.tickSize-P.labelOffset,0,0],fontSize:P.fontSize/D**2,color:n,anchorX:"right",anchorY:"middle",children:(y.minVal+a*b).toFixed(1)})]},"right-tick-".concat(t))]},"vert-group-".concat(t))})]}),(0,r.jsx)(U.N,{ref:M,enableRotate:!1,enablePan:!0,enableZoom:!0,zoomSpeed:.85,maxDistance:500,maxZoom:20,minZoom:.5})]})}var G=t(7410);t(601);let T=e=>{let{loc:n,show:t,info:i}=e,{dimNames:a,dimUnits:o}=(0,l.on)((0,u.k)(e=>({dimNames:e.dimNames,dimUnits:e.dimUnits}))),d=(0,l.r2)(e=>e.axis),c=(0,s.useMemo)(()=>a.length<3?[a[0],a[1]]:a.filter((e,n)=>n!=d),[a,d]),m=(0,s.useMemo)(()=>a.length<3?[o[0],o[1]]:o.filter((e,n)=>n!=d),[o,d]);return(0,r.jsxs)("div",{className:"analysis-overlay",style:{left:"".concat(n[0]+10,"px"),top:"".concat(n[1]+10,"px"),display:t?"":"none"},children:["".concat(c[0],": ").concat(t&&(0,f.parseLoc)(i[0],m[0])),(0,r.jsx)("br",{}),"".concat(c[1],": ").concat(t&&(0,f.parseLoc)(i[1],m[1])),(0,r.jsx)("br",{}),"Value: ".concat(Math.round(100*i[2])/100)]})};var F=t(1822);let W={Mean:"\n    struct Params {\n        zStride: u32,\n        yStride: u32,\n        xStride: u32,\n        xSize: u32,\n        ySize: u32,\n        reduceDim: u32,\n        dimLength: u32,\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f32>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let reduceDim = params.reduceDim;\n        let dimLength = params.dimLength;\n                        \n        let outX = global_id.y;\n        let outY = global_id.x;\n        \n        if (outX >= xSize || outY >= ySize) {\n            return;\n        }\n        \n        var sum: f32 = 0.0;\n        \n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                sum += inputData[inputIndex];\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                sum += inputData[inputIndex];\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                sum += inputData[inputIndex];\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = sum / f32(dimLength);\n    }\n",Min:"\n    struct Params {\n        zStride: u32,\n        yStride: u32,\n        xStride: u32,\n        xSize: u32,\n        ySize: u32,\n        reduceDim: u32,\n        dimLength: u32,\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f32>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let reduceDim = params.reduceDim;\n        let dimLength = params.dimLength;\n                        \n        let outX = global_id.y;\n        let outY = global_id.x;\n        \n        if (outX >= xSize || outY >= ySize) {\n            return;\n        }\n        \n        var min: f32 = 1e12;\n        \n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let newMin = inputData[inputIndex];\n                if (newMin < min) {\n                    min = newMin;\n                }\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let newMin = inputData[inputIndex];\n                if (newMin < min) {\n                    min = newMin;\n                }\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let newMin = inputData[inputIndex];\n                if (newMin < min) {\n                    min = newMin;\n                }\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = min;\n    }\n",Max:"\n    struct Params {\n        zStride: u32,\n        yStride: u32,\n        xStride: u32,\n        xSize: u32,\n        ySize: u32,\n        reduceDim: u32,\n        dimLength: u32,\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f32>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let reduceDim = params.reduceDim;\n        let dimLength = params.dimLength;\n                        \n        let outX = global_id.y;\n        let outY = global_id.x;\n        \n        if (outX >= xSize || outY >= ySize) {\n            return;\n        }\n        \n        var max: f32 = -1e12;\n        \n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let newMax = inputData[inputIndex];\n                if (newMax > max) {\n                    max = newMax;\n                }\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let newMax = inputData[inputIndex];\n                if (newMax > max) {\n                    max = newMax;\n                }\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let newMax = inputData[inputIndex];\n                if (newMax > max) {\n                    max = newMax;\n                }\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = max;\n    }\n",StDev:"\n    struct Params {\n        zStride: u32,\n        yStride: u32,\n        xStride: u32,\n        xSize: u32,\n        ySize: u32,\n        reduceDim: u32,\n        dimLength: u32,\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f32>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let reduceDim = params.reduceDim;\n        let dimLength = params.dimLength;\n                        \n        let outX = global_id.y;\n        let outY = global_id.x;\n        \n        if (outX >= xSize || outY >= ySize) {\n            return;\n        }\n\n        var sum: f32 = 0.0;\n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                sum += inputData[inputIndex];\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                sum += inputData[inputIndex];\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                sum += inputData[inputIndex];\n            }\n        }\n        \n        let mean: f32 = sum / f32(dimLength);\n\n        var squaredDiffSum: f32 = 0.0;\n\n        // Iterate along the dimension again\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let diff: f32 = mean - inputData[inputIndex];\n                squaredDiffSum += diff*diff;\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let diff: f32 = mean - inputData[inputIndex];\n                squaredDiffSum += diff*diff;\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let diff: f32 = mean - inputData[inputIndex];\n                squaredDiffSum += diff*diff;\n            }\n        }\n\n        let stDev: f32 = sqrt(squaredDiffSum / f32(dimLength));\n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = stDev;\n    }\n"},E={Mean:"\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        zStride: u32,\n        xSize: u32,\n        ySize: u32,\n        zSize: u32,\n        workGroups: vec3<u32>,\n        kernelSize: u32,\n        kernelDepth: u32\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f32>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(4, 4, 4)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride; \n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let zSize = params.zSize; \n        let workGroups = params.workGroups;\n        let kernelSize = params.kernelSize;\n        let kernelDepth = params.kernelDepth;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n        let outZ = global_id.z; \n\n        if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n            return;\n        }\n\n        let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n        let globalIdx = global_id.z * total_threads_per_slice + \n                        global_id.y * (workGroups.x * 4) + \n                        global_id.x;\n\n        let xy_radius: i32 = i32(kernelSize/2u);\n        let z_radius: i32 = i32(kernelDepth/2u);\n\n        var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n        var zOffset: i32 = 0;\n        if (xy_radius == 0){\n            xyOffset = -1;\n        }\n        if (z_radius == 0){\n            zOffset = -1;\n        }\n\n        var sum: f32 = 0.0;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                        sum += inputData[u32(newIdx)];\n                        count ++;\n                    }\n                }\n            }\n        }\n        \n        outputData[globalIdx] = sum / f32(count);\n    }\n",Min:"\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        zStride: u32,\n        xSize: u32,\n        ySize: u32,\n        zSize: u32,\n        workGroups: vec3<u32>,\n        kernelSize: u32,\n        kernelDepth: u32\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f32>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(4, 4, 4)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride; \n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let zSize = params.zSize; \n        let workGroups = params.workGroups;\n        let kernelSize = params.kernelSize;\n        let kernelDepth = params.kernelDepth;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n        let outZ = global_id.z; \n\n        if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n            return;\n        }\n\n        let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n        let globalIdx = global_id.z * total_threads_per_slice + \n                        global_id.y * (workGroups.x * 4) + \n                        global_id.x;\n\n        let xy_radius: i32 = i32(kernelSize/2u);\n        let z_radius: i32 = i32(kernelDepth/2u);\n        var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n        var zOffset: i32 = 0;\n        if (xy_radius == 0){\n            xyOffset = -1;\n        }\n        if (z_radius == 0){\n            zOffset = -1;\n        }\n\n\n        var minVal: f32 = 1e12;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                        let sampledVal = inputData[u32(newIdx)];\n                        if (sampledVal < minVal){\n                            minVal = sampledVal;\n                        }\n                    }\n                }\n            }\n        }\n        \n        outputData[globalIdx] = minVal;\n    }\n",Max:"\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        zStride: u32,\n        xSize: u32,\n        ySize: u32,\n        zSize: u32,\n        workGroups: vec3<u32>,\n        kernelSize: u32,\n        kernelDepth: u32\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f32>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(4, 4, 4)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride; \n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let zSize = params.zSize; \n        let workGroups = params.workGroups;\n        let kernelSize = params.kernelSize;\n        let kernelDepth = params.kernelDepth;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n        let outZ = global_id.z; \n\n        if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n            return;\n        }\n\n        let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n        let globalIdx = global_id.z * total_threads_per_slice + \n                        global_id.y * (workGroups.x * 4) + \n                        global_id.x;\n\n        let xy_radius: i32 = i32(kernelSize/2u);\n        let z_radius: i32 = i32(kernelDepth/2u);\n        var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n        var zOffset: i32 = 0;\n        if (xy_radius == 0){\n            xyOffset = -1;\n        }\n        if (z_radius == 0){\n            zOffset = -1;\n        }\n\n        var maxVal: f32 = -1e12;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                        let sampledVal = inputData[u32(newIdx)];\n                        if (sampledVal > maxVal){\n                            maxVal = sampledVal;\n                        }\n                    }\n                }\n            }\n        }\n        \n        outputData[globalIdx] = maxVal;\n    }\n",StDev:"\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        zStride: u32,\n        xSize: u32,\n        ySize: u32,\n        zSize: u32,\n        workGroups: vec3<u32>,\n        kernelSize: u32,\n        kernelDepth: u32\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f32>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(4, 4, 4)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride; \n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let zSize = params.zSize; \n        let workGroups = params.workGroups;\n        let kernelSize = params.kernelSize;\n        let kernelDepth = params.kernelDepth;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n        let outZ = global_id.z; \n\n        if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n            return;\n        }\n\n        let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n        let globalIdx = global_id.z * total_threads_per_slice + \n                        global_id.y * (workGroups.x * 4) + \n                        global_id.x;\n\n        let xy_radius: i32 = i32(kernelSize/2u);\n        let z_radius: i32 = i32(kernelDepth/2u);\n        var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n        var zOffset: i32 = 0;\n        if (xy_radius == 0){\n            xyOffset = -1;\n        }\n        if (z_radius == 0){\n            zOffset = -1;\n        }\n\n        var sum: f32 = 0.0;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                        sum += inputData[u32(newIdx)];\n                        count ++;\n                    }\n                }\n            }\n        }\n        \n        let mean: f32 = sum / f32(count);\n\n        var squaredDiffSum: f32 = 0.0;\n\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                        let diff: f32 = mean - inputData[u32(newIdx)];\n                        squaredDiffSum += diff*diff;\n                    }\n                }\n            }\n        }\n\n        let stDev: f32 = sqrt(squaredDiffSum / f32(count));\n\n        outputData[globalIdx] = stDev;\n    }\n"};async function N(e,n,t,r){var i;let a=await (null==(i=navigator.gpu)?void 0:i.requestAdapter()),o=await (null==a?void 0:a.requestDevice());if(!o)return void Error("need a browser that supports WebGPU");let{strides:s,shape:l}=n,[u,d,c]=s,m=l.filter((e,n)=>n!=t),f=l[t],p=m[0]*m[1],x=m.map(e=>Math.ceil(e/16)),v=W[r],h=o.createShaderModule({label:"reduction compute module",code:v}),g=o.createComputePipeline({label:"reduction compute pipeline",layout:"auto",compute:{module:h}}),S=(0,F.Wu)(v),y=(0,F.FE)(S.uniforms.params);y.set({zStride:u,yStride:d,xStride:c,xSize:m[1],ySize:m[0],reduceDim:t,dimLength:f});let z=o.createBuffer({label:"Input Buffer",size:e.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),w=o.createBuffer({label:"Output Buffer",size:4*p,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),b=o.createBuffer({size:y.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),_=o.createBuffer({label:"Output Buffer",size:4*p,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});o.queue.writeBuffer(z,0,e),o.queue.writeBuffer(b,0,y.arrayBuffer);let k=o.createBindGroup({layout:g.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:z}},{binding:1,resource:{buffer:w}},{binding:2,resource:{buffer:b}}]}),D=o.createCommandEncoder({label:"reduction encoder"}),C=D.beginComputePass({label:"reduction compute pass"});C.setPipeline(g),C.setBindGroup(0,k),C.dispatchWorkgroups(x[0],x[1]),C.end(),D.copyBufferToBuffer(w,0,_,0,4*p),o.queue.submit([D.finish()]),await _.mapAsync(GPUMapMode.READ);let P=new Float32Array(_.getMappedRange().slice());return _.unmap(),P}async function X(e,n,t,r){var i;let a=await (null==(i=navigator.gpu)?void 0:i.requestAdapter()),o=await (null==a?void 0:a.requestDevice({requiredLimits:{maxBufferSize:0x7a0a1efc,maxStorageBufferBindingSize:0x7a0a1efc}}));if(!o)return void Error("need a browser that supports WebGPU");let{kernelDepth:s,kernelSize:l}=r,{strides:u,shape:d}=n,c=d[0]*d[1]*d[2],[m,f,p]=u,x=d.map(e=>Math.ceil(e/4)),v=E[t],h=o.createShaderModule({label:"convolution compute module",code:v}),g=o.createComputePipeline({label:"convolution compute pipeline",layout:"auto",compute:{module:h}}),S=(0,F.Wu)(v),y=(0,F.FE)(S.uniforms.params);y.set({xStride:p,yStride:f,zStride:m,xSize:d[2],ySize:d[1],zSize:d[0],workGroups:[x[2],x[1],x[0]],kernelDepth:s,kernelSize:l});let z=o.createBuffer({label:"Input Buffer",size:e.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),w=o.createBuffer({label:"Output Buffer",size:4*c,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),b=o.createBuffer({label:"Uniform Buffer",size:y.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),_=o.createBuffer({label:"Read Buffer",size:4*c,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});o.queue.writeBuffer(z,0,e),o.queue.writeBuffer(b,0,y.arrayBuffer);let k=o.createBindGroup({layout:g.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:z}},{binding:1,resource:{buffer:w}},{binding:2,resource:{buffer:b}}]}),D=o.createCommandEncoder({label:"convolution encoder"}),C=D.beginComputePass({label:"convolution compute pass"});C.setPipeline(g),C.setBindGroup(0,k),C.dispatchWorkgroups(x[2],x[1],x[0]),C.end(),D.copyBufferToBuffer(w,0,_,0,4*c),o.queue.submit([D.finish()]),await _.mapAsync(GPUMapMode.READ);let P=new Float32Array(_.getMappedRange().slice());return _.unmap(),P}let q=e=>{let{setTexture:n}=e,{dataArray:t,strides:r,dataShape:a,valueScales:o,setIsFlat:d,setDataArray:c,setValueScales:m}=(0,l.on)((0,u.k)(e=>({dataArray:e.dataArray,strides:e.strides,dataShape:e.dataShape,valueScales:e.valueScales,setIsFlat:e.setIsFlat,setDataArray:e.setDataArray,setValueScales:e.setValueScales}))),p=(0,l.Ws)(e=>e.setPlotType),{axis:x,execute:v,operation:h,useTwo:g,variable2:S,valueScalesOrig:y,kernelSize:z,kernelDepth:w,kernelOperation:b,setValueScalesOrig:_,setAnalysisArray:k}=(0,l.r2)((0,u.k)(e=>({axis:e.axis,execute:e.execute,operation:e.operation,useTwo:e.useTwo,variable2:e.variable2,valueScalesOrig:e.valueScalesOrig,kernelSize:e.kernelSize,kernelDepth:e.kernelDepth,kernelOperation:e.kernelOperation,setValueScalesOrig:e.setValueScalesOrig,setAnalysisArray:e.setAnalysisArray})));return(0,s.useRef)(new Float32Array(1)),(0,s.useEffect)(()=>{if(!g)if("Convolution"!=h){let e=a.filter((e,n)=>n!=x);N(t,{shape:a,strides:r},x,h).then(t=>{let r,a;if(!t)return;"StDev"==h?([r,a]=(0,f.ArrayMinMax)(t),y||_(o),m({minVal:r,maxVal:a})):y?(r=y.minVal,a=y.maxVal,m(y),_(null)):(r=o.minVal,a=o.maxVal);let s=new Uint8Array(t.map(e=>(e-r)/(a-r)).map(e=>isNaN(e)?255:254*e)),l=new i.GYF(s,e[1],e[0],i.VT0,i.OUM);l.needsUpdate=!0,k(t),n(l),d(!0),p("flat")})}else X(t,{shape:a,strides:r},b,{kernelDepth:w,kernelSize:z}).then(e=>{let t,r;if(!e)return;"StDev"==b?([t,r]=(0,f.ArrayMinMax)(e),y||_(o),m({minVal:t,maxVal:r})):y?(t=y.minVal,r=y.maxVal,m(y),_(null)):(t=o.minVal,r=o.maxVal);let s=new Uint8Array(e.map(e=>(e-t)/(r-t)).map(e=>isNaN(e)?255:254*e)),l=new i.dYF(s,a[2],a[1],a[0]);l.format=i.VT0,l.minFilter=i.hxR,l.magFilter=i.hxR,l.needsUpdate=!0,k(e),n(l)})},[v]),null},Z=e=>{let{isFlat:n}=e,{resetCamera:t}=(0,l.Ws)((0,u.k)(e=>({resetCamera:e.resetCamera}))),a=(0,s.useRef)(null);return(0,s.useEffect)(()=>{if(a.current){let e,t=a.current,r=performance.now(),o=t.object.position.clone(),s=t.position0.clone(),l=t.target.clone(),u=t.target0.clone(),d=t.object.zoom,c=a=>{(0,Y.m)();let m=Math.min((a-r)/1e3,1);t.object.position.lerpVectors(o,s,m),t.target.lerpVectors(l,u,m),n&&(t.object.zoom=i.cj9.lerp(d,1e3,m),t.object.updateProjectionMatrix(),t.update()),m<1&&(e=requestAnimationFrame(c))};return e=requestAnimationFrame(c),()=>cancelAnimationFrame(e)}},[t]),(0,r.jsxs)(r.Fragment,{children:[n&&(0,r.jsx)(U.N,{ref:a,enableRotate:!1,enablePan:!0,maxDistance:50,minZoom:50,maxZoom:3e3}),!n&&(0,r.jsx)(U.N,{ref:a,enableRotate:!0,enablePan:!0,maxDistance:50})]})},H=e=>{let{ZarrDS:n,setShowLoading:t}=e,{setShape:a,setDataShape:o,setFlipY:d,setValueScales:c,setMetadata:f,setDimArrays:x,setDimNames:S,setDimUnits:y,setPlotOn:z}=(0,l.on)((0,u.k)(e=>({setShape:e.setShape,setDataShape:e.setDataShape,setFlipY:e.setFlipY,setValueScales:e.setValueScales,setMetadata:e.setMetadata,setDimArrays:e.setDimArrays,setDimNames:e.setDimNames,setDimUnits:e.setDimUnits,setPlotOn:e.setPlotOn}))),{colormap:w,variable:b,isFlat:_,metadata:k,valueScales:D,setIsFlat:C,setDataArray:P}=(0,l.on)((0,u.k)(e=>({colormap:e.colormap,variable:e.variable,isFlat:e.isFlat,metadata:e.metadata,valueScales:e.valueScales,setIsFlat:e.setIsFlat,setDataArray:e.setDataArray}))),{plotType:j}=(0,l.Ws)((0,u.k)(e=>({plotType:e.plotType}))),M=(0,l.SZ)(e=>e.slice),O=(0,s.useRef)([0,0]),A=(0,s.useRef)(0),[B,I]=(0,s.useState)(!1),[L,V]=(0,s.useState)([0,0]),[U,Y]=(0,s.useState)(null),[R,F]=(0,s.useState)(!0);(0,s.useEffect)(()=>{if("Default"!=b){t(!0),F(!1);try{n.GetArray(b,M).then(e=>{let[n,r]=(0,G.oW)({data:e.data,shape:e.shape});n instanceof i.GYF||n instanceof i.dYF?Y(n):(console.error("Invalid texture type returned from ArrayToTexture"),Y(null)),"object"==typeof r&&"maxVal"in r&&"minVal"in r&&c(r),2==e.shape.length?C(!0):C(!1),P(e.data);let s=e.shape[1]/e.shape[2]*2;a(new i.Pq0(2,s,2)),o(e.shape),t(!1),F(!0),z(!0)})}catch(e){t(!1);return}n.GetAttributes(b).then(e=>{f(e);let[t,r,i]=n.GetDimArrays();x(t),S(i),t.length>2?t[1][1]<t[1][0]?d(!0):d(!1):t[0][1]<t[0][0]?d(!0):d(!1);let a=[];for(let e of r)a.push(e.units);y(a)})}else f(null)},[b]);let W=(0,s.useMemo)(()=>({setLoc:V,setShowInfo:I,coords:O,val:A}),[]),E=(0,s.useMemo)(()=>g.Fp,[]);return(0,r.jsxs)("div",{className:"main-canvas",style:{width:"100vw"},children:[(0,r.jsx)(q,{setTexture:Y}),R&&(0,r.jsx)(g.PL,{units:null==k?void 0:k.units,valueScales:D}),(0,r.jsx)(E,{}),(_||"flat"==j)&&(0,r.jsx)(T,{loc:L,show:B,info:[...O.current,A.current]}),(!_&&"flat"!=j||_&&"sphere"===j)&&(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(h.Hl,{id:"main-canvas",camera:{position:_?[0,0,5]:[-4.5,3,4.5],fov:50},frameloop:"demand",children:["volume"==j&&R&&(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(m,{volTexture:U}),(0,r.jsx)(p,{ZarrDS:n})]}),"point-cloud"==j&&R&&(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(v,{textures:{texture:U,colormap:w},ZarrDS:n})}),"sphere"==j&&R&&(0,r.jsx)(K,{texture:U,ZarrDS:n}),(0,r.jsx)(Z,{isFlat:!1})]})}),(_||"flat"==j)&&(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(h.Hl,{id:"main-canvas",camera:{position:[0,0,5],zoom:1e3},orthographic:!0,frameloop:"demand",children:[(0,r.jsx)(Q,{texture:U,infoSetters:W}),(0,r.jsx)(Z,{isFlat:!0})]})})]})};function J(e){let{points:n,tsID:t,pointSetters:a,colIDX:o,scalers:d}=e,c=(0,s.useRef)(null),m=n.length,f=(0,s.useRef)(null),[p,x]=(0,s.useState)(!1),{setPointID:v,setPointLoc:h,setShowPointInfo:g}=a,[S,y]=(0,s.useState)(1),{pointColor:z,pointSize:w,useCustomPointColor:b}=(0,l.Ws)((0,u.k)(e=>({pointColor:e.pointColor,pointSize:e.linePointSize,showPoints:e.showPoints,useCustomPointColor:e.useCustomPointColor}))),{xScale:_,yScale:k}=d,[D,C,P]=(0,s.useMemo)(()=>(0,O.md)(o/10,"Paired"),[o]),j=(0,s.useMemo)(()=>new i.Gu$(w),[w]),M=(0,s.useMemo)(()=>new i.V9B({color:b?z:new i.Q1f().setRGB(D/500,C/500,P/500)}),[z,b]);return(0,s.useEffect)(()=>{if(c.current){let e=new i.B69;for(let t=0;t<m;t++){let r=n[t].toArray();e.position.set(r[0]*(_/2),r[1]*k,1),e.scale.set(w/S,w/S,w/S),e.updateMatrix(),c.current.setMatrixAt(t,e.matrix)}c.current.instanceMatrix.needsUpdate=!0}},[n,S,j,M,_,k,w]),(0,Y.D)(e=>{let{camera:n}=e;n.zoom!==S&&y(n.zoom)}),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("mesh",{position:[0,0,5],onPointerEnter:function(e){if(c.current){let n=e.instanceId,r=new i.B69,a=new i.kn4,o=new i.Pq0;n!=f.current&&f.current&&(c.current.getMatrixAt(f.current,a),o.setFromMatrixPosition(a),r.scale.set(w/S,w/S,w/S),r.position.copy(o),r.updateMatrix(),c.current.setMatrixAt(f.current,r.matrix)),f.current=n,c.current.getMatrixAt(n,a),o.setFromMatrixPosition(a),r.scale.set(3*w/S,3*w/S,3/S),r.position.copy(o),r.updateMatrix(),c.current.setMatrixAt(e.instanceId,r.matrix),c.current.instanceMatrix.needsUpdate=!0,x(e=>!e),v({[t]:e.instanceId}),h([e.clientX,e.clientY]),g(!0)}},onPointerLeave:function(e){let n=e.instanceId;if(c.current){let e=new i.B69,t=new i.kn4,r=new i.Pq0;f.current&&(c.current.getMatrixAt(n,t),r.setFromMatrixPosition(t),e.scale.set(w/S,w/S,w/S),e.position.copy(r),e.updateMatrix(),c.current.setMatrixAt(n,e.matrix),c.current.instanceMatrix.needsUpdate=!0,x(e=>!e),g(n!=f.current))}},children:(0,r.jsx)("instancedMesh",{ref:c,args:[j,M,m]})})})}let $=e=>{let{height:n,xScale:t,yScale:a,pointSetters:o}=e,{valueScales:d,timeSeries:c,colormap:m}=(0,l.on)((0,u.k)(e=>({valueScales:e.valueScales,timeSeries:e.timeSeries,colormap:e.colormap}))),{lineWidth:f,useLineColor:p,lineColor:x,showPoints:v,lineResolution:h,useCustomColor:g}=(0,l.Ws)((0,u.k)(e=>({lineWidth:e.lineWidth,linePointSize:e.linePointSize,showPoints:e.showPoints,useLineColor:e.useLineColor,lineColor:e.lineColor,lineResolution:e.lineResolution,useCustomColor:e.useCustomColor})));(0,s.useRef)([]);let{camera:S}=(0,Y.C)(),{maxVal:y,minVal:z}=d,w=(0,s.useMemo)(()=>{let e={};return Object.keys(c).reverse().map((n,r)=>{let[o,s,l]=(0,O.md)(r/10,"Paired");e[n]=new i.BKk({glslVersion:i.Wdf,uniforms:{cmap:{value:m},xScale:{value:t},yScale:{value:a},aspect:{value:window.innerWidth/window.innerHeight},thickness:{value:f},miter:{value:1},useLineColor:{value:g},useMapColors:{value:p},lineColor:{value:new i.Q1f().setRGB(o/255,s/255,l/255)},userColor:{value:new i.Q1f(x)},zoom:{value:S.zoom}},vertexShader:"attribute float direction; \nattribute vec3 next;\nattribute vec3 previous;\nattribute float normed;\n\nvarying float vNormed;\n\nuniform float zoom;\nuniform float thickness;\nuniform int miter;\nuniform float xScale; \nuniform float yScale;\n\nfloat getOrthographicZoom(mat4 projectionMatrix, float referenceWidth) {\n    float m0 = projectionMatrix[0][0]; // Scaling factor: 2/(right-left)\n    float viewWidth = 2.0 / m0; // Viewable width\n    return referenceWidth / viewWidth; // Zoom level\n}\n\nvoid main() {\n    vec3 pos = position;\n    vec3 prev = previous;\n    vec3 nex = next;\n    pos.x *= xScale/2.0;\n    pos.y *= yScale;\n    prev.x *= xScale/2.0;\n    prev.y *= yScale;\n    nex.x *= xScale/2.0;\n    nex.y *= yScale;\n\n    // Transform positions to view space (before projection)\n    float zoom = getOrthographicZoom(projectionMatrix, 2.);\n    float zoomLevel = 2. / projectionMatrix[0][0]; // Extract vertical scale\n    vec4 currentView = modelViewMatrix * vec4(pos, 1.0);\n    vec4 prevView = modelViewMatrix * vec4(prev, 1.0);\n    vec4 nextView = modelViewMatrix * vec4(nex, 1.0);\n\n    // Compute directions in view space\n    vec3 dir = vec3(0.0);\n    if (currentView.xyz == prevView.xyz) {\n        dir = normalize(nextView.xyz - currentView.xyz);\n    } else if (currentView.xyz == nextView.xyz) {\n        dir = normalize(currentView.xyz - prevView.xyz);\n    } else {\n        vec3 dirA = normalize(currentView.xyz - prevView.xyz);\n        if (miter == 1) {\n            vec3 dirB = normalize(nextView.xyz - currentView.xyz);\n            vec3 tangent = normalize(dirA + dirB);\n            vec3 perp = vec3(-dirA.y, dirA.x, 0.0); // Perpendicular in view space\n            vec3 miterVec = vec3(-tangent.y, tangent.x, 0.0);\n            float miterLen = dot(miterVec, perp);\n            miterLen = max(miterLen, 0.5); // Avoid division by zero\n            dir = tangent;\n        } else {\n            dir = dirA;\n        }\n    }\n\n    // Compute normal in view space\n    vec3 normal = vec3(-dir.y, dir.x, 0.0); // Perpendicular to direction\n    float len = thickness / zoom/500.; // Thickness in world/view space units\n    normal *= 0.5 * len * direction; // Apply thickness and direction\n\n    // Apply offset in view space\n    currentView.xyz += normal;\n\n    // Project to clip space\n    gl_Position = projectionMatrix * currentView;\n\n\n    vNormed = normed;\n    gl_PointSize = 1.0;\n}",fragmentShader:"\n                out vec4 Color;\n                uniform sampler2D cmap;\n                uniform bool useLineColor;\n                uniform bool useMapColors;\n                uniform vec3 lineColor;\n                uniform vec3 userColor;\n                varying float vNormed;\n\n                void main() {\n                    vec4 texColor = texture(cmap, vec2(vNormed, 0.1));\n                    texColor.a = 1.;\n                    Color = useLineColor ? vec4(userColor, 1.0) : useMapColors ? texColor : vec4(lineColor, 1.0) ;\n                }\n                ",depthWrite:!1})}),e},[m,f,t,a,window.innerWidth,window.innerHeight,p,x,S.zoom,g,c]),b=(0,s.useMemo)(()=>window.innerWidth,[window.innerWidth]),_=(0,s.useMemo)(()=>window.innerHeight-n,[window.innerWidth,n]),[k,D]=(0,s.useState)({}),C=(0,s.useMemo)(()=>{let e={},n={};return Object.keys(c).map((t,r)=>{let a=c[t],o=a.map(e=>(e-z)/(y-z)),s=function(e,n,t){let r=(n-e)/(t-1);return Array.from({length:t},(n,t)=>e+r*t)}(-b,b,a.length),l=o.map((e,n)=>new i.Pq0(s[n],(e-.5)*_,5));n[t]=l;let u=new i.B6O(l).getPoints(l.length*h-1),d=[];for(let e=0;e<u.length;e++){let n=e/(u.length-1)*(o.length-1),t=Math.floor(n),r=Math.min(o.length-1,Math.ceil(n)),i=n-t;d.push(o[t]*(1-i)+o[r]*i)}let m=u.length,f=[],p=[],x=[],v=[],g=[],S=[];for(let e=0;e<m;e++){let n=u[e],t=u[Math.max(0,e-1)],r=u[Math.min(m-1,e+1)];f.push(...n,...n),p.push(1,-1),x.push(...t,...t),v.push(...r,...r),g.push(d[e],d[e])}for(let e=0;e<m-1;e++){let n=2*e,t=n+1,r=n+2,i=n+3;S.push(n,t,r),S.push(t,i,r)}let w=new i.LoY;w.setAttribute("position",new i.qtW(f,3)),w.setAttribute("direction",new i.qtW(p,1)),w.setAttribute("previous",new i.qtW(x,3)),w.setAttribute("next",new i.qtW(v,3)),w.setAttribute("normed",new i.qtW(g,1)),w.setIndex(new i.A$4(S,1)),e[t]=w}),D(n),e},[c,h]);return(0,s.useEffect)(()=>{(0,Y.m)()},[v]),(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)("group",{children:[Object.keys(c).map((e,n)=>(0,r.jsx)("mesh",{geometry:C[e],material:w[e]},"lineMesh_".concat(n))),v&&Object.keys(c).map((e,n)=>(0,r.jsx)(J,{points:k[e],tsID:e,colIDX:n,pointSetters:o,scalers:{xScale:t,yScale:a}},"plotPoints_".concat(n)))]})})},Q=e=>{let{texture:n,infoSetters:t}=e,{setLoc:a,setShowInfo:o,val:d,coords:c}=t,{flipY:m,colormap:f,dataArray:p,valueScales:x,dimArrays:v,isFlat:h}=(0,l.on)((0,u.k)(e=>({flipY:e.flipY,colormap:e.colormap,dataArray:e.dataArray,valueScales:e.valueScales,dimArrays:e.dimArrays,isFlat:e.isFlat}))),{cScale:g,cOffset:S,animProg:y}=(0,l.Ws)((0,u.k)(e=>({cOffset:e.cOffset,cScale:e.cScale,resetAnim:e.resetAnim,animate:e.animate,animProg:e.animProg}))),{axis:z,analysisMode:w,analysisArray:b}=(0,l.r2)((0,u.k)(e=>({axis:e.axis,analysisMode:e.analysisMode,analysisArray:e.analysisArray}))),_=n.source.data,k=(0,s.useMemo)(()=>_.height/_.width,[_]),D=(0,s.useMemo)(()=>new i.bdM(2,2*k),[k]),C=(0,s.useRef)(!1),P=(0,s.useRef)(new i.I9Y(0,0)),j=w&&2==z,M=(0,s.useMemo)(()=>w?b:p,[w,p,b]),O=(0,s.useMemo)(()=>v.filter((e,n)=>n!=z),[v,z]),A=(0,s.useMemo)(()=>new i.BKk({glslVersion:i.Wdf,uniforms:{cScale:{value:g},cOffset:{value:S},data:{value:n},cmap:{value:f},animateProg:{value:y}},vertexShader:" // by Jeran Poehls\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}",fragmentShader:h?"uniform sampler2D data;\r\nuniform sampler2D cmap;\r\n\r\nuniform float cOffset;\r\nuniform float cScale;\r\n\r\nvarying vec2 vUv;\r\nout vec4 Color;\r\n\r\nvoid main() {\r\n    vec4 val = texture(data,vUv);\r\n    float d = val.x;\r\n    float sampLoc = d == 1. ? d : (d - 0.5)*cScale + 0.5;\r\n    sampLoc = d == 1. ? d : min(sampLoc+cOffset,0.99);\r\n    vec4 color = texture(cmap, vec2(sampLoc,0.5));\r\n    color.a = val.x > 0.999 ? 0. : 1.;\r\n\r\n    Color = color;\r\n}":"uniform sampler3D data;\r\nuniform sampler2D cmap;\r\n\r\nuniform float cOffset;\r\nuniform float cScale;\r\nuniform float animateProg;\r\n\r\nvarying vec2 vUv;\r\nout vec4 Color;\r\n\r\nvoid main() {\r\n    vec4 val = texture(data,vec3(vUv, animateProg));\r\n    float d = val.x;\r\n    float sampLoc = d == 1. ? d : (d - 0.5)*cScale + 0.5;\r\n    sampLoc = d == 1. ? d : min(sampLoc+cOffset,0.99);\r\n    vec4 color = texture(cmap, vec2(sampLoc,0.5));\r\n    color.a = val.x > 0.999 ? 0. : 1.;\r\n\r\n    Color = color;\r\n}",side:i.$EB}),[g,S,n,f,y]);(0,s.useEffect)(()=>{D.dispose()},[D]);let B=(0,s.useRef)(null),I=(0,s.useCallback)(e=>{if(C.current&&e.uv){B.current=e,a([e.clientX,e.clientY]),P.current=e.uv;let{x:n,y:t}=e.uv,r=h?w?O[1].length:v[1].length:v[2].length,i=h?w?O[0].length:v[0].length:v[1].length,o=Math.round(n*r-.5),s=Math.round(t*i-.5),l=r*s+o;l+=h?0:Math.round(v[0].length*y)*r*i;let u=M?M[l]:0;d.current=h&&!w?function(e,n){return e*(n.maxVal-n.minVal)+n.minVal}(u,x):u,c.current=h?w?[O[0][s],O[1][o]]:[v[0][s],v[1][o]]:[v[1][s],v[2][o]]}},[M,v,y]);return(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("mesh",{material:A,geometry:D,scale:[1,m?-1:1,1],rotation:[0,0,j?Math.PI/2:0],onPointerEnter:()=>{o(!0),C.current=!0},onPointerLeave:()=>{o(!1),C.current=!1},onPointerMove:I})})},K=e=>{let{texture:n,ZarrDS:t}=e,{colormap:a,flipY:o,isFlat:d}=(0,l.on)((0,u.k)(e=>({colormap:e.colormap,flipY:e.flipY,isFlat:e.isFlat}))),{setPlotDim:m,updateDimCoords:p,updateTimeSeries:x}=(0,l.on)((0,u.k)(e=>({setPlotDim:e.setPlotDim,updateDimCoords:e.updateDimCoords,updateTimeSeries:e.updateTimeSeries}))),{dimArrays:v,dimNames:h,dimUnits:g}=(0,l.on)((0,u.k)(e=>({shape:e.shape,dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits}))),{animate:S,animProg:y,cOffset:z,cScale:w,selectTS:b}=(0,l.Ws)((0,u.k)(e=>({animate:e.animate,animProg:e.animProg,cOffset:e.cOffset,cScale:e.cScale,selectTS:e.selectTS}))),[_,k]=(0,s.useState)(Array(10).fill(new i.IUQ(-1,-1,-1,-1))),{height:D,width:C}=(0,s.useMemo)(()=>null==n?void 0:n.source.data,[n]),P=(0,s.useMemo)(()=>new i.WBB(1,9),[]),j=(0,s.useMemo)(()=>new i.BKk({glslVersion:i.Wdf,uniforms:{map:{value:n},selectTS:{value:b},selectBounds:{value:_},cmap:{value:a},cOffset:{value:z},cScale:{value:w},animateProg:{value:y}},vertexShader:c,fragmentShader:d?" // by Jeran Poehls\nprecision highp float;\nprecision highp sampler2D;\n\nout vec4 color;\n\nin vec3 aPosition;\n\nuniform sampler2D map;\nuniform sampler2D cmap;\n\nuniform float cOffset;\nuniform float cScale;\nuniform float animateProg;\nuniform bool selectTS;\n\n#define pi 3.141592653\n\nvec2 giveUV(vec3 position){\n    vec3 n = normalize(position);\n    float latitude = asin(n.y);\n    float longitude = atan(n.z, n.x);\n    vec2 uv = vec2(-longitude/(pi), latitude/(pi/2.0));\n    uv /= 2.;\n    uv += 0.5;\n    return uv;\n}\n\n\nvoid main(){\n    vec2 sampleCoord = giveUV(aPosition);\n    float strength = texture(map, sampleCoord).r;\n    strength = strength == 1. ? strength : (strength - 0.5)*cScale + 0.5;\n    strength = strength == 1. ? strength : min(strength+cOffset,0.99);\n    color = texture(cmap, vec2(strength, 0.5));\n    color.a = 1.;\n    // color = vec4(sampleCoord, 0., 1.0);\n\n}":" // by Jeran Poehls\nprecision highp float;\nprecision highp sampler3D;\n\nout vec4 color;\n\nin vec3 aPosition;\n\nuniform sampler3D map;\nuniform sampler2D cmap;\n\nuniform float cOffset;\nuniform float cScale;\nuniform float animateProg;\nuniform vec4[10] selectBounds; \nuniform bool selectTS;\n\n#define pi 3.141592653\n\nvec2 giveUV(vec3 position){\n    vec3 n = normalize(position);\n    float latitude = asin(n.y);\n    float longitude = atan(n.z, n.x);\n    vec2 uv = vec2(-longitude/(pi), latitude/(pi/2.0));\n    uv /= 2.;\n    uv += 0.5;\n    return uv;\n}\n\nbool isValid(vec2 sampleCoord){\n    for (int i = 0; i < 10; i++){\n        vec4 thisBound = selectBounds[i];\n        if (thisBound.x == -1.){\n            return false;\n        }\n        bool cond = (sampleCoord.x < thisBound.r || sampleCoord.x > thisBound.g || sampleCoord.y < thisBound.b ||  sampleCoord.y > thisBound.a);\n        if (!cond){\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid main(){\n    vec2 sampleCoord = giveUV(aPosition);\n    float strength = texture(map, vec3(sampleCoord, animateProg)).r;\n    strength = strength == 1. ? strength : (strength - 0.5)*cScale + 0.5;\n    strength = strength == 1. ? strength : min(strength+cOffset,0.99);\n    color = texture(cmap, vec2(strength, 0.5));\n    bool cond = isValid(sampleCoord);\n    if (!cond && selectTS){\n        color.rgb *= 0.65;\n    }\n    color.a = 1.;\n    // color = vec4(sampleCoord, 0., 1.0);\n\n}",blending:i.NTi}),[n,y,a,z,w,S,_,b]);return(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("mesh",{geometry:P,material:j,scale:[1,o?-1:1,1],onClick:e=>b&&function(e){let r=function(e,n,t){let r=Math.atan2(e.z,e.x),a=Math.asin(e.y),o=(r+Math.PI)/(2*Math.PI),s=(a+Math.PI/2)/Math.PI;return o=Math.round((o=1-o)*n-.5)/n,s=Math.round(s*t-.5)/t,new i.I9Y(o,s)}(e.point.normalize(),null==n?void 0:n.source.data.width,null==n?void 0:n.source.data.height),a=new i.Pq0(0,0,1);if(t){var s,l;let e=t.GetTimeSeries({uv:r,normal:a}),n=a.toArray().map((e,n)=>Math.abs(e)>0?n:null).filter(e=>null!==e);m(2-n[0]);let i=(0,f.parseUVCoords)({normal:a,uv:r}).map((e,n)=>e?v[n][Math.round(e*v[n].length)]:null),o=h.filter((e,n)=>null!==i[n]),u=g.filter((e,n)=>null!==i[n]);i=i.filter(e=>null!==e);let d="".concat(i[0],"_").concat(i[1]);x({[d]:e}),p({[d]:{first:{name:o[0],loc:null!=(s=i[0])?s:0,units:u[0]},second:{name:o[1],loc:null!=(l=i[1])?l:0,units:u[1]},plot:{units:g[2-n[0]]}}})}!function(e){let n=Math.round(e.x*C)+.5,t=o?Math.round((1-e.y)*D)-.5:Math.round(e.y*D)+.5,r=1/C,a=1/D,s=new i.IUQ(...[n/C-r/2,n/C+r/2],...[t/D-a/2,t/D+a/2]);k(e=>[s,...e].slice(0,10))}(r)}(e)})})};i.l2R.enabled=!0;let ee=function(){let{initStore:e,setZMeta:n}=(0,l.on)((0,u.k)(e=>({initStore:e.initStore,setZMeta:e.setZMeta}))),{currentStore:t,setCurrentStore:i}=(0,l.SZ)((0,u.k)(e=>({currentStore:e.currentStore,setCurrentStore:e.setCurrentStore})));(0,s.useEffect)(()=>{i((0,o.Oe)(e))},[e]);let c=(0,s.useMemo)(()=>new o.Y5(t),[t]),[m,f]=(0,s.useState)({});(0,s.useEffect)(()=>{let e=!0;(0,a.tz)(t).then(n=>{e&&f(n)});let r=(0,a.Tk)(t),i=(0,a.Bi)(r);return r.then(e=>n(e)),i.then(e=>{p(e)}),()=>{e=!1}},[t]);let{setVariables:p,setPlotOn:x,timeSeries:v,variable:h,metadata:S,plotOn:y}=(0,l.on)((0,u.k)(e=>({setVariables:e.setVariables,setPlotOn:e.setPlotOn,timeSeries:e.timeSeries,variable:e.variable,metadata:e.metadata,plotOn:e.plotOn}))),[z,w]=(0,s.useState)(!1),[b,_]=(0,s.useState)(window.innerWidth);return(0,s.useEffect)(()=>{let e=()=>_(window.innerWidth);return window.addEventListener("resize",e),()=>window.removeEventListener("resize",e)},[]),(0,s.useEffect)(()=>{"Default"===h&&x(!1)},[h]),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(g.oU,{}),(0,r.jsx)(g.$D,{}),!y&&(0,r.jsx)(g.Fp,{}),(0,r.jsx)(g.Rh,{showLoading:z}),"Default"===h&&(0,r.jsx)(d,{}),"Default"!=h&&(0,r.jsx)(H,{ZarrDS:c,setShowLoading:w}),S&&(0,r.jsx)(g.OS,{data:S}),Object.keys(v).length>=1&&(0,r.jsx)(L,{})]})}},601:()=>{},4435:()=>{},6720:()=>{},7619:()=>{},8968:(e,n,t)=>{Promise.resolve().then(t.bind(t,66))}},e=>{e.O(0,[546,826,989,197,669,813,755,858,56,667,645,451,812,152,195,100,970,800,984,65,541,707,496,540,240,358],()=>e(e.s=8968)),_N_E=e.O()}]);