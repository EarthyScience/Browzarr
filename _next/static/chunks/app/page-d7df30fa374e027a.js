(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[974],{596:()=>{},1894:(e,n,t)=>{Promise.resolve().then(t.bind(t,9245))},6469:()=>{},9245:(e,n,t)=>{"use strict";t.d(n,{default:()=>nS});var r={};t.r(r),t.d(r,{CUMSUM3D:()=>ex,CUMSUMReduction:()=>$,Correlation2D:()=>ep,CorrelationConvolution:()=>ef,CovarianceConvolution:()=>ec,CovarianceReduction:()=>ee,LinearSlopeReduction:()=>J,MaxConvolution:()=>ea,MaxConvolution2D:()=>es,MaxReduction:()=>H,MeanConvolution:()=>er,MeanConvolution2D:()=>el,MeanReduction:()=>Z,MinConvolution:()=>ei,MinConvolution2D:()=>eu,MinReduction:()=>W,StDevConvolution:()=>eo,StDevConvolution2D:()=>ed,StDevReduction:()=>Q,TwoVarLinearSlopeConvolution:()=>em,TwoVarLinearSlopeReduction:()=>K});var i={};t.r(i),t.d(i,{CUMSUM3D:()=>eU,CUMSUMReduction:()=>eh,Correlation2D:()=>eV,CorrelationConvolution:()=>eA,CovarianceConvolution:()=>eL,CovarianceReduction:()=>ew,LinearSlopeReduction:()=>eb,MaxConvolution:()=>eM,MaxConvolution2D:()=>eB,MaxReduction:()=>ev,MeanConvolution:()=>eI,MeanConvolution2D:()=>eP,MeanReduction:()=>eS,MinConvolution:()=>eC,MinConvolution2D:()=>eY,MinReduction:()=>eg,StDevConvolution:()=>eO,StDevConvolution2D:()=>ej,StDevReduction:()=>ez,TwoVarLinearSlopeConvolution:()=>eX,TwoVarLinearSlopeReduction:()=>e_});var a=t(9564),o=t(7510),l=t(1197),u=t(6431),s=t(9901),d=t(7776);let f=" // by Jeran Poehls\r\n\r\nout vec3 vOrigin;\r\nout vec3 vDirection;\r\nout vec3 aPosition;\r\n\r\nout vec2 Vuv;\r\n\r\nvoid main() {\r\n    vec4 worldPos = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n    aPosition = position; //Pass out position for sphere frag\r\n    vOrigin = vec3( inverse( modelMatrix ) * vec4( cameraPosition, 1.0 ) ).xyz;\r\n    vDirection = position - vOrigin;\r\n    Vuv = uv;\r\n    gl_Position = projectionMatrix * worldPos;\r\n}";var c=t(4155),m=t(2911);let x=e=>{let{volTexture:n}=e,{shape:t,colormap:r,flipY:i}=(0,c.on)((0,m.k)(e=>({shape:e.shape,colormap:e.colormap,flipY:e.flipY}))),{valueRange:l,xRange:u,yRange:s,zRange:x,quality:p,animProg:y,cScale:S,cOffset:g,useFragOpt:v,transparency:z,nanTransparency:h,nanColor:b}=(0,c.Ws)((0,m.k)(e=>({valueRange:e.valueRange,xRange:e.xRange,yRange:e.yRange,zRange:e.zRange,quality:e.quality,animProg:e.animProg,cScale:e.cScale,cOffset:e.cOffset,useFragOpt:e.useFragOpt,transparency:e.transparency,nanTransparency:e.nanTransparency,nanColor:e.nanColor}))),_=t.y/t.x,w=(0,d.useMemo)(()=>new o.BKk({glslVersion:o.Wdf,uniforms:{map:{value:n},cmap:{value:r},cOffset:{value:g},cScale:{value:S},threshold:{value:new o.I9Y(l[0],l[1])},scale:{value:t},flatBounds:{value:new o.IUQ(-u[1],-u[0],x[0],x[1])},vertBounds:{value:new o.I9Y(s[0]*_,s[1]*_)},steps:{value:p},animateProg:{value:y},transparency:{value:z},nanAlpha:{value:1-h},nanColor:{value:new o.Q1f(b)}},vertexShader:f,fragmentShader:v?"// This is an optimized version of the original Volumetric shader\r\n\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nin vec3 vOrigin;\r\nin vec3 vDirection;\r\n\r\nout vec4 color;\r\n\r\nuniform sampler3D map;\r\nuniform sampler2D cmap;\r\n\r\nuniform float cOffset;\r\nuniform float cScale;\r\nuniform vec3 scale;\r\nuniform vec2 threshold;\r\nuniform float steps;\r\nuniform vec4 flatBounds;\r\nuniform vec2 vertBounds;\r\nuniform float animateProg;\r\nuniform float transparency;\r\nuniform float nanAlpha;\r\nuniform vec3 nanColor;\r\n\r\nvec2 hitBox(vec3 orig, vec3 dir) {\r\n    vec3 box_min = vec3(-(scale * 0.5));\r\n    vec3 box_max = vec3(scale * 0.5);\r\n    vec3 inv_dir = 1.0 / dir;\r\n    vec3 tmin_tmp = (box_min - orig) * inv_dir;\r\n    vec3 tmax_tmp = (box_max - orig) * inv_dir;\r\n    vec3 tmin = min(tmin_tmp, tmax_tmp);\r\n    vec3 tmax = max(tmin_tmp, tmax_tmp);\r\n    float t0 = max(tmin.x, max(tmin.y, tmin.z));\r\n    float t1 = min(tmax.x, min(tmax.y, tmax.z));\r\n    return vec2(t0, t1);\r\n}\r\n\r\nfloat sample1( vec3 p ) {\r\n    return texture( map, p ).r;\r\n}\r\n\r\n#define epsilon 0.0001\r\n\r\nvoid main() {\r\n    vec3 rayDir = normalize(vDirection);\r\n    vec2 bounds = hitBox(vOrigin, rayDir);\r\n\r\n    if (bounds.x > bounds.y) discard;\r\n\r\n    bounds.x = max(bounds.x, 0.0);\r\n\r\n    vec3 p = vOrigin + bounds.x * rayDir;\r\n    vec3 inc = 1.0 / abs(rayDir);\r\n\r\n    //Step Sizes\r\n    float fineDelta = min(inc.x, min(inc.y, inc.z)) / steps;\r\n\r\n    float coarseDelta = min(inc.x, min(inc.y, inc.z))/50.;\r\n\r\n    float delta = fineDelta;\r\n\r\n    vec4 accumColor = vec4(0.0);\r\n    float alphaAcc = 0.0;\r\n\r\n    float t = bounds.x;\r\n    int countdown = 0;\r\n    bool useCoarseStep = false;\r\n\r\n    while (t < bounds.y) {\r\n        vec3 p = vOrigin + rayDir * t;\r\n        \r\n        // --- Boundary checks ---\r\n        if (p.x < flatBounds.x || p.x > flatBounds.y ||\r\n            p.z < flatBounds.z || p.z > flatBounds.w ||\r\n            p.y < vertBounds.x || p.y > vertBounds.y) {\r\n\r\n            t += useCoarseStep ? coarseDelta : fineDelta;\r\n            continue;\r\n        }\r\n\r\n        vec3 texCoord = p / scale + 0.5;\r\n        texCoord.z = mod(texCoord.z + animateProg, 1.0001);\r\n        float d = sample1(texCoord);\r\n\r\n        bool cond = nanAlpha == 0. ? (d > threshold.x) && (d < threshold.y) : (d > threshold.x) && (d < threshold.y+.01); //We skip over nans if the transparency is enabled\r\n        \r\n        if (cond) {\r\n            // Hit something interesting - switch to fine stepping\r\n            if (useCoarseStep) {\r\n                useCoarseStep = false;\r\n                countdown = 40;\r\n                // Step back to ensure we don't miss the boundary\r\n                t -= coarseDelta;\r\n                continue;\r\n            }\r\n            if (d == 1.){\r\n                accumColor.rgb += (1.0 - alphaAcc) * pow(nanAlpha, 5.) * nanColor.rgb;\r\n                alphaAcc += pow(nanAlpha, 5.);\r\n            }\r\n            else{\r\n                float sampLoc = (d - 0.5)*cScale + 0.5;\r\n                sampLoc = min(sampLoc+cOffset,0.99);\r\n                vec4 col = texture(cmap, vec2(sampLoc, 0.5));\r\n                float alpha = pow(max(sampLoc, 0.001), transparency);\r\n                accumColor.rgb += (1.0 - alphaAcc) * alpha * col.rgb;\r\n                alphaAcc += alpha * (1.0 - alphaAcc);\r\n            }      \r\n\r\n            if (alphaAcc >= 1.0) break;\r\n            \r\n            t += fineDelta;\r\n        }\r\n        else {\r\n            // Nothing interesting here\r\n            if (countdown > 0) {\r\n                countdown--;\r\n                t += fineDelta; // Continue with fine steps while countdown > 0\r\n            } else {\r\n                useCoarseStep = true;\r\n                t += coarseDelta; // Switch to coarse steps\r\n            }\r\n        }\r\n    }\r\n    accumColor.a = alphaAcc; // Set the final accumulated alpha\r\n    color = accumColor;\r\n    if (color.a == 0.0) discard;\r\n}\r\n":"// by Jeran Poehls\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nin vec3 vOrigin;\r\nin vec3 vDirection;\r\n\r\nout vec4 color;\r\n\r\nuniform sampler3D map;\r\nuniform sampler2D cmap;\r\n\r\nuniform float cOffset;\r\nuniform float cScale;\r\nuniform vec3 scale;\r\nuniform vec2 threshold;\r\nuniform float steps;\r\nuniform vec4 flatBounds;\r\nuniform vec2 vertBounds;\r\nuniform float animateProg;\r\nuniform float transparency;\r\nuniform float nanAlpha;\r\nuniform vec3 nanColor;\r\n\r\n\r\nvec2 hitBox(vec3 orig, vec3 dir) {\r\n    vec3 box_min = vec3(-(scale * 0.5));\r\n    vec3 box_max = vec3(scale * 0.5);\r\n    vec3 inv_dir = 1.0 / dir;\r\n    vec3 tmin_tmp = (box_min - orig) * inv_dir;\r\n    vec3 tmax_tmp = (box_max - orig) * inv_dir;\r\n    vec3 tmin = min(tmin_tmp, tmax_tmp);\r\n    vec3 tmax = max(tmin_tmp, tmax_tmp);\r\n    float t0 = max(tmin.x, max(tmin.y, tmin.z));\r\n    float t1 = min(tmax.x, min(tmax.y, tmax.z));\r\n    return vec2(t0, t1);\r\n}\r\n\r\nfloat sample1( vec3 p ) {\r\n    return texture( map, p ).r;\r\n}\r\n\r\n#define epsilon 0.0001\r\n\r\nvoid main() {\r\n    vec3 rayDir = normalize(vDirection);\r\n    vec2 bounds = hitBox(vOrigin, rayDir);\r\n\r\n    if (bounds.x > bounds.y) discard;\r\n\r\n    bounds.x = max(bounds.x, 0.0);\r\n\r\n    vec3 p = vOrigin + bounds.x * rayDir;\r\n    vec3 inc = 1.0 / abs(rayDir);\r\n    float delta = min(inc.x, min(inc.y, inc.z));\r\n    delta /= steps;\r\n    vec4 accumColor = vec4(0.0);\r\n    float alphaAcc = 0.0;\r\n\r\n    for (float t = bounds.x; t < bounds.y; t += delta) {\r\n        p = vOrigin + rayDir * t;\r\n        if (p.x > -flatBounds.x || p.x < -flatBounds.y) { \r\n            continue;\r\n        }\r\n        if (-p.z > -flatBounds.z || -p.z < -flatBounds.w) {\r\n            continue;\r\n        }\r\n        if (p.y < vertBounds.x || p.y > vertBounds.y) {\r\n            continue;\r\n        }\r\n\r\n        vec3 texCoord = p / scale + 0.5;\r\n        texCoord.z = mod(texCoord.z + animateProg, 1.0001);\r\n        float d = sample1(texCoord);\r\n\r\n        bool cond = nanAlpha == 0. ? (d >= threshold.x) && (d <= threshold.y) : (d >= threshold.x) && (d <= threshold.y); //We skip over nans if the transparency is enabled\r\n        \r\n        if (cond) {\r\n            if (d == 1.){\r\n                accumColor.rgb += (1.0 - alphaAcc) * pow(nanAlpha, 5.) * nanColor.rgb;\r\n                alphaAcc += pow(nanAlpha, 5.);\r\n            }\r\n            else{\r\n                float sampLoc = (d - 0.5)*cScale + 0.5;\r\n                sampLoc = min(sampLoc+cOffset,0.99);\r\n                vec4 col = texture(cmap, vec2(sampLoc, 0.5));\r\n                float alpha = pow(max(sampLoc, 0.001), transparency);\r\n                accumColor.rgb += (1.0 - alphaAcc) * alpha * col.rgb;\r\n                alphaAcc += alpha * (1.0 - alphaAcc);\r\n            }      \r\n\r\n            if (alphaAcc >= 1.0) break;\r\n        }\r\n    }\r\n\r\n    accumColor.a = alphaAcc; // Set the final accumulated alpha\r\n    color = accumColor;\r\n    if (color.a == 0.0) discard;\r\n}\r\n",transparent:!0,blending:o.NTi,depthWrite:!1,side:o.hsX}),[n,t,r,g,S,l,u,s,x,p,y,v,z,h,b]),k=(0,d.useMemo)(()=>new o.WBB(2,4),[]);return(0,d.useEffect)(()=>()=>{k.dispose()},[]),(0,a.jsx)(a.Fragment,{children:(0,a.jsx)("mesh",{geometry:k,scale:[1,i?-1:1,1],children:(0,a.jsx)("primitive",{attach:"material",object:w})})})};var p=t(8804),y=t(1252);let S=e=>{let{ZarrDS:n}=e,{setTimeSeries:t,setPlotDim:r,setDimCoords:i,updateTimeSeries:l,updateDimCoords:u}=(0,c.on)((0,m.k)(e=>({setTimeSeries:e.setTimeSeries,setPlotDim:e.setPlotDim,setDimCoords:e.setDimCoords,updateTimeSeries:e.updateTimeSeries,updateDimCoords:e.updateDimCoords}))),{analysisMode:s,analysisArray:f}=(0,c.r2)((0,m.k)(e=>({analysisMode:e.analysisMode,analysisArray:e.analysisArray}))),{shape:x,dataShape:S,strides:g,dimArrays:v,dimNames:z,dimUnits:h}=(0,c.on)((0,m.k)(e=>({shape:e.shape,dataShape:e.dataShape,strides:e.strides,dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits}))),{selectTS:b,getColorIdx:_,incrementColorIdx:w}=(0,c.Ws)((0,m.k)(e=>({selectTS:e.selectTS,getColorIdx:e.getColorIdx,incrementColorIdx:e.incrementColorIdx}))),k=(0,d.useRef)(0),D=(0,d.useMemo)(()=>new o.iNn(1,1,1),[]);return(0,d.useEffect)(()=>()=>{D.dispose()},[]),(0,a.jsx)(a.Fragment,{children:(0,a.jsx)("mesh",{geometry:D,scale:x,onClick:e=>{e.stopPropagation(),e.intersections.length>0&&b&&function(e){e.point;let a=e.uv,o=e.normal,d=(0,p._8)(o);if(d!=k.current&&(t({}),i({})),k.current=d,n){var c,m;let e=(0,p.PE)({data:s?f:(0,p.Td)(),shape:S,stride:g},{uv:a,normal:o}),n=o.toArray().map((e,n)=>Math.abs(e)>0?n:null).filter(e=>null!==e);r(2-n[0]);let t=(0,p.jT)({normal:o,uv:a}).map((e,n)=>e?v[n][Math.round(e*v[n].length)]:null),i=z.filter((e,n)=>null!==t[n]),d=h.filter((e,n)=>null!==t[n]);t=t.filter(e=>null!==e);let x="".concat(t[0],"_").concat(t[1]);l({[x]:{color:(0,y.md)(_()/10,"Paired"),data:e}}),w(),u({[x]:{first:{name:i[0],loc:null!=(c=t[0])?c:0,units:d[0]},second:{name:i[1],loc:null!=(m=t[1])?m:0,units:d[1]},plot:{units:h[2-n[0]]}}})}}(e.intersections[0])},children:(0,a.jsx)("meshBasicMaterial",{transparent:!0,opacity:0})})})},g=e=>{let{dimensions:n,ZarrDS:t,setters:r}=e,{width:i,height:o,depth:l}=n,{setPoints:u,setStride:s,setDimWidth:f}=r,x=(0,c.Ws)(e=>e.selectTS),S=i/o,g=l/o,{dimArrays:v,dimUnits:z,dimNames:h,strides:b,dataShape:_,setPlotDim:w,setTimeSeries:k,updateTimeSeries:D,setDimCoords:I,updateDimCoords:C}=(0,c.on)((0,m.k)(e=>({dimArrays:e.dimArrays,dimUnits:e.dimUnits,dimNames:e.dimNames,strides:e.strides,dataShape:e.dataShape,setPlotDim:e.setPlotDim,setTimeSeries:e.setTimeSeries,updateTimeSeries:e.updateTimeSeries,setDimCoords:e.setDimCoords,updateDimCoords:e.updateDimCoords}))),{analysisMode:M,analysisArray:O}=(0,c.r2)((0,m.k)(e=>({analysisMode:e.analysisMode,analysisArray:e.analysisArray}))),P=(0,d.useRef)(null),{timeScale:Y,getColorIdx:B,incrementColorIdx:j}=(0,c.Ws)((0,m.k)(e=>({timeScale:e.timeScale,getColorIdx:e.getColorIdx,incrementColorIdx:e.incrementColorIdx})));return(0,a.jsxs)("mesh",{scale:[S,1,g*Y],onClick:function(e){if(!x)return;let n=e.uv,r=e.normal,a=(0,p._8)(r);if(a!=P.current&&(k({}),I({}),u({})),P.current=a,t){var d,c;let e=(0,p.PE)({data:M?O:(0,p.Td)(),shape:_,stride:b},{uv:n,normal:r}),t=r.toArray().map((e,n)=>Math.abs(e)>0?n:null).filter(e=>null!==e);w(2-t[0]);let a=(0,p.jT)({normal:r,uv:n}),m=a.map((e,n)=>e?v[n][Math.round(e*v[n].length-.5)]:null),x=h.filter((e,n)=>null!==m[n]),S=z.filter((e,n)=>null!==m[n]);m=m.filter(e=>null!==e);let g="".concat(m[0],"_").concat(m[1]),k={color:(0,y.md)(B()/10,"Paired"),data:e};j(),D({[g]:k}),C({[g]:{first:{name:x[0],loc:null!=(d=m[0])?d:0,units:S[0]},second:{name:x[1],loc:null!=(c=m[1])?c:0,units:S[1]},plot:{units:z[2-t[0]]}}});let I=[l,o,i].filter((e,n)=>null!=a[n]),P=[l,o,i].filter((e,n)=>null==a[n]),Y=a.filter(e=>null!=e),A=b.filter((e,n)=>null!=a[n]),L=Math.round(Y[0]*I[0]-.5),X=Math.round(Y[1]*I[1]-.5),U=L*A[0]+X*A[1],V=b.filter((e,n)=>null==a[n]);f(P[0]),u(e=>({...{[g]:U},...e})),s(V[0])}},children:[(0,a.jsx)("boxGeometry",{}),(0,a.jsx)("meshBasicMaterial",{transparent:!0,opacity:0})]})},v=e=>{let{textures:n,ZarrDS:t}=e,{texture:r,colormap:i}=n,{timeSeries:l,flipY:u}=(0,c.on)((0,m.k)(e=>({timeSeries:e.timeSeries,flipY:e.flipY}))),{scalePoints:s,scaleIntensity:f,pointSize:x,cScale:p,cOffset:y,valueRange:S,animProg:v,selectTS:z,timeScale:h,xRange:b,yRange:_,zRange:w}=(0,c.Ws)((0,m.k)(e=>({scalePoints:e.scalePoints,scaleIntensity:e.scaleIntensity,pointSize:e.pointSize,cScale:e.cScale,cOffset:e.cOffset,valueRange:e.valueRange,animProg:e.animProg,selectTS:e.selectTS,timeScale:e.timeScale,xRange:e.xRange,yRange:e.yRange,zRange:e.zRange}))),k=(0,c.$U)(e=>e.setError),[D,I]=(0,d.useState)({}),[C,M]=(0,d.useState)(Array(10).fill(-1)),[O,P]=(0,d.useState)(1),[Y,B]=(0,d.useState)(0);(0,d.useEffect)(()=>{let e=Object.keys(D),n=Object.keys(l),t=(e=e.filter(e=>n.includes(e))).map(e=>D[e]);M([...t,...Array(Math.max(0,10-t.length)).fill(-1)])},[l,D]);let{data:j,width:A,height:L,depth:X}=(0,d.useMemo)(()=>r instanceof o.dYF?{data:r.image.data,width:r.image.width,height:r.image.height,depth:r.image.depth}:(console.warn("Provided texture is not a Data3DTexture"),{data:[],width:0,height:0,depth:0}),[r]),U=(0,d.useMemo)(()=>A/L,[A,L]),V=(0,d.useMemo)(()=>X/L,[X,L]),{positions:N,values:T}=(0,d.useMemo)(()=>{let e;try{e=new Float32Array(X*L*A*3)}catch(e){return k("oom"),{positions:[],values:[]}}let n=new Uint8Array(X*L*A);for(let t=0;t<X;t++)for(let r=0;r<L;r++)for(let i=0;i<A;i++){let a=i+r*A+t*A*L,o=j[a]||0,l=i/(A-1)-.5,u=(r/(L-1)-.5)/U,s=(t/(X-1)-.5)*V,d=3*a;e[d]=2*l,e[d+1]=2*u,e[d+2]=s,n[a]=o}return{positions:e,values:n}},[j,A,L,X]),G=(0,d.useMemo)(()=>{let e=new o.LoY;return e.setAttribute("position",new o.qtW(N,3)),e.setAttribute("value",new o.qtW(T,1)),e},[N,T]),E=(0,d.useMemo)(()=>new o.BKk({glslVersion:o.Wdf,uniforms:{pointSize:{value:x},cmap:{value:i},cOffset:{value:y},cScale:{value:p},valueRange:{value:new o.I9Y(S[0],S[1])},scalePoints:{value:s},scaleIntensity:{value:f},startIDs:{value:C},stride:{value:O},showTransect:{value:z},dimWidth:{value:Y},timeScale:{value:h},animateProg:{value:v},depthRatio:{value:V},flatBounds:{value:new o.IUQ(b[0],b[1],w[0]*V/2,w[1]*V/2)},vertBounds:{value:new o.I9Y(_[0]/U,_[1]/U)}},vertexShader:"attribute float value;\r\nout float vValue;\r\n\r\nflat out int highlight;\r\n\r\nuniform float pointSize;\r\nuniform bool scalePoints;\r\nuniform float scaleIntensity;\r\nuniform vec2 valueRange;\r\nuniform int[10] startIDs;\r\nuniform int stride;\r\nuniform int dimWidth;\r\nuniform bool showTransect;\r\nuniform float timeScale;\r\nuniform float animateProg;\r\nuniform float depthRatio;\r\nuniform vec4 flatBounds;\r\nuniform vec2 vertBounds;\r\n\r\nbool isValidPoint(){\r\n    for (int i = 0; i < 10; i++){\r\n        if (startIDs[i] == -1){\r\n            return false;\r\n        }\r\n        int rePos = gl_VertexID - startIDs[i];\r\n        bool isValid = rePos % stride == 0;\r\n        bool secondary = gl_VertexID < (startIDs[i] + dimWidth*stride) && gl_VertexID > startIDs[i];\r\n        isValid = isValid && secondary;\r\n        if (isValid){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nvoid main() {\r\n    vValue = value/255.;\r\n    vec3 scaledPos = position;\r\n    scaledPos.z += depthRatio/2.;\r\n    scaledPos.z = mod(scaledPos.z + animateProg*depthRatio, depthRatio);\r\n    scaledPos.z -= depthRatio/2.;\r\n\r\n    scaledPos.z *= timeScale;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(scaledPos, 1.0);\r\n    float pointScale = pointSize/gl_Position.w;\r\n    pointScale = scalePoints ? pointScale*pow(vValue,scaleIntensity) : pointScale;\r\n\r\n    bool isValid = isValidPoint();\r\n    highlight = isValid ? 1 : 0;\r\n    \r\n    if (value == 255. || (pointScale*gl_Position.w < 0.75 && scalePoints)){ //Hide points that are invisible or get too small when scalled\r\n        gl_Position = vec4(2.0, 2.0, 2.0, 1.0);\r\n    }\r\n\r\n    if (vValue < valueRange.x || vValue > valueRange.y){ //Hide points that are outside of value range\r\n        gl_Position = vec4(2.0, 2.0, 2.0, 1.0);\r\n    }\r\n\r\n    vec2 scaledZBounds = vec2(flatBounds.z,  flatBounds.w) * vec2(timeScale);\r\n    bool xCheck = scaledPos.x < flatBounds.x || scaledPos.x > flatBounds.y;\r\n    bool zCheck = scaledPos.z < scaledZBounds.x || scaledPos.z > scaledZBounds.y;\r\n    bool yCheck = scaledPos.y < vertBounds.x || scaledPos.y> vertBounds.y;\r\n\r\n    if (xCheck || zCheck || yCheck){ //Hide points that are clipped\r\n        gl_Position = vec4(2.0, 2.0, 2.0, 1.0);\r\n    }\r\n    \r\n    if (showTransect){\r\n        gl_PointSize = isValid ? max(pointScale*5. , pointScale+80./gl_Position.w) : pointScale;\r\n    }\r\n    else{\r\n        gl_PointSize =  pointScale;\r\n    }\r\n\r\n}\r\n",fragmentShader:"out vec4 Color;\r\n\r\nin float vValue;\r\nflat in int highlight;\r\n\r\n\r\nuniform sampler2D cmap;\r\nuniform float cScale;\r\nuniform float cOffset;\r\nuniform bool showTransect;\r\n\r\nvoid main() {\r\n\r\n    float sampLoc = vValue == 1. ? vValue : (vValue - 0.5)*cScale + 0.5;\r\n    sampLoc = vValue == 1. ? vValue : min(sampLoc+cOffset,0.99);\r\n    vec4 color = texture(cmap, vec2(sampLoc, 0.5));\r\n    color.a = 1.;\r\n    Color = color;\r\n    if (showTransect){\r\n        Color = highlight == 1 ? color : color * vec4(vec3(0.4),1.);\r\n    }\r\n    else{\r\n        Color = color;\r\n    }\r\n\r\n}\r\n",depthWrite:!0,transparent:!0,blending:o.NTi,side:o.$EB}),[x,i,y,p,S,s,f,C,O,z,v,h,V,U,b,_,w]);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("mesh",{scale:[1,u?-1:1,1],children:(0,a.jsx)("points",{geometry:G,material:E})}),(0,a.jsx)(g,{dimensions:{width:A,height:L,depth:X},ZarrDS:t,setters:{setPoints:I,setStride:P,setDimWidth:B}})]})};var z=t(6668),h=t(4434);t(9519);var b=t(1279);t(596);var _=t(450),w=t(3964);function k(e){let{...n}=e;return(0,a.jsx)(_.bL,{"data-slot":"dropdown-menu",...n})}function D(e){let{...n}=e;return(0,a.jsx)(_.l9,{"data-slot":"dropdown-menu-trigger",...n})}function I(e){let{className:n,sideOffset:t=4,...r}=e;return(0,a.jsx)(_.ZL,{children:(0,a.jsx)(_.UC,{"data-slot":"dropdown-menu-content",sideOffset:t,className:(0,w.cn)("bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",n),...r})})}function C(e){let{...n}=e;return(0,a.jsx)(_.YJ,{"data-slot":"dropdown-menu-group",...n})}function M(e){let{className:n,inset:t,variant:r="default",...i}=e;return(0,a.jsx)(_.q7,{"data-slot":"dropdown-menu-item","data-inset":t,"data-variant":r,className:(0,w.cn)("focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",n),...i})}function O(e){let{className:n,...t}=e;return(0,a.jsx)(_.wv,{"data-slot":"dropdown-menu-separator",className:(0,w.cn)("bg-border -mx-1 my-1 h-px",n),...t})}var P=t(3656);let Y=d.memo(function(){let{showPoints:e,linePointSize:n,pointColor:t,useCustomPointColor:r,setLinePointSize:i,setPointColor:o,setUseCustomPointColor:l}=(0,c.Ws)((0,m.k)(e=>({showPoints:e.showPoints,linePointSize:e.linePointSize,pointColor:e.pointColor,useCustomPointColor:e.useCustomPointColor,setLinePointSize:e.setLinePointSize,setPointColor:e.setPointColor,setUseCustomPointColor:e.setUseCustomPointColor})));return e?(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("div",{className:"w-full flex items-center mb-2",children:[(0,a.jsx)("div",{className:"w-[40%]",children:(0,a.jsx)("b",{children:"Point Size"})}),(0,a.jsx)(P.A,{min:1,max:10,step:.1,value:[n],className:"flex-1 my-2",onValueChange:e=>i(e[0])})]}),(0,a.jsxs)("div",{className:"w-full flex items-center mb-2",children:[(0,a.jsx)("div",{className:"w-[40%]",children:(0,a.jsx)("b",{children:"Point Color"})}),r&&(0,a.jsx)("input",{type:"color",title:"Point Color",value:t,onChange:e=>o(e.target.value)}),(0,a.jsxs)(b.$,{className:"h-8 px-2 py-1",variant:"outline",onClick:()=>l(!r),children:["Use",r?" Browzarr Color":" Custom Color"]})]})]}):null}),B=d.memo(function(){let{lineWidth:e,lineColor:n,useLineColor:t,lineResolution:r,useCustomColor:i,setLineWidth:o,setLineColor:l,setUseLineColor:u,setLineResolution:s,setUseCustomColor:d}=(0,c.Ws)((0,m.k)(e=>({lineWidth:e.lineWidth,lineColor:e.lineColor,useLineColor:e.useLineColor,lineResolution:e.lineResolution,useCustomColor:e.useCustomColor,setLineWidth:e.setLineWidth,setLineColor:e.setLineColor,setUseLineColor:e.setUseLineColor,setLineResolution:e.setLineResolution,setUseCustomColor:e.setUseCustomColor})));return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("div",{className:"w-full flex items-center mb-2",children:[(0,a.jsx)("div",{className:"w-[40%]",children:(0,a.jsx)("b",{children:"Line Width"})}),(0,a.jsx)(P.A,{min:1,max:10,step:.2,value:[e],className:"flex-1 my-2",onValueChange:e=>o(e[0])})]}),(0,a.jsxs)("div",{className:"w-full flex items-center mb-2",children:[(0,a.jsx)("div",{className:"w-[40%]",children:(0,a.jsx)("b",{children:"Line Resolution"})}),(0,a.jsx)(P.A,{min:1,max:10,step:1,value:[r],className:"flex-1 my-2",onValueChange:e=>s(e[0])})]}),(0,a.jsxs)("div",{className:"w-full flex items-center",children:[(0,a.jsx)("div",{className:"w-[40%]",children:(0,a.jsx)("b",{children:"Line Color"})}),i&&(0,a.jsx)("input",{type:"color",title:"Line Color",value:n,onChange:e=>l(e.target.value)}),!i&&(0,a.jsxs)(b.$,{className:"h-8 px-2 py-5",variant:"outline",onClick:()=>u(!t),children:["Use ",(0,a.jsx)("br",{}),t?"Individual Color":"Plot Color"]}),(0,a.jsxs)(b.$,{className:"h-8 px-2 py-5",variant:"outline",onClick:()=>d(!i),children:["Use ",(0,a.jsx)("br",{}),i?"Browzarr Color":"Custom Color"]})]})]})}),j=d.memo(function(){let{showPoints:e,setShowPoints:n}=(0,c.Ws)((0,m.k)(e=>({showPoints:e.showPoints,setShowPoints:e.setShowPoints})));return(0,a.jsx)("div",{className:"plotline-options",children:(0,a.jsxs)(k,{children:[(0,a.jsx)(D,{asChild:!0,children:(0,a.jsx)(b.$,{className:"cursor-pointer",variant:"outline",children:"Line Options"})}),(0,a.jsxs)(I,{className:"w-80 items-center",align:"center",children:[(0,a.jsx)(C,{onClick:e=>e.preventDefault(),children:(0,a.jsx)(M,{children:(0,a.jsx)(b.$,{variant:"outline",onClick:t=>{t.preventDefault(),n(!e)},children:e?"Hide Points":"Show Points"})})}),(0,a.jsx)(Y,{}),(0,a.jsx)(O,{}),(0,a.jsx)(B,{})]})]})})});var A=t(9797);function L(e){let{pointID:n,pointLoc:t,showPointInfo:r,plotUnits:i}=e,{plotDim:o,dimArrays:l,dimNames:u,dimUnits:s,timeSeries:f}=(0,c.on)((0,m.k)(e=>({plotDim:e.plotDim,dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits,timeSeries:e.timeSeries}))),x=0,y=0;if(Object.entries(n).length>0&&Object.entries(f).length>0){let[e,t]=n;x=f[e].data[t],y=l[o][t]}let[S,g]=t,[v,z]=(0,d.useState)(!1);return(0,d.useEffect)(()=>{if(!r){let e=setTimeout(()=>{z(!1)},100);return()=>clearTimeout(e)}z(!0)},[r]),(0,a.jsx)(a.Fragment,{children:v&&(0,a.jsxs)("div",{className:"point-info",style:{left:"".concat(S,"px"),top:"".concat(g,"px")},children:["".concat(x.toFixed(2)).concat(i),(0,a.jsx)("br",{}),"".concat(u[o],": ").concat((0,p.SB)(y,s[o]),"       \n        ")]})})}function X(){let{coords:e,timeSeries:n,setDimCoords:t,setTimeSeries:r}=(0,c.on)((0,m.k)(e=>({coords:e.dimCoords,timeSeries:e.timeSeries,setDimCoords:e.setDimCoords,setTimeSeries:e.setTimeSeries}))),[i,o]=(0,d.useState)(!1),l=(0,d.useRef)([0,Math.round(.255*window.innerHeight)]),u=(0,d.useRef)([0,Math.round(.255*window.innerHeight)]),[s,f]=(0,d.useState)([0,Math.round(.255*window.innerHeight)]);function x(e){if(i){let n=l.current[0]-e.clientX,t=l.current[1]-e.clientY,r=Math.min(Math.max(u.current[0]-n,10),window.innerWidth-120),i=Math.max(u.current[1]+t,0);f([Math.min(r,window.innerWidth-100),Math.min(i,window.innerHeight-100)])}}function y(){o(!1)}return(0,d.useEffect)(()=>(i&&(document.addEventListener("mousemove",x),document.addEventListener("mouseup",y)),()=>{document.removeEventListener("mousemove",x),document.removeEventListener("mouseup",y)}),[i]),(0,a.jsx)(a.Fragment,{children:(0,a.jsx)("div",{className:"coord-container",onPointerDown:function(e){l.current=[e.clientX,e.clientY],u.current=[...s],o(!0)},onPointerMove:x,onPointerUp:()=>o(!1),style:{left:"".concat(s[0],"px"),bottom:"".concat(s[1],"px")},children:Object.keys(e).length>0&&Object.keys(e).reverse().map((i,o)=>(0,a.jsxs)("div",{className:"plot-coords",style:{background:"rgb(".concat(n[i].color,")"),justifyContent:"space-between"},children:[(0,a.jsx)("b",{children:"".concat(e[i].first.name,": ")}),"".concat((0,p.SB)(e[i].first.loc,e[i].first.units)),(0,a.jsx)("br",{}),(0,a.jsx)("b",{children:"".concat(e[i].second.name,": ")}),"".concat((0,p.SB)(e[i].second.loc,e[i].second.units)),(0,a.jsx)(A.Xr4,{onClick:()=>(function(i){let{[i]:a,...o}=e;t(o);let{[i]:l,...u}=n;r(u)})(i),color:"red",style:{cursor:"pointer",zIndex:3}})]},i))})})}function U(){let[e,n]=(0,d.useState)(["",0]),[t,r]=(0,d.useState)([0,0]),[i,o]=(0,d.useState)(!1),[l,u]=(0,d.useState)(Math.round(window.innerHeight-.25*window.innerHeight)),s=(0,c.on)(e=>e.metadata),f=s?s.units:"Default",[m,x]=(0,d.useState)(1),[p,y]=(0,d.useState)(1);(0,d.useEffect)(()=>{let e=()=>{let e=Math.round(window.innerHeight-.25*window.innerHeight);u(e),document.documentElement.style.setProperty("--plot-height","".concat(e,"px"))};return window.addEventListener("orientationchange",e),window.addEventListener("resize",e),()=>{window.removeEventListener("orientationchange",e),window.removeEventListener("resize",e)}},[]),(0,d.useEffect)(()=>{document.documentElement.style.setProperty("--plot-height","".concat(l,"px"))},[l]);let S=window.innerHeight-l>=10;return(0,a.jsxs)(a.Fragment,{children:[!S&&(0,a.jsx)(h.de,{onClick:()=>{u(window.innerHeight-60)}}),S&&(0,a.jsxs)("div",{className:"plot-canvas",children:[(0,a.jsx)(j,{}),i&&(0,a.jsx)(L,{pointID:e,pointLoc:t,showPointInfo:i,plotUnits:f}),(0,a.jsx)(h.A,{height:l,setHeight:u}),(0,a.jsx)(h.gj,{scale:m,setScale:x}),(0,a.jsx)(h.LC,{scale:p,setScale:y}),(0,a.jsxs)(z.Hl,{orthographic:!0,camera:{position:[0,0,100]},frameloop:"demand",children:[(0,a.jsx)(e2,{height:l,yScale:m,pointSetters:{setPointID:n,setPointLoc:r,setShowPointInfo:o},xScale:p}),(0,a.jsx)(G,{height:l,yScale:m,xScale:p})]}),(0,a.jsx)(X,{})]})]})}var V=t(823),N=t(7039),T=t(1485);function G(e){let{colorTicks:n="grey",tickSize:t=4,fontSize:r=14,showGrid:i=!0,gridOpacity:o=.5,height:l,yScale:u=1,xScale:s=1}=e,{camera:f}=(0,T.C)(),[x,y]=(0,d.useState)({left:0,right:0,top:0,bottom:0}),{dimCoords:S,dimArrays:g,plotDim:v,valueScales:z}=(0,c.on)((0,m.k)(e=>({dimCoords:e.dimCoords,dimArrays:e.dimArrays,plotDim:e.plotDim,valueScales:e.valueScales}))),h=g[v],b=h.length,_=z.maxVal-z.minVal,w=(0,d.useMemo)(()=>{let e=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];if(h){if(h.every(e=>"bigint"==typeof e)){let n=Object.keys(S).length>0?Object.keys(S)[0]:null,t=n?(0,p.lt)(S[n].plot.units):1,r=[];for(let n=0;n<h.length;n++){let i=new Date(Number(h[n])*t),a="".concat(i.getDate().toString().padStart(2,"0")," ").concat(e[i.getMonth()],"\n").concat(i.getFullYear());r.push(a)}return r}return h.map(e=>String(e))}},[h,S]),k=(0,d.useMemo)(()=>{let e=window.innerWidth,n=window.innerHeight-l;return{left:-e/2+f.position.x,right:e/2+f.position.x,top:n/2+f.position.y,bottom:-n/2+f.position.y}},[]),[D,I]=(0,d.useState)(f.zoom),C=(0,d.useMemo)(()=>{let e=1/f.zoom;return{tickSize:t*e,fontSize:r/e,labelOffset:t*e}},[f.zoom,t,r]);(0,T.D)(()=>{f.zoom!==D&&I(f.zoom);let e=window.innerWidth/f.zoom,n=(window.innerHeight-l)/f.zoom,t={left:-e/2+f.position.x,right:e/2+f.position.x,top:n/2+f.position.y,bottom:-n/2+f.position.y};JSON.stringify(x)!=JSON.stringify(t)&&y(t)});let M=(0,d.useRef)(null),O=(0,d.useRef)(null);(0,d.useEffect)(()=>(M.current&&clearTimeout(M.current),O.current&&(M.current=setTimeout(()=>{O.current&&O.current.reset()},100)),()=>{null!==M.current&&clearTimeout(M.current)}),[l]);let P=(x.top+x.bottom)/2,Y=(x.left+x.right)/2;return(0,a.jsxs)("group",{children:[i&&(0,a.jsxs)(a.Fragment,{children:[Array.from({length:10},(e,t)=>{var r;if(0===t||9===t)return null;let i=+Math.round(x.left/1)+(Math.round(x.right/1)-Math.round(x.left/1))*(t/9),l=i/s/(k.right-k.left)+.5;return(0,a.jsxs)(d.Fragment,{children:[(0,a.jsx)("group",{position:[i,P,0],children:(0,a.jsxs)("line",{children:[(0,a.jsx)("bufferGeometry",{children:(0,a.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([0,x.top-P,0,0,x.bottom-P,0]),3]})}),(0,a.jsx)("lineDashedMaterial",{color:n,opacity:o,transparent:!0,dashSize:.5,gapSize:.5})]},"vgrid-".concat(t))}),(0,a.jsxs)("group",{position:[i,x.top,0],children:[(0,a.jsxs)("line",{children:[(0,a.jsx)("bufferGeometry",{children:(0,a.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([0,0,0,0,-C.tickSize,0]),3]})}),(0,a.jsx)("lineBasicMaterial",{color:n})]}),0!==t&&9!==t&&(0,a.jsx)(V.E,{position:[0,C.tickSize/4-C.labelOffset,0],fontSize:C.fontSize/D**2,color:n,anchorX:"center",anchorY:"top",children:null!=(r=null==w?void 0:w[Math.round(l*b-.5)])?r:""})]},"top-tick-".concat(t))]},"vert-group-".concat(t))}),Array.from({length:8},(e,t)=>{if(0===t||7===t)return null;let r=x.bottom+(x.top-x.bottom)*(t/7),i=r/u/(x.top-x.bottom)/D+.5;return(0,a.jsxs)(d.Fragment,{children:[(0,a.jsx)("group",{position:[Y,r,0],children:(0,a.jsxs)("line",{children:[(0,a.jsx)("bufferGeometry",{children:(0,a.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([x.left-Y,0,0,x.right-Y,0,0]),3]})}),(0,a.jsx)("lineDashedMaterial",{color:n,opacity:o,transparent:!0,dashSize:0,gapSize:.5,linewidth:1})]})},"hgrid-".concat(t)),(0,a.jsxs)("group",{position:[x.right,r,0],children:[(0,a.jsxs)("line",{children:[(0,a.jsx)("bufferGeometry",{children:(0,a.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([0,0,0,-C.tickSize,0,0]),3]})}),(0,a.jsx)("lineBasicMaterial",{color:n})]}),0!==t&&7!==t&&(0,a.jsx)(V.E,{position:[-C.tickSize-C.labelOffset,0,0],fontSize:C.fontSize/D**2,color:n,anchorX:"right",anchorY:"middle",children:(z.minVal+i*_).toFixed(1)})]},"right-tick-".concat(t))]},"vert-group-".concat(t))})]}),(0,a.jsx)(N.N,{ref:O,enableRotate:!1,enablePan:!0,enableZoom:!0,zoomSpeed:.85,maxDistance:500,maxZoom:20,minZoom:.5})]})}var E=t(21);t(6469);let R=e=>{let{loc:n,show:t,info:r}=e,{dimNames:i,dimUnits:o}=(0,c.on)((0,m.k)(e=>({dimNames:e.dimNames,dimUnits:e.dimUnits}))),l=(0,c.r2)(e=>e.axis),u=(0,d.useMemo)(()=>i.length<3?[i[0],i[1]]:i.filter((e,n)=>n!=l),[i,l]),s=(0,d.useMemo)(()=>i.length<3?[o[0],o[1]]:o.filter((e,n)=>n!=l),[o,l]);return(0,a.jsxs)("div",{className:"analysis-overlay",style:{left:"".concat(n[0]+10,"px"),top:"".concat(n[1]+10,"px"),display:t?"":"none"},children:["".concat(u[0],": ").concat(t&&(0,p.SB)(r[0],s[0])),(0,a.jsx)("br",{}),"".concat(u[1],": ").concat(t&&(0,p.SB)(r[1],s[1])),(0,a.jsx)("br",{}),"Value: ".concat(Math.round(100*r[2])/100)]})};var F=t(7556);let q="\n    struct Params {\n        zStride: u32,\n        yStride: u32,\n        xStride: u32,\n        xSize: u32,\n        ySize: u32,\n        reduceDim: u32,\n        dimLength: u32,\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f32>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let reduceDim = params.reduceDim;\n        let dimLength = params.dimLength;\n                        \n        let outX = global_id.y;\n        let outY = global_id.x;\n        \n        if (outX >= xSize || outY >= ySize) {\n            return;\n        }\n",Z="\n    ".concat(q,"\n        var sum: f32 = 0.0;\n        \n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                sum += inputData[inputIndex];\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                sum += inputData[inputIndex];\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                sum += inputData[inputIndex];\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = sum / f32(dimLength);\n    }\n"),W="\n    ".concat(q,"\n        var min: f32 = 1e12;\n        \n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let newMin = inputData[inputIndex];\n                if (newMin < min) {\n                    min = newMin;\n                }\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let newMin = inputData[inputIndex];\n                if (newMin < min) {\n                    min = newMin;\n                }\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let newMin = inputData[inputIndex];\n                if (newMin < min) {\n                    min = newMin;\n                }\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = min;\n    }\n"),H="\n    ".concat(q,"\n        \n        var max: f32 = -1e12;\n        \n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let newMax = inputData[inputIndex];\n                if (newMax > max) {\n                    max = newMax;\n                }\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let newMax = inputData[inputIndex];\n                if (newMax > max) {\n                    max = newMax;\n                }\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let newMax = inputData[inputIndex];\n                if (newMax > max) {\n                    max = newMax;\n                }\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = max;\n    }\n"),Q="\n    ".concat(q,"\n        var sum: f32 = 0.0;\n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                sum += inputData[inputIndex];\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                sum += inputData[inputIndex];\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                sum += inputData[inputIndex];\n            }\n        }\n        \n        let mean: f32 = sum / f32(dimLength);\n\n        var squaredDiffSum: f32 = 0.0;\n\n        // Iterate along the dimension again\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let diff: f32 = mean - inputData[inputIndex];\n                squaredDiffSum += diff*diff;\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let diff: f32 = mean - inputData[inputIndex];\n                squaredDiffSum += diff*diff;\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let diff: f32 = mean - inputData[inputIndex];\n                squaredDiffSum += diff*diff;\n            }\n        }\n\n        let stDev: f32 = sqrt(squaredDiffSum / f32(dimLength));\n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = stDev;\n    }\n"),$="\n    ".concat(q,"\n        \n        var accum: f32 = 0;\n        \n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                accum += inputData[inputIndex];\n                \n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                accum += inputData[inputIndex];\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                accum += inputData[inputIndex];\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = accum;\n    }\n"),J="\n    ".concat(q,"\n        let meanY: f32 = f32(dimLength)/2;\n        var sum: f32 = 0.0;\n\n\n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                sum += inputData[inputIndex];\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                sum += inputData[inputIndex];\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                sum += inputData[inputIndex];\n            }\n        }\n        \n        let meanX: f32 = sum / f32(dimLength);\n        var numSum: f32 = 0;\n        var denomSum: f32 = 0;\n\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let xi: f32 = inputData[inputIndex];\n                numSum += (xi - meanX)*(f32(z) - meanY);\n                denomSum += (f32(z) - meanY)*(f32(z) - meanY);\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let xi: f32 = inputData[inputIndex];\n                numSum += (xi - meanX)*(f32(y) - meanY);\n                denomSum += (f32(y) - meanY)*(f32(y) - meanY);\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let xi: f32 = inputData[inputIndex];\n                numSum += (xi - meanX)*(f32(x) - meanY);\n                denomSum += (f32(x) - meanY)*(f32(x) - meanY);\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = numSum/denomSum;\n    }\n"),K="\n    struct Params {\n    zStride: u32,\n    yStride: u32,\n    xStride: u32,\n    xSize: u32,\n    ySize: u32,\n    reduceDim: u32,\n    dimLength: u32,\n    };\n    @group(0) @binding(0) var<storage, read> firstData: array<f32>;\n    @group(0) @binding(1) var<storage, read> secondData: array<f32>;\n    @group(0) @binding(2) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(3) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let reduceDim = params.reduceDim;\n        let dimLength = params.dimLength;\n                        \n        let outX = global_id.y;\n        let outY = global_id.x;\n        \n        if (outX >= xSize || outY >= ySize) {\n            return;\n        }\n\n        var ySum: f32 = 0;\n        var xSum: f32 = 0.0;\n\n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { \n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                xSum += firstData[inputIndex];\n                ySum += secondData[inputIndex];\n            }\n        } else if (reduceDim == 1u) { \n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                xSum += firstData[inputIndex];\n                ySum += secondData[inputIndex];\n            }\n        } else { \n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                xSum += firstData[inputIndex];\n                ySum += secondData[inputIndex];\n            }\n        }\n        \n        let xMean: f32 = xSum / f32(dimLength);\n        let yMean: f32 = ySum / f32(dimLength);\n        var numSum: f32 = 0;\n        var denomSum: f32 = 0;\n\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let xi: f32 = firstData[inputIndex];\n                let yi: f32 = secondData[inputIndex];\n                numSum += (xi - xMean)*(f32(yi) - yMean);\n                denomSum += (f32(yi) - yMean)*(f32(yi) - yMean);\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let xi: f32 = firstData[inputIndex];\n                let yi: f32 = secondData[inputIndex];\n                numSum += (xi - xMean)*(f32(yi) - yMean);\n                denomSum += (f32(yi) - yMean)*(f32(yi) - yMean);\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let xi: f32 = firstData[inputIndex];\n                let yi: f32 = secondData[inputIndex];\n                numSum += (xi - xMean)*(f32(yi) - yMean);\n                denomSum += (f32(yi) - yMean)*(f32(yi) - yMean);\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = numSum/denomSum;\n    }\n",ee="\n    struct Params {\n    zStride: u32,\n    yStride: u32,\n    xStride: u32,\n    xSize: u32,\n    ySize: u32,\n    reduceDim: u32,\n    dimLength: u32,\n    };\n    @group(0) @binding(0) var<storage, read> firstData: array<f32>;\n    @group(0) @binding(1) var<storage, read> secondData: array<f32>;\n    @group(0) @binding(2) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(3) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let reduceDim = params.reduceDim;\n        let dimLength = params.dimLength;\n                        \n        let outX = global_id.y;\n        let outY = global_id.x;\n        \n        if (outX >= xSize || outY >= ySize) {\n            return;\n        }\n        var ySum: f32 = 0;\n        var xSum: f32 = 0.0;\n        var numSum: f32 = 0;\n\n       // Calculate base coordinate and stride for the dimension we're iterating over\n        var baseCoord: u32;\n        var iterStride: u32;\n\n        if (reduceDim == 0u) {\n            baseCoord = outX * xStride + outY * yStride;\n            iterStride = zStride;\n        } else if (reduceDim == 1u) {\n            baseCoord = outX * xStride + outY * zStride;\n            iterStride = yStride;\n        } else {\n            baseCoord = outX * yStride + outY * zStride;\n            iterStride = xStride;\n        }\n\n        // Single pass: calculate sums, means, and covariance\n        for (var i: u32 = 0u; i < dimLength; i++) {\n            let inputIndex = baseCoord + (i * iterStride);\n            let xi: f32 = firstData[inputIndex];\n            let yi: f32 = secondData[inputIndex];\n            xSum += xi;\n            ySum += yi;\n        }\n\n        let xMean: f32 = xSum / f32(dimLength);\n        let yMean: f32 = ySum / f32(dimLength);\n\n        // Second pass for covariance calculation\n        for (var i: u32 = 0u; i < dimLength; i++) {\n            let inputIndex = baseCoord + (i * iterStride);\n            let xi: f32 = firstData[inputIndex];\n            let yi: f32 = secondData[inputIndex];\n            numSum += (xi - xMean) * (yi - yMean);\n        }\n\n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = numSum / (f32(dimLength) - 1);\n    }\n",en="\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        zStride: u32,\n        xSize: u32,\n        ySize: u32,\n        zSize: u32,\n        workGroups: vec3<u32>,\n        kernelSize: u32,\n        kernelDepth: u32\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f32>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(4, 4, 4)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride; \n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let zSize = params.zSize; \n        let workGroups = params.workGroups;\n        let kernelSize = params.kernelSize;\n        let kernelDepth = params.kernelDepth;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n        let outZ = global_id.z; \n\n        if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n            return;\n        }\n\n        let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n        let globalIdx = global_id.z * total_threads_per_slice + \n                        global_id.y * (workGroups.x * 4) + \n                        global_id.x;\n\n        let xy_radius: i32 = i32(kernelSize/2u);\n        let z_radius: i32 = i32(kernelDepth/2u);\n\n        var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n        var zOffset: i32 = 0;\n        if (xy_radius == 0){\n            xyOffset = -1;\n        }\n        if (z_radius == 0){\n            zOffset = -1;\n        }\n",et="\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        xSize: u32,\n        ySize: u32,\n        kernelSize: u32,\n        kernelDepth: u32\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f32>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>,) {\n        let xStride = params.xStride; \n        let yStride = params.yStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let kernelSize = params.kernelSize;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n\n        if (outX >= xSize|| outY >= ySize) {\n            return;\n        }\n\n        let globalIdx = outY * xSize + outX;\n        let thisVal = inputData[globalIdx];\n        let isNaN: bool = thisVal != thisVal;\n        if (isNaN){\n            outputData[globalIdx] = thisVal;\n            return;\n        }   \n\n        let xy_radius: i32 = i32(kernelSize/2u);\n\n",er="\n        ".concat(en,"    \n        var sum: f32 = 0.0;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                        sum += inputData[u32(newIdx)];\n                        count ++;\n                    }\n                }\n            }\n        }\n        \n        outputData[globalIdx] = sum / f32(count);\n    }\n"),ei="\n    ".concat(en,"  \n        var minVal: f32 = 1e12;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                        let sampledVal = inputData[u32(newIdx)];\n                        if (sampledVal < minVal){\n                            minVal = sampledVal;\n                        }\n                    }\n                }\n            }\n        }\n        \n        outputData[globalIdx] = minVal;\n    }\n"),ea="\n    ".concat(en,"  \n\n        var maxVal: f32 = -1e12;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                        let sampledVal = inputData[u32(newIdx)];\n                        if (sampledVal > maxVal){\n                            maxVal = sampledVal;\n                        }\n                    }\n                }\n            }\n        }\n        \n        outputData[globalIdx] = maxVal;\n    }\n"),eo="\n    ".concat(en,"  \n        var sum: f32 = 0.0;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                        sum += inputData[u32(newIdx)];\n                        count ++;\n                    }\n                }\n            }\n        }\n        \n        let mean: f32 = sum / f32(count);\n\n        var squaredDiffSum: f32 = 0.0;\n\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                        let diff: f32 = mean - inputData[u32(newIdx)];\n                        squaredDiffSum += diff*diff;\n                    }\n                }\n            }\n        }\n\n        let stDev: f32 = sqrt(squaredDiffSum / f32(count));\n\n        outputData[globalIdx] = stDev;\n    }\n"),el="\n        ".concat(et,"    \n        var sum: f32 = 0;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius; kx <= xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius; ky <= xy_radius; ky++) {\n                let in_coord = vec2<i32>(i32(global_id.x), i32(global_id.y)) + vec2<i32>(kx, ky);\n                if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                    in_coord.y >= 0 && in_coord.y < i32(ySize)) { //Ensure the sampled point is within 3D dataspace\n                    let xOffset = kx * i32(xStride);\n                    let yOffset = ky * i32(yStride);\n                    let newIdx = i32(globalIdx) + xOffset + yOffset;\n                    let newVal = inputData[u32(newIdx)];\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    sum += newVal;\n                    count ++;\n                }\n            }\n        }\n        outputData[globalIdx] = sum / f32(count);\n    }\n"),eu="\n    ".concat(et,"   \n        var minVal: f32 = 1e12;\n        for (var kx: i32 = -xy_radius; kx <= xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius; ky <= xy_radius; ky++) {\n                let in_coord = vec2<i32>(i32(global_id.x), i32(global_id.y)) + vec2<i32>(kx, ky);\n                if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                    in_coord.y >= 0 && in_coord.y < i32(ySize)) { //Ensure the sampled point is within 3D dataspace\n                    let xOffset = kx * i32(xStride);\n                    let yOffset = ky * i32(yStride);\n                    let newIdx = i32(globalIdx) + xOffset + yOffset;\n                    let newVal = inputData[u32(newIdx)];\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    if (newVal < minVal){\n                        minVal = newVal;\n                    }\n                }\n            }\n        }\n        outputData[globalIdx] = minVal;\n    }\n"),es="\n    ".concat(et,"  \n        var maxVal: f32 = -1e12;\n        for (var kx: i32 = -xy_radius; kx <= xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius; ky <= xy_radius; ky++) {\n                let in_coord = vec2<i32>(i32(global_id.x), i32(global_id.y)) + vec2<i32>(kx, ky);\n                if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                    in_coord.y >= 0 && in_coord.y < i32(ySize)) { //Ensure the sampled point is within 3D dataspace\n                    let xOffset = kx * i32(xStride);\n                    let yOffset = ky * i32(yStride);\n                    let newIdx = i32(globalIdx) + xOffset + yOffset;\n                    let newVal = inputData[u32(newIdx)];\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    if (newVal > maxVal){\n                        maxVal = newVal;\n                    }\n                }\n            }\n        }\n        outputData[globalIdx] = maxVal;\n    }\n"),ed="\n     ".concat(et,"  \n        var sum: f32 = 1e12;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius; kx <= xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius; ky <= xy_radius; ky++) {\n                let in_coord = vec2<i32>(i32(global_id.x), i32(global_id.y)) + vec2<i32>(kx, ky);\n                if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                    in_coord.y >= 0 && in_coord.y < i32(ySize)) { //Ensure the sampled point is within 3D dataspace\n                    let xOffset = kx * i32(xStride);\n                    let yOffset = ky * i32(yStride);\n                    let newIdx = i32(globalIdx) + xOffset + yOffset;\n                    let newVal = inputData[u32(newIdx)];\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    sum += newVal;\n                    count ++;\n                }\n            }\n        }\n        \n        let mean: f32 = sum / f32(count);\n\n        var squaredDiffSum: f32 = 0.0;\n\n        for (var kx: i32 = -xy_radius; kx <= xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius; ky <= xy_radius; ky++) {\n                let in_coord = vec2<i32>(i32(global_id.x), i32(global_id.y)) + vec2<i32>(kx, ky);\n                if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                    in_coord.y >= 0 && in_coord.y < i32(ySize)) { //Ensure the sampled point is within 3D dataspace\n                    let xOffset = kx * i32(xStride);\n                    let yOffset = ky * i32(yStride);\n                    let newIdx = i32(globalIdx) + xOffset + yOffset;\n                    let newVal = inputData[u32(newIdx)];\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    let diff: f32 = mean - newVal;\n                    squaredDiffSum += diff*diff;\n                }\n            }\n        }\n        let stDev: f32 = sqrt(squaredDiffSum / f32(count));\n\n        outputData[globalIdx] = stDev;\n    }\n"),ef="\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        zStride: u32,\n        xSize: u32,\n        ySize: u32,\n        zSize: u32,\n        workGroups: vec3<u32>,\n        kernelSize: u32,\n        kernelDepth: u32\n    };\n    @group(0) @binding(0) var<storage, read> firstData: array<f32>;\n    @group(0) @binding(1) var<storage, read> secondData: array<f32>;\n    @group(0) @binding(2) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(3) var<uniform> params: Params;\n\n    @compute @workgroup_size(4, 4, 4)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride; \n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let zSize = params.zSize; \n        let workGroups = params.workGroups;\n        let kernelSize = params.kernelSize;\n        let kernelDepth = params.kernelDepth;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n        let outZ = global_id.z; \n\n        if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n            return;\n        }\n\n        let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n        let globalIdx = global_id.z * total_threads_per_slice + \n                        global_id.y * (workGroups.x * 4) + \n                        global_id.x;\n\n        let xy_radius: i32 = i32(kernelSize/2u);\n        let z_radius: i32 = i32(kernelDepth/2u);\n\n        var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n        var zOffset: i32 = 0;\n        if (xy_radius == 0){\n            xyOffset = -1;\n        }\n        if (z_radius == 0){\n            zOffset = -1;\n        }\n\n        var xSum: f32 = 0.0;\n        var xxSum: f32 = 0.0;\n        var ySum: f32 = 0.0;\n        var yySum: f32 = 0.0;\n        var xySum: f32 = 0.0;\n\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                        let xI = firstData[newIdx];\n                        let yI = secondData[newIdx];\n                        xSum += xI;\n                        xxSum += xI * xI;\n                        ySum += yI;\n                        yySum += yI * yI;\n                        xySum += xI * yI;\n                        count ++;\n                    }\n                }\n            }\n        }\n\n        let N: f32 = f32(count);\n        let meanX = xSum / N;\n        let meanY = ySum / N;\n        let varX = (xxSum / N) - (meanX * meanX);\n        let varY = (yySum / N) - (meanY * meanY);\n        let covXY = (xySum / N) - (meanX * meanY);\n        let sigmaX = sqrt(max(0.0, varX));\n        let sigmaY = sqrt(max(0.0, varY));\n        let epsilon = 1e-6;\n        let denominator = sigmaX * sigmaY + epsilon;\n        let correlation = covXY / denominator;\n\n        outputData[globalIdx] = correlation;\n    }\n",ec="\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        zStride: u32,\n        xSize: u32,\n        ySize: u32,\n        zSize: u32,\n        workGroups: vec3<u32>,\n        kernelSize: u32,\n        kernelDepth: u32\n    };\n    @group(0) @binding(0) var<storage, read> firstData: array<f32>;\n    @group(0) @binding(1) var<storage, read> secondData: array<f32>;\n    @group(0) @binding(2) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(3) var<uniform> params: Params;\n\n    @compute @workgroup_size(4, 4, 4)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride; \n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let zSize = params.zSize; \n        let workGroups = params.workGroups;\n        let kernelSize = params.kernelSize;\n        let kernelDepth = params.kernelDepth;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n        let outZ = global_id.z; \n\n        if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n            return;\n        }\n\n        let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n        let globalIdx = global_id.z * total_threads_per_slice + \n                        global_id.y * (workGroups.x * 4) + \n                        global_id.x;\n\n        let xy_radius: i32 = i32(kernelSize/2u);\n        let z_radius: i32 = i32(kernelDepth/2u);\n\n        var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n        var zOffset: i32 = 0;\n        if (xy_radius == 0){\n            xyOffset = -1;\n        }\n        if (z_radius == 0){\n            zOffset = -1;\n        }\n\n        var xSum: f32 = 0.0;\n        var ySum: f32 = 0.0;\n        var numSum: f32 = 0.0;\n\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { \n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                        let xI = firstData[newIdx];\n                        let yI = secondData[newIdx];\n                        xSum += xI;    \n                        ySum += yI;\n                        count ++;\n                    }\n                }\n            }\n        }\n\n        let N: f32 = f32(count);\n        let meanX = xSum / N;\n        let meanY = ySum / N;\n        \n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { \n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                        let xI = firstData[newIdx];\n                        let yI = secondData[newIdx];\n                        numSum += (xI - meanX) * (yI - meanY);\n                        count ++;\n                    }\n                }\n            }\n        }\n        outputData[globalIdx] = numSum/(N-1);;\n    }\n",em="\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        zStride: u32,\n        xSize: u32,\n        ySize: u32,\n        zSize: u32,\n        workGroups: vec3<u32>,\n        kernelSize: u32,\n        kernelDepth: u32\n    };\n    @group(0) @binding(0) var<storage, read> firstData: array<f32>;\n    @group(0) @binding(1) var<storage, read> secondData: array<f32>;\n    @group(0) @binding(2) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(3) var<uniform> params: Params;\n\n    @compute @workgroup_size(4, 4, 4)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride; \n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let zSize = params.zSize; \n        let workGroups = params.workGroups;\n        let kernelSize = params.kernelSize;\n        let kernelDepth = params.kernelDepth;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n        let outZ = global_id.z; \n\n        if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n            return;\n        }\n\n        let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n        let globalIdx = global_id.z * total_threads_per_slice + \n                        global_id.y * (workGroups.x * 4) + \n                        global_id.x;\n\n        let xy_radius: i32 = i32(kernelSize/2u);\n        let z_radius: i32 = i32(kernelDepth/2u);\n\n        var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n        var zOffset: i32 = 0;\n        if (xy_radius == 0){\n            xyOffset = -1;\n        }\n        if (z_radius == 0){\n            zOffset = -1;\n        }\n\n        var xSum: f32 = 0.0;\n        var ySum: f32 = 0.0;\n\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { \n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                        let xI = firstData[newIdx];\n                        let yI = secondData[newIdx];\n                        xSum += xI;    \n                        ySum += yI;\n                        count ++;\n                    }\n                }\n            }\n        }\n\n\n        let N: f32 = f32(count);\n        let meanX = xSum / N;\n        let meanY = ySum / N;\n        var numSum: f32 = 0;\n        var denomSum: f32 = 0;\n        \n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { \n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                        let xI = firstData[newIdx];\n                        let yI = secondData[newIdx];\n                        numSum += (xI - meanX)*(f32(yI) - meanY);\n                        denomSum += (f32(yI) - meanY)*(f32(yI) - meanY);\n                    }\n                }\n            }\n        }\n        outputData[globalIdx] = numSum/denomSum;;\n    }\n",ex="\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        zStride: u32,\n        xSize: u32,\n        ySize: u32,\n        zSize: u32,\n        reduceDim: u32,\n        reverse: u32,\n        workGroups: vec3<u32>,\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f32>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(4, 4, 4)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride; \n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let zSize = params.zSize; \n        let reverse = params.reverse;\n        let workGroups = params.workGroups;\n        let reduceDim = params.reduceDim;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n        let outZ = global_id.z; \n\n        if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n            return;\n        }\n        let totalSize: u32 = xSize * ySize * zSize;\n        var baseIdx = outZ * zStride + outY * yStride + outX * xStride;\n        var accum: f32 = 0;\n\n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // CUMSUM along Z\n            if (reverse == u32(1)){\n                baseIdx = (zSize - outZ - 1) * zStride + outY * yStride + outX * xStride;\n            }\n            for (var z: u32 = 0u; z < outZ; z++) {\n                var newZ: u32 = z;\n                if (reverse == u32(1)){\n                    newZ = zSize - z - 1;\n                }\n                let idx = newZ * zStride + outY * yStride + outX * xStride;\n                accum += inputData[idx];\n            }\n\n        } else if (reduceDim == 1u) { // CUMSUM along Y\n            if (reverse == u32(1)){\n                baseIdx = outZ * zStride + (ySize - outY - 1)* yStride + outX * xStride;\n            }\n            for (var y: u32 = 0u; y < outY; y++) {\n                var newY: u32 = y;\n                if (reverse == u32(1)){\n                    newY = ySize - y - 1;\n                }\n                let idx = outZ * zStride + newY * yStride + outX * xStride;\n                accum += inputData[idx];\n            }\n        } else { // CUMSUM along X\n             if (reverse == u32(1)){\n                baseIdx = outZ * zStride + outY* yStride + (xSize - outX - 1) * xStride;\n            }\n            for (var x: u32 = 0u; x < outX; x++) {\n                var newX: u32 = x;\n                if (reverse == u32(1)){\n                    newX = xSize - x - 1;\n                }\n                let idx = outZ * zStride + outY * yStride + newX * xStride;\n                accum += inputData[idx];\n            }\n        }\n            outputData[baseIdx] = accum;\n    }\n",ep="\n    struct Params {\n        zStride: u32,\n        yStride: u32,\n        xStride: u32,\n        xSize: u32,\n        ySize: u32,\n        reduceDim: u32,\n        dimLength: u32,\n    };\n    @group(0) @binding(0) var<storage, read> firstData: array<f32>;\n    @group(0) @binding(1) var<storage, read> secondData: array<f32>;\n    @group(0) @binding(2) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(3) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let reduceDim = params.reduceDim;\n        let dimLength = params.dimLength;\n                        \n        let outX = global_id.y;\n        let outY = global_id.x;\n        \n        if (outX >= xSize || outY >= ySize) {\n            return;\n        }\n\n        var xSum: f32 = 0.0;\n        var xxSum: f32 = 0.0;\n        var ySum: f32 = 0.0;\n        var yySum: f32 = 0.0;\n        var xySum: f32 = 0.0;\n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let xI = firstData[inputIndex];\n                let yI = secondData[inputIndex];\n                xSum += xI;\n                xxSum += xI * xI;\n                ySum += yI;\n                yySum += yI * yI;\n                xySum += xI * yI;\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let xI = firstData[inputIndex];\n                let yI = secondData[inputIndex];\n                xSum += xI;\n                xxSum += xI * xI;\n                ySum += yI;\n                yySum += yI * yI;\n                xySum += xI * yI;\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let xI = firstData[inputIndex];\n                let yI = secondData[inputIndex];\n                xSum += xI;\n                xxSum += xI * xI;\n                ySum += yI;\n                yySum += yI * yI;\n                xySum += xI * yI;\n            }\n        }\n\n        let N: f32 = f32(dimLength);\n        let meanX = xSum / N;\n        let meanY = ySum / N;\n        let varX = (xxSum / N) - (meanX * meanX);\n        let varY = (yySum / N) - (meanY * meanY);\n        let covXY = (xySum / N) - (meanX * meanY);\n        let sigmaX = sqrt(max(0.0, varX));\n        let sigmaY = sqrt(max(0.0, varY));\n        let epsilon = 1e-6;\n        let denominator = sigmaX * sigmaY + epsilon;\n        let correlation = covXY / denominator;\n\n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = correlation;\n    }\n",ey="\n    enable f16;\n    struct Params {\n        zStride: u32,\n        yStride: u32,\n        xStride: u32,\n        xSize: u32,\n        ySize: u32,\n        reduceDim: u32,\n        dimLength: u32,\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f16>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f16>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let reduceDim = params.reduceDim;\n        let dimLength = params.dimLength;\n                        \n        let outX = global_id.y;\n        let outY = global_id.x;\n        \n        if (outX >= xSize || outY >= ySize) {\n            return;\n        }\n",eS="\n    ".concat(ey,"\n        var sum: f32 = 0.0;\n        \n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                sum += f32(inputData[inputIndex]);\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                sum += f32(inputData[inputIndex]);\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                sum += f32(inputData[inputIndex]);\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = f16(sum / f32(dimLength));\n    }\n"),eg="\n    ".concat(ey,"\n        var min: f32 = 1e12;\n        \n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let newMin = f32(inputData[inputIndex]);\n                if (newMin < min) {\n                    min = newMin;\n                }\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let newMin = f32(inputData[inputIndex]);\n                if (newMin < min) {\n                    min = newMin;\n                }\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let newMin = f32(inputData[inputIndex]);\n                if (newMin < min) {\n                    min = newMin;\n                }\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = f16(min);\n    }\n"),ev="\n    ".concat(ey,"\n        \n        var max: f32 = -1e12;\n        \n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let newMax = f32(inputData[inputIndex]);\n                if (newMax > max) {\n                    max = newMax;\n                }\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let newMax = f32(inputData[inputIndex]);\n                if (newMax > max) {\n                    max = newMax;\n                }\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let newMax = f32(inputData[inputIndex]);\n                if (newMax > max) {\n                    max = newMax;\n                }\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = f16(max);\n    }\n"),ez="\n    ".concat(ey,"\n        var sum: f32 = 0.0;\n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                sum += f32(inputData[inputIndex]);\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                sum += f32(inputData[inputIndex]);\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                sum += f32(inputData[inputIndex]);\n            }\n        }\n        \n        let mean: f32 = sum / f32(dimLength);\n\n        var squaredDiffSum: f32 = 0.0;\n\n        // Iterate along the dimension again\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let diff: f32 = mean - f32(inputData[inputIndex]);\n                squaredDiffSum += diff*diff;\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let diff: f32 = mean - f32(inputData[inputIndex]);\n                squaredDiffSum += diff*diff;\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let diff: f32 = mean - f32(inputData[inputIndex]);\n                squaredDiffSum += diff*diff;\n            }\n        }\n\n        let stDev: f32 = sqrt(squaredDiffSum / f32(dimLength));\n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = f16(stDev);\n    }\n"),eh="\n    enable f16;\n    struct Params {\n        zStride: u32,\n        yStride: u32,\n        xStride: u32,\n        xSize: u32,\n        ySize: u32,\n        reduceDim: u32,\n        dimLength: u32,\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f16>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let reduceDim = params.reduceDim;\n        let dimLength = params.dimLength;\n                        \n        let outX = global_id.y;\n        let outY = global_id.x;\n        \n        if (outX >= xSize || outY >= ySize) {\n            return;\n        }\n        \n        var accum: f32 = 0;\n        \n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                accum += f32(inputData[inputIndex]);\n                \n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                accum += f32(inputData[inputIndex]);\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                accum += f32(inputData[inputIndex]);\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = accum;\n    }\n",eb="\n    ".concat(ey,"\n        let meanY: f32 = f32(dimLength)/2;\n        var sum: f32 = 0.0;\n\n\n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                sum += f32(inputData[inputIndex]);\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                sum += f32(inputData[inputIndex]);\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                sum += f32(inputData[inputIndex]);\n            }\n        }\n        \n        let meanX: f32 = sum / f32(dimLength);\n        var numSum: f32 = 0;\n        var denomSum: f32 = 0;\n\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let xi: f32 = f32(inputData[inputIndex]);\n                numSum += (xi - meanX)*(f32(z) - meanY);\n                denomSum += (f32(z) - meanY)*(f32(z) - meanY);\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let xi: f32 = f32(inputData[inputIndex]);\n                numSum += (xi - meanX)*(f32(y) - meanY);\n                denomSum += (f32(y) - meanY)*(f32(y) - meanY);\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let xi: f32 = f32(inputData[inputIndex]);\n                numSum += (xi - meanX)*(f32(x) - meanY);\n                denomSum += (f32(x) - meanY)*(f32(x) - meanY);\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = f16(numSum/denomSum);\n    }\n"),e_="\n    enable f16;\n    struct Params {\n    zStride: u32,\n    yStride: u32,\n    xStride: u32,\n    xSize: u32,\n    ySize: u32,\n    reduceDim: u32,\n    dimLength: u32,\n    };\n    @group(0) @binding(0) var<storage, read> firstData: array<f16>;\n    @group(0) @binding(1) var<storage, read> secondData: array<f16>;\n    @group(0) @binding(2) var<storage, read_write> outputData: array<f16>;\n    @group(0) @binding(3) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let reduceDim = params.reduceDim;\n        let dimLength = params.dimLength;\n                        \n        let outX = global_id.y;\n        let outY = global_id.x;\n        \n        if (outX >= xSize || outY >= ySize) {\n            return;\n        }\n\n        var ySum: f32 = 0;\n        var xSum: f32 = 0.0;\n\n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { \n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                xSum += f32(firstData[inputIndex]);\n                ySum += f32(secondData[inputIndex]);\n            }\n        } else if (reduceDim == 1u) { \n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                xSum += f32(firstData[inputIndex]);\n                ySum += f32(secondData[inputIndex]);\n            }\n        } else { \n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                xSum += f32(firstData[inputIndex]);\n                ySum += f32(secondData[inputIndex]);\n            }\n        }\n        \n        let xMean: f32 = xSum / f32(dimLength);\n        let yMean: f32 = ySum / f32(dimLength);\n        var numSum: f32 = 0;\n        var denomSum: f32 = 0;\n\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let xi: f32 = f32(firstData[inputIndex]);\n                let yi: f32 = f32(secondData[inputIndex]);\n                numSum += (xi - xMean)*(f32(yi) - yMean);\n                denomSum += (f32(yi) - yMean)*(f32(yi) - yMean);\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let xi: f32 = f32(firstData[inputIndex]);\n                let yi: f32 = f32(secondData[inputIndex]);\n                numSum += (xi - xMean)*(f32(yi) - yMean);\n                denomSum += (f32(yi) - yMean)*(f32(yi) - yMean);\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let xi: f32 = f32(firstData[inputIndex]);\n                let yi: f32 = f32(secondData[inputIndex]);\n                numSum += (xi - xMean)*(f32(yi) - yMean);\n                denomSum += (f32(yi) - yMean)*(f32(yi) - yMean);\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = f16(numSum/(denomSum+1e-4));\n    }\n",ew="\n    enable f16;\n    struct Params {\n    zStride: u32,\n    yStride: u32,\n    xStride: u32,\n    xSize: u32,\n    ySize: u32,\n    reduceDim: u32,\n    dimLength: u32,\n    };\n    @group(0) @binding(0) var<storage, read> firstData: array<f16>;\n    @group(0) @binding(1) var<storage, read> secondData: array<f16>;\n    @group(0) @binding(2) var<storage, read_write> outputData: array<f16>;\n    @group(0) @binding(3) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let reduceDim = params.reduceDim;\n        let dimLength = params.dimLength;\n                        \n        let outX = global_id.y;\n        let outY = global_id.x;\n        \n        if (outX >= xSize || outY >= ySize) {\n            return;\n        }\n        var ySum: f32 = 0;\n        var xSum: f32 = 0.0;\n        var numSum: f32 = 0;\n\n       // Calculate base coordinate and stride for the dimension we're iterating over\n        var baseCoord: u32;\n        var iterStride: u32;\n\n        if (reduceDim == 0u) {\n            baseCoord = outX * xStride + outY * yStride;\n            iterStride = zStride;\n        } else if (reduceDim == 1u) {\n            baseCoord = outX * xStride + outY * zStride;\n            iterStride = yStride;\n        } else {\n            baseCoord = outX * yStride + outY * zStride;\n            iterStride = xStride;\n        }\n\n        // Single pass: calculate sums, means, and covariance\n        for (var i: u32 = 0u; i < dimLength; i++) {\n            let inputIndex = baseCoord + (i * iterStride);\n            let xi: f32 = f32(firstData[inputIndex]);\n            let yi: f32 = f32(secondData[inputIndex]);\n            xSum += xi;\n            ySum += yi;\n        }\n\n        let xMean: f32 = xSum / f32(dimLength);\n        let yMean: f32 = ySum / f32(dimLength);\n\n        // Second pass for covariance calculation\n        for (var i: u32 = 0u; i < dimLength; i++) {\n            let inputIndex = baseCoord + (i * iterStride);\n            let xi: f32 = f32(firstData[inputIndex]);\n            let yi: f32 = f32(secondData[inputIndex]);\n            numSum += (xi - xMean) * (yi - yMean);\n        }\n\n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = f16(numSum / (f32(dimLength) - 1));\n    }\n",ek="\n    enable f16;\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        zStride: u32,\n        xSize: u32,\n        ySize: u32,\n        zSize: u32,\n        workGroups: vec3<u32>,\n        kernelSize: u32,\n        kernelDepth: u32\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f16>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f16>;\n    @group(0) @binding(2) var<uniform> params: Params;\n    \n    @compute @workgroup_size(4, 4, 4)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride; \n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let zSize = params.zSize; \n        let workGroups = params.workGroups;\n        let kernelSize = params.kernelSize;\n        let kernelDepth = params.kernelDepth;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n        let outZ = global_id.z; \n\n        if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n            return;\n        }\n\n        let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n        let globalIdx = global_id.z * total_threads_per_slice + \n                        global_id.y * (workGroups.x * 4) + \n                        global_id.x;\n\n        let xy_radius: i32 = i32(kernelSize/2u);\n        let z_radius: i32 = i32(kernelDepth/2u);\n\n        var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n        var zOffset: i32 = 0;\n        if (xy_radius == 0){\n            xyOffset = -1;\n        }\n        if (z_radius == 0){\n            zOffset = -1;\n        }\n",eD="\n    enable f16;\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        xSize: u32,\n        ySize: u32,\n        kernelSize: u32,\n        kernelDepth: u32\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f16>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f16>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>,) {\n        let xStride = params.xStride; \n        let yStride = params.yStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let kernelSize = params.kernelSize;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n\n        if (outX >= xSize|| outY >= ySize) {\n            return;\n        }\n\n        let globalIdx = outY * xSize + outX;\n        let thisVal = inputData[globalIdx];\n        let isNaN: bool = thisVal != thisVal;\n        if (isNaN){\n            outputData[globalIdx] = thisVal;\n            return;\n        }   \n\n        let xy_radius: i32 = i32(kernelSize/2u);\n\n",eI="\n        ".concat(ek,"    \n        var sum: f32 = 0.0;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                        sum += f32(inputData[u32(newIdx)]);\n                        count ++;\n                    }\n                }\n            }\n        }\n        outputData[globalIdx] = f16(sum / f32(count));\n    }\n"),eC="\n    ".concat(ek,"  \n        var minVal: f32 = 1e12;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                        let sampledVal = f32(inputData[u32(newIdx)]);\n                        if (sampledVal < minVal){\n                            minVal = sampledVal;\n                        }\n                    }\n                }\n            }\n        }\n        \n        outputData[globalIdx] = f16(minVal);\n    }\n"),eM="\n    ".concat(ek,"  \n\n        var maxVal: f32 = -1e12;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                        let sampledVal = f32(inputData[u32(newIdx)]);\n                        if (sampledVal > maxVal){\n                            maxVal = sampledVal;\n                        }\n                    }\n                }\n            }\n        }\n        outputData[globalIdx] = f16(maxVal);\n    }\n"),eO="\n    ".concat(ek,"  \n        var sum: f32 = 0.0;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                        sum += f32(inputData[u32(newIdx)]);\n                        count ++;\n                    }\n                }\n            }\n        }\n        \n        let mean: f32 = sum / f32(count);\n\n        var squaredDiffSum: f32 = 0.0;\n\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                        let diff: f32 = mean - f32(inputData[u32(newIdx)]);\n                        squaredDiffSum += diff*diff;\n                    }\n                }\n            }\n        }\n\n        let stDev: f32 = sqrt(squaredDiffSum / f32(count));\n\n        outputData[globalIdx] = f16(stDev);\n    }\n"),eP="\n        ".concat(eD,"    \n        var sum: f32 = 0;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius; kx <= xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius; ky <= xy_radius; ky++) {\n                let in_coord = vec2<i32>(i32(global_id.x), i32(global_id.y)) + vec2<i32>(kx, ky);\n                if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                    in_coord.y >= 0 && in_coord.y < i32(ySize)) { //Ensure the sampled point is within 3D dataspace\n                    let xOffset = kx * i32(xStride);\n                    let yOffset = ky * i32(yStride);\n                    let newIdx = i32(globalIdx) + xOffset + yOffset;\n                    let newVal = f32(inputData[u32(newIdx)]);\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    sum += newVal;\n                    count ++;\n                }\n            }\n        }\n        outputData[globalIdx] = f16(sum / f32(count));\n    }\n"),eY="\n    ".concat(eD,"   \n        var minVal: f32 = 1e12;\n        for (var kx: i32 = -xy_radius; kx <= xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius; ky <= xy_radius; ky++) {\n                let in_coord = vec2<i32>(i32(global_id.x), i32(global_id.y)) + vec2<i32>(kx, ky);\n                if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                    in_coord.y >= 0 && in_coord.y < i32(ySize)) { //Ensure the sampled point is within 3D dataspace\n                    let xOffset = kx * i32(xStride);\n                    let yOffset = ky * i32(yStride);\n                    let newIdx = i32(globalIdx) + xOffset + yOffset;\n                    let newVal = f32(inputData[u32(newIdx)]);\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    if (newVal < minVal){\n                        minVal = newVal;\n                    }\n                }\n            }\n        }\n        outputData[globalIdx] = f16(minVal);\n    }\n"),eB="\n    ".concat(eD,"  \n        var maxVal: f32 = -1e12;\n        for (var kx: i32 = -xy_radius; kx <= xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius; ky <= xy_radius; ky++) {\n                let in_coord = vec2<i32>(i32(global_id.x), i32(global_id.y)) + vec2<i32>(kx, ky);\n                if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                    in_coord.y >= 0 && in_coord.y < i32(ySize)) { //Ensure the sampled point is within 3D dataspace\n                    let xOffset = kx * i32(xStride);\n                    let yOffset = ky * i32(yStride);\n                    let newIdx = i32(globalIdx) + xOffset + yOffset;\n                    let newVal = f32(inputData[u32(newIdx)]);\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    if (newVal > maxVal){\n                        maxVal = newVal;\n                    }\n                }\n            }\n        }\n        outputData[globalIdx] = f16(maxVal);\n    }\n"),ej="\n     ".concat(eD,"  \n        var sum: f32 = 0.;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius; kx <= xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius; ky <= xy_radius; ky++) {\n                let in_coord = vec2<i32>(i32(global_id.x), i32(global_id.y)) + vec2<i32>(kx, ky);\n                if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                    in_coord.y >= 0 && in_coord.y < i32(ySize)) { //Ensure the sampled point is within 3D dataspace\n                    let xOffset = kx * i32(xStride);\n                    let yOffset = ky * i32(yStride);\n                    let newIdx = i32(globalIdx) + xOffset + yOffset;\n                    let newVal = f32(inputData[u32(newIdx)]);\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    sum += newVal;\n                    count ++;\n                }\n            }\n        }\n        \n        let mean: f32 = sum / f32(count);\n\n        var squaredDiffSum: f32 = 0.0;\n\n        for (var kx: i32 = -xy_radius; kx <= xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius; ky <= xy_radius; ky++) {\n                let in_coord = vec2<i32>(i32(global_id.x), i32(global_id.y)) + vec2<i32>(kx, ky);\n                if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                    in_coord.y >= 0 && in_coord.y < i32(ySize)) { //Ensure the sampled point is within 3D dataspace\n                    let xOffset = kx * i32(xStride);\n                    let yOffset = ky * i32(yStride);\n                    let newIdx = i32(globalIdx) + xOffset + yOffset;\n                    let newVal = f32(inputData[u32(newIdx)]);\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    let diff: f32 = mean - newVal;\n                    squaredDiffSum += diff*diff;\n                }\n            }\n        }\n        let stDev: f32 = sqrt(squaredDiffSum / f32(count));\n\n        outputData[globalIdx] = f16(stDev);\n    }\n"),eA="\n    enable f16;\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        zStride: u32,\n        xSize: u32,\n        ySize: u32,\n        zSize: u32,\n        workGroups: vec3<u32>,\n        kernelSize: u32,\n        kernelDepth: u32\n    };\n    @group(0) @binding(0) var<storage, read> firstData: array<f16>;\n    @group(0) @binding(1) var<storage, read> secondData: array<f16>;\n    @group(0) @binding(2) var<storage, read_write> outputData: array<f16>;\n    @group(0) @binding(3) var<uniform> params: Params;\n\n    @compute @workgroup_size(4, 4, 4)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride; \n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let zSize = params.zSize; \n        let workGroups = params.workGroups;\n        let kernelSize = params.kernelSize;\n        let kernelDepth = params.kernelDepth;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n        let outZ = global_id.z; \n\n        if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n            return;\n        }\n\n        let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n        let globalIdx = global_id.z * total_threads_per_slice + \n                        global_id.y * (workGroups.x * 4) + \n                        global_id.x;\n\n        let xy_radius: i32 = i32(kernelSize/2u);\n        let z_radius: i32 = i32(kernelDepth/2u);\n\n        var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n        var zOffset: i32 = 0;\n        if (xy_radius == 0){\n            xyOffset = -1;\n        }\n        if (z_radius == 0){\n            zOffset = -1;\n        }\n\n        var xSum: f32 = 0.0;\n        var xxSum: f32 = 0.0;\n        var ySum: f32 = 0.0;\n        var yySum: f32 = 0.0;\n        var xySum: f32 = 0.0;\n\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                        let xI = f32(firstData[newIdx]);\n                        let yI = f32(secondData[newIdx]);\n                        xSum += xI;\n                        xxSum += xI * xI;\n                        ySum += yI;\n                        yySum += yI * yI;\n                        xySum += xI * yI;\n                        count ++;\n                    }\n                }\n            }\n        }\n\n        let N: f32 = f32(count);\n        let meanX = xSum / N;\n        let meanY = ySum / N;\n        let varX = (xxSum / N) - (meanX * meanX);\n        let varY = (yySum / N) - (meanY * meanY);\n        let covXY = (xySum / N) - (meanX * meanY);\n        let sigmaX = sqrt(max(0.0, varX));\n        let sigmaY = sqrt(max(0.0, varY));\n        let epsilon = 1e-6;\n        let denominator = sigmaX * sigmaY + epsilon;\n        let correlation = covXY / denominator;\n\n        outputData[globalIdx] = f16(correlation);\n    }\n",eL="\n    enable f16;\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        zStride: u32,\n        xSize: u32,\n        ySize: u32,\n        zSize: u32,\n        workGroups: vec3<u32>,\n        kernelSize: u32,\n        kernelDepth: u32\n    };\n    @group(0) @binding(0) var<storage, read> firstData: array<f16>;\n    @group(0) @binding(1) var<storage, read> secondData: array<f16>;\n    @group(0) @binding(2) var<storage, read_write> outputData: array<f16>;\n    @group(0) @binding(3) var<uniform> params: Params;\n\n    @compute @workgroup_size(4, 4, 4)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride; \n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let zSize = params.zSize; \n        let workGroups = params.workGroups;\n        let kernelSize = params.kernelSize;\n        let kernelDepth = params.kernelDepth;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n        let outZ = global_id.z; \n\n        if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n            return;\n        }\n\n        let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n        let globalIdx = global_id.z * total_threads_per_slice + \n                        global_id.y * (workGroups.x * 4) + \n                        global_id.x;\n\n        let xy_radius: i32 = i32(kernelSize/2u);\n        let z_radius: i32 = i32(kernelDepth/2u);\n\n        var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n        var zOffset: i32 = 0;\n        if (xy_radius == 0){\n            xyOffset = -1;\n        }\n        if (z_radius == 0){\n            zOffset = -1;\n        }\n\n        var xSum: f32 = 0.0;\n        var ySum: f32 = 0.0;\n        var numSum: f32 = 0.0;\n\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { \n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                        let xI = f32(firstData[newIdx]);\n                        let yI = f32(secondData[newIdx]);\n                        xSum += xI;    \n                        ySum += yI;\n                        count ++;\n                    }\n                }\n            }\n        }\n\n        let N: f32 = f32(count);\n        let meanX = xSum / N;\n        let meanY = ySum / N;\n        \n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { \n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                        let xI = f32(firstData[newIdx]);\n                        let yI = f32(secondData[newIdx]);\n                        numSum += (xI - meanX) * (yI - meanY);\n                        count ++;\n                    }\n                }\n            }\n        }\n        outputData[globalIdx] = f16(numSum/(N-1));\n    }\n",eX="\n    enable f16;\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        zStride: u32,\n        xSize: u32,\n        ySize: u32,\n        zSize: u32,\n        workGroups: vec3<u32>,\n        kernelSize: u32,\n        kernelDepth: u32\n    };\n    @group(0) @binding(0) var<storage, read> firstData: array<f16>;\n    @group(0) @binding(1) var<storage, read> secondData: array<f16>;\n    @group(0) @binding(2) var<storage, read_write> outputData: array<f16>;\n    @group(0) @binding(3) var<uniform> params: Params;\n\n    @compute @workgroup_size(4, 4, 4)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride; \n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let zSize = params.zSize; \n        let workGroups = params.workGroups;\n        let kernelSize = params.kernelSize;\n        let kernelDepth = params.kernelDepth;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n        let outZ = global_id.z; \n\n        if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n            return;\n        }\n\n        let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n        let globalIdx = global_id.z * total_threads_per_slice + \n                        global_id.y * (workGroups.x * 4) + \n                        global_id.x;\n\n        let xy_radius: i32 = i32(kernelSize/2u);\n        let z_radius: i32 = i32(kernelDepth/2u);\n\n        var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n        var zOffset: i32 = 0;\n        if (xy_radius == 0){\n            xyOffset = -1;\n        }\n        if (z_radius == 0){\n            zOffset = -1;\n        }\n\n        var xSum: f32 = 0.0;\n        var ySum: f32 = 0.0;\n\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { \n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                        let xI = f32(firstData[newIdx]);\n                        let yI = f32(secondData[newIdx]);\n                        xSum += xI;    \n                        ySum += yI;\n                        count ++;\n                    }\n                }\n            }\n        }\n\n\n        let N: f32 = f32(count);\n        let meanX = xSum / N;\n        let meanY = ySum / N;\n        var numSum: f32 = 0;\n        var denomSum: f32 = 0;\n        \n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { \n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                        let xI = f32(firstData[newIdx]);\n                        let yI = f32(secondData[newIdx]);\n                        numSum += (xI - meanX)*(f32(yI) - meanY);\n                        denomSum += (f32(yI) - meanY)*(f32(yI) - meanY);\n                    }\n                }\n            }\n        }\n        outputData[globalIdx] = f16(numSum/denomSum);\n    }\n",eU="\n    enable f16;\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        zStride: u32,\n        xSize: u32,\n        ySize: u32,\n        zSize: u32,\n        reduceDim: u32,\n        reverse: u32,\n        workGroups: vec3<u32>,\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f16>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(4, 4, 4)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride; \n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let zSize = params.zSize; \n        let reverse = params.reverse;\n        let workGroups = params.workGroups;\n        let reduceDim = params.reduceDim;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n        let outZ = global_id.z; \n\n        if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n            return;\n        }\n        let totalSize: u32 = xSize * ySize * zSize;\n        var baseIdx = outZ * zStride + outY * yStride + outX * xStride;\n        var accum: f32 = 0;\n\n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // CUMSUM along Z\n            if (reverse == u32(1)){\n                baseIdx = (zSize - outZ - 1) * zStride + outY * yStride + outX * xStride;\n            }\n            for (var z: u32 = 0u; z < outZ; z++) {\n                var newZ: u32 = z;\n                if (reverse == u32(1)){\n                    newZ = zSize - z - 1;\n                }\n                let idx = newZ * zStride + outY * yStride + outX * xStride;\n                accum += f32(inputData[idx]);\n            }\n\n        } else if (reduceDim == 1u) { // CUMSUM along Y\n            if (reverse == u32(1)){\n                baseIdx = outZ * zStride + (ySize - outY - 1)* yStride + outX * xStride;\n            }\n            for (var y: u32 = 0u; y < outY; y++) {\n                var newY: u32 = y;\n                if (reverse == u32(1)){\n                    newY = ySize - y - 1;\n                }\n                let idx = outZ * zStride + newY * yStride + outX * xStride;\n                accum += f32(inputData[idx]);\n            }\n        } else { // CUMSUM along X\n             if (reverse == u32(1)){\n                baseIdx = outZ * zStride + outY* yStride + (xSize - outX - 1) * xStride;\n            }\n            for (var x: u32 = 0u; x < outX; x++) {\n                var newX: u32 = x;\n                if (reverse == u32(1)){\n                    newX = xSize - x - 1;\n                }\n                let idx = outZ * zStride + outY * yStride + newX * xStride;\n                accum += f32(inputData[idx]);\n            }\n        }\n            outputData[baseIdx] = accum;\n    }\n",eV="\n    enable f16;\n    struct Params {\n        zStride: u32,\n        yStride: u32,\n        xStride: u32,\n        xSize: u32,\n        ySize: u32,\n        reduceDim: u32,\n        dimLength: u32,\n    };\n    @group(0) @binding(0) var<storage, read> firstData: array<f16>;\n    @group(0) @binding(1) var<storage, read> secondData: array<f16>;\n    @group(0) @binding(2) var<storage, read_write> outputData: array<f16>;\n    @group(0) @binding(3) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let reduceDim = params.reduceDim;\n        let dimLength = params.dimLength;\n                        \n        let outX = global_id.y;\n        let outY = global_id.x;\n        \n        if (outX >= xSize || outY >= ySize) {\n            return;\n        }\n\n        var xSum: f32 = 0.0;\n        var xxSum: f32 = 0.0;\n        var ySum: f32 = 0.0;\n        var yySum: f32 = 0.0;\n        var xySum: f32 = 0.0;\n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let xI = f32(firstData[inputIndex]);\n                let yI = f32(secondData[inputIndex]);\n                xSum += xI;\n                xxSum += xI * xI;\n                ySum += yI;\n                yySum += yI * yI;\n                xySum += xI * yI;\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let xI = f32(firstData[inputIndex]);\n                let yI = f32(secondData[inputIndex]);\n                xSum += xI;\n                xxSum += xI * xI;\n                ySum += yI;\n                yySum += yI * yI;\n                xySum += xI * yI;\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let xI = f32(firstData[inputIndex]);\n                let yI = f32(secondData[inputIndex]);\n                xSum += xI;\n                xxSum += xI * xI;\n                ySum += yI;\n                yySum += yI * yI;\n                xySum += xI * yI;\n            }\n        }\n\n        let N: f32 = f32(dimLength);\n        let meanX = xSum / N;\n        let meanY = ySum / N;\n        let varX = (xxSum / N) - (meanX * meanX);\n        let varY = (yySum / N) - (meanY * meanY);\n        let covXY = (xySum / N) - (meanX * meanY);\n        let sigmaX = sqrt(max(0.0, varX));\n        let sigmaY = sqrt(max(0.0, varY));\n        let epsilon = 1e-6;\n        let denominator = sigmaX * sigmaY + epsilon;\n        let correlation = covXY / denominator;\n\n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = f16(correlation);\n    }\n",eN={Mean:"MeanReduction",Min:"MinReduction",Max:"MaxReduction",StDev:"StDevReduction",CUMSUM:"CUMSUMReduction",LinearSlope:"LinearSlopeReduction"},eT={Mean:"MeanConvolution",Min:"MinConvolution",Max:"MaxConvolution",StDev:"StDevConvolution"},eG={Mean:"MeanConvolution2D",Min:"MinConvolution2D",Max:"MaxConvolution2D",StDev:"StDevConvolution2D"},eE={Correlation2D:"Correlation2D",Correlation3D:"CorrelationConvolution",TwoVarLinearSlope2D:"TwoVarLinearSlopeReduction",TwoVarLinearSlope3D:"TwoVarLinearSlopeConvolution",Covariance2D:"CovarianceReduction",Covariance3D:"CovarianceConvolution"};async function eR(e,n,t,a){var o;let l=await (null==(o=navigator.gpu)?void 0:o.requestAdapter()),u=!!l&&l.features.has("shader-f16"),s=u?await (null==l?void 0:l.requestDevice({requiredFeatures:["shader-f16"]})):await (null==l?void 0:l.requestDevice());if(!s)return void Error("need a browser that supports WebGPU");let{strides:d,shape:f}=n,[c,m,x]=d,p=f.filter((e,n)=>n!=t),y=f[t],S=p[0]*p[1],g=p.map(e=>Math.ceil(e/16)),v=(u?i:r)[eN[a]],z=s.createShaderModule({label:"reduction compute module",code:v}),h=s.createComputePipeline({label:"reduction compute pipeline",layout:"auto",compute:{module:z}}),b=(0,F.Wu)(v),_=(0,F.FE)(b.uniforms.params);_.set({zStride:c,yStride:m,xStride:x,xSize:p[1],ySize:p[0],reduceDim:t,dimLength:y});let w=s.createBuffer({label:"Input Buffer",size:e.byteLength*(u?1:2),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),k=s.createBuffer({label:"Output Buffer",size:S*(u?2:4),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),D=s.createBuffer({size:_.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),I=s.createBuffer({label:"Output Buffer",size:S*(u?2:4),usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});s.queue.writeBuffer(w,0,u?e:new Float32Array(e)),s.queue.writeBuffer(D,0,_.arrayBuffer);let C=s.createBindGroup({layout:h.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:w}},{binding:1,resource:{buffer:k}},{binding:2,resource:{buffer:D}}]}),M=s.createCommandEncoder({label:"reduction encoder"}),O=M.beginComputePass({label:"reduction compute pass"});O.setPipeline(h),O.setBindGroup(0,C),O.dispatchWorkgroups(g[0],g[1]),O.end(),M.copyBufferToBuffer(k,0,I,0,S*(u?2:4)),s.queue.submit([M.finish()]),await I.mapAsync(GPUMapMode.READ);let P=I.getMappedRange(),Y=new Float16Array(u?P.slice():new Float32Array(P.slice()));return I.unmap(),Y}async function eF(e,n,t,a){var o;let l=await (null==(o=navigator.gpu)?void 0:o.requestAdapter()),u=!!l&&l.features.has("shader-f16"),s=u?await (null==l?void 0:l.requestDevice({requiredFeatures:["shader-f16"],requiredLimits:{maxBufferSize:0x7a0a1efc,maxStorageBufferBindingSize:0x7a0a1efc}})):await (null==l?void 0:l.requestDevice({requiredLimits:{maxBufferSize:0x7a0a1efc,maxStorageBufferBindingSize:0x7a0a1efc}}));if(!s)return void Error("need a browser that supports WebGPU");let{kernelDepth:d,kernelSize:f}=a,{strides:c,shape:m}=n,x=m[0]*m[1]*m[2],[p,y,S]=c,g=m.map(e=>Math.ceil(e/4)),v=(u?i:r)[eT[t]],z=s.createShaderModule({label:"convolution compute module",code:v}),h=s.createComputePipeline({label:"convolution compute pipeline",layout:"auto",compute:{module:z}}),b=(0,F.Wu)(v),_=(0,F.FE)(b.uniforms.params);_.set({xStride:S,yStride:y,zStride:p,xSize:m[2],ySize:m[1],zSize:m[0],workGroups:[g[2],g[1],g[0]],kernelDepth:d,kernelSize:f});let w=s.createBuffer({label:"Input Buffer",size:e.byteLength*(u?1:2),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),k=s.createBuffer({label:"Output Buffer",size:x*(u?2:4),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),D=s.createBuffer({label:"Uniform Buffer",size:_.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),I=s.createBuffer({label:"Read Buffer",size:x*(u?2:4),usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});s.queue.writeBuffer(w,0,u?e:new Float32Array(e)),s.queue.writeBuffer(D,0,_.arrayBuffer);let C=s.createBindGroup({layout:h.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:w}},{binding:1,resource:{buffer:k}},{binding:2,resource:{buffer:D}}]}),M=s.createCommandEncoder({label:"convolution encoder"}),O=M.beginComputePass({label:"convolution compute pass"});O.setPipeline(h),O.setBindGroup(0,C),O.dispatchWorkgroups(g[2],g[1],g[0]),O.end(),M.copyBufferToBuffer(k,0,I,0,x*(u?2:4)),s.queue.submit([M.finish()]),await I.mapAsync(GPUMapMode.READ);let P=I.getMappedRange(),Y=new Float16Array(u?P.slice():new Float32Array(P.slice()));return I.unmap(),Y}async function eq(e,n,t,a,o){var l;let u=await (null==(l=navigator.gpu)?void 0:l.requestAdapter()),s=!!u&&u.features.has("shader-f16"),d=s?await (null==u?void 0:u.requestDevice({requiredFeatures:["shader-f16"],requiredLimits:{maxBufferSize:0x7a0a1efc,maxStorageBufferBindingSize:0x7a0a1efc}})):await (null==u?void 0:u.requestDevice({requiredLimits:{maxBufferSize:0x7a0a1efc,maxStorageBufferBindingSize:0x7a0a1efc}}));if(!d)return void Error("need a browser that supports WebGPU");let{strides:f,shape:c}=t,[m,x,p]=f,y=c.filter((e,n)=>n!=a),S=c[a],g=y[0]*y[1],v=y.map(e=>Math.ceil(e/16)),z=(s?i:r)[eE[o]],h=d.createShaderModule({label:"Multivariate2D compute module",code:z}),b=d.createComputePipeline({label:"Multivariate2D compute pipeline",layout:"auto",compute:{module:h}}),_=(0,F.Wu)(z),w=(0,F.FE)(_.uniforms.params);w.set({zStride:m,yStride:x,xStride:p,xSize:y[1],ySize:y[0],reduceDim:a,dimLength:S});let k=d.createBuffer({label:"First Input Buffer",size:e.byteLength*(s?1:2),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),D=d.createBuffer({label:"Second Input Buffer",size:n.byteLength*(s?1:2),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),I=d.createBuffer({label:"Output Buffer",size:g*(s?2:4),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),C=d.createBuffer({size:w.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),M=d.createBuffer({label:"Output Buffer",size:g*(s?2:4),usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});d.queue.writeBuffer(k,0,s?e:new Float32Array(e)),d.queue.writeBuffer(D,0,s?n:new Float32Array(n)),d.queue.writeBuffer(C,0,w.arrayBuffer);let O=d.createBindGroup({layout:b.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:k}},{binding:1,resource:{buffer:D}},{binding:2,resource:{buffer:I}},{binding:3,resource:{buffer:C}}]}),P=d.createCommandEncoder({label:"Multivariate2D encoder"}),Y=P.beginComputePass({label:"Multivariate2D compute pass"});Y.setPipeline(b),Y.setBindGroup(0,O),Y.dispatchWorkgroups(v[0],v[1]),Y.end(),P.copyBufferToBuffer(I,0,M,0,g*(s?2:4)),d.queue.submit([P.finish()]),await M.mapAsync(GPUMapMode.READ);let B=M.getMappedRange(),j=new Float16Array(s?B.slice():new Float32Array(B.slice()));return M.unmap(),j}async function eZ(e,n,t,a,o){var l;let u=await (null==(l=navigator.gpu)?void 0:l.requestAdapter()),s=!!u&&u.features.has("shader-f16"),d=s?await (null==u?void 0:u.requestDevice({requiredFeatures:["shader-f16"],requiredLimits:{maxBufferSize:0x7a0a1efc,maxStorageBufferBindingSize:0x7a0a1efc}})):await (null==u?void 0:u.requestDevice({requiredLimits:{maxBufferSize:0x7a0a1efc,maxStorageBufferBindingSize:0x7a0a1efc}}));if(!d)return void Error("need a browser that supports WebGPU");let{kernelDepth:f,kernelSize:c}=a,{strides:m,shape:x}=t,[p,y,S]=m,g=x[0]*x[1]*x[2],v=x.map(e=>Math.ceil(e/4)),z=(s?i:r)[eE[o]],h=d.createShaderModule({label:"Multivariate3D compute module",code:z}),b=d.createComputePipeline({label:"Multivariate3D compute pipeline",layout:"auto",compute:{module:h}}),_=(0,F.Wu)(z),w=(0,F.FE)(_.uniforms.params);w.set({xStride:S,yStride:y,zStride:p,xSize:x[2],ySize:x[1],zSize:x[0],workGroups:[v[2],v[1],v[0]],kernelDepth:f,kernelSize:c});let k=d.createBuffer({label:"First Input Buffer",size:e.byteLength*(s?1:2),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),D=d.createBuffer({label:"Second Input Buffer",size:n.byteLength*(s?1:2),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),I=d.createBuffer({label:"Output Buffer",size:g*(s?2:4),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),C=d.createBuffer({size:w.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),M=d.createBuffer({label:"Output Buffer",size:g*(s?2:4),usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});d.queue.writeBuffer(k,0,s?e:new Float32Array(e)),d.queue.writeBuffer(D,0,s?n:new Float32Array(n)),d.queue.writeBuffer(C,0,w.arrayBuffer);let O=d.createBindGroup({layout:b.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:k}},{binding:1,resource:{buffer:D}},{binding:2,resource:{buffer:I}},{binding:3,resource:{buffer:C}}]}),P=d.createCommandEncoder({label:"Multivariate3D encoder"}),Y=P.beginComputePass({label:"Multivariate3D compute pass"});Y.setPipeline(b),Y.setBindGroup(0,O),Y.dispatchWorkgroups(v[2],v[1],v[0]),Y.end(),P.copyBufferToBuffer(I,0,M,0,g*(s?2:4)),d.queue.submit([P.finish()]),await M.mapAsync(GPUMapMode.READ);let B=M.getMappedRange(),j=new Float16Array(s?B.slice():new Float32Array(B.slice()));return M.unmap(),j}async function eW(e,n,t,a){var o;let l=await (null==(o=navigator.gpu)?void 0:o.requestAdapter()),u=!!l&&l.features.has("shader-f16"),s=u?await (null==l?void 0:l.requestDevice({requiredFeatures:["shader-f16"],requiredLimits:{maxBufferSize:0x7a0a1efc,maxStorageBufferBindingSize:0x7a0a1efc}})):await (null==l?void 0:l.requestDevice({requiredLimits:{maxBufferSize:0x7a0a1efc,maxStorageBufferBindingSize:0x7a0a1efc}}));if(!s)return void Error("need a browser that supports WebGPU");let{strides:d,shape:f}=n,c=f[0]*f[1]*f[2],[m,x,p]=d,y=f.map(e=>Math.ceil(e/4)),S=(u?i:r).CUMSUM3D,g=s.createShaderModule({label:"cumsum3d compute module",code:S}),v=s.createComputePipeline({label:"cumsum3d compute pipeline",layout:"auto",compute:{module:g}}),z=(0,F.Wu)(S),h=(0,F.FE)(z.uniforms.params);h.set({xStride:p,yStride:x,zStride:m,xSize:f[2],ySize:f[1],zSize:f[0],reduceDim:t,reverse:a,workGroups:[y[2],y[1],y[0]]});let b=s.createBuffer({label:"Input Buffer",size:e.byteLength*(u?1:2),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),_=s.createBuffer({label:"Output Buffer",size:4*c,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),w=s.createBuffer({label:"Uniform Buffer",size:h.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),k=s.createBuffer({label:"Read Buffer",size:4*c,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});s.queue.writeBuffer(b,0,u?e:new Float32Array(e)),s.queue.writeBuffer(w,0,h.arrayBuffer);let D=s.createBindGroup({layout:v.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:b}},{binding:1,resource:{buffer:_}},{binding:2,resource:{buffer:w}}]}),I=s.createCommandEncoder({label:"cumsum3d encoder"}),C=I.beginComputePass({label:"cumsum3d compute pass"});C.setPipeline(v),C.setBindGroup(0,D),C.dispatchWorkgroups(y[2],y[1],y[0]),C.end(),I.copyBufferToBuffer(_,0,k,0,4*c),s.queue.submit([I.finish()]),await k.mapAsync(GPUMapMode.READ);let M=new Float32Array(k.getMappedRange().slice());return k.unmap(),M}async function eH(e,n,t,a){var o;let l=await (null==(o=navigator.gpu)?void 0:o.requestAdapter()),u=!!l&&l.features.has("shader-f16"),s=u?await (null==l?void 0:l.requestDevice({requiredFeatures:["shader-f16"],requiredLimits:{maxBufferSize:0x7a0a1efc,maxStorageBufferBindingSize:0x7a0a1efc}})):await (null==l?void 0:l.requestDevice({requiredLimits:{maxBufferSize:0x7a0a1efc,maxStorageBufferBindingSize:0x7a0a1efc}}));if(!s)return void Error("need a browser that supports WebGPU");let{strides:d,shape:f}=n,c=f[0]*f[1],[m,x]=[d[0],d[1]],p=[Math.ceil(f[1]/16),Math.ceil(f[0]/16)],y=(u?i:r)[eG[t]],S=s.createShaderModule({label:"convolution2d compute module",code:y}),g=s.createComputePipeline({label:"convolution2d compute pipeline",layout:"auto",compute:{module:S}}),v=(0,F.Wu)(y),z=(0,F.FE)(v.uniforms.params);z.set({xStride:x,yStride:m,xSize:f[1],ySize:f[0],kernelSize:a});let h=s.createBuffer({label:"Input Buffer",size:e.byteLength*(u?1:2),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),b=s.createBuffer({label:"Output Buffer",size:c*(u?2:4),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),_=s.createBuffer({label:"Uniform Buffer",size:z.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),w=s.createBuffer({label:"Read Buffer",size:c*(u?2:4),usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});s.queue.writeBuffer(h,0,u?e:new Float32Array(e)),s.queue.writeBuffer(_,0,z.arrayBuffer);let k=s.createBindGroup({layout:g.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:h}},{binding:1,resource:{buffer:b}},{binding:2,resource:{buffer:_}}]}),D=s.createCommandEncoder({label:"convolution2d encoder"}),I=D.beginComputePass({label:"convolution2d compute pass"});I.setPipeline(g),I.setBindGroup(0,k),I.dispatchWorkgroups(p[0],p[1],1),I.end(),D.copyBufferToBuffer(b,0,w,0,c*(u?2:4)),s.queue.submit([D.finish()]),await w.mapAsync(GPUMapMode.READ);let C=w.getMappedRange(),M=new Float16Array(u?C.slice():new Float32Array(C.slice()));return w.unmap(),M}let eQ=e=>{let{setTexture:n,ZarrDS:t}=e,{strides:r,dataShape:i,valueScales:a,isFlat:l,setIsFlat:u,setDownloading:s,setShowLoading:f,setValueScales:x}=(0,c.on)((0,m.k)(e=>({strides:e.strides,dataShape:e.dataShape,valueScales:e.valueScales,isFlat:e.isFlat,setIsFlat:e.setIsFlat,setDownloading:e.setDownloading,setShowLoading:e.setShowLoading,setValueScales:e.setValueScales}))),y=(0,c.Ws)(e=>e.setPlotType),{axis:S,execute:g,operation:v,useTwo:z,variable2:h,valueScalesOrig:b,kernelSize:_,kernelDepth:w,kernelOperation:k,reverseDirection:D,analysisStore:I,analysisMode:C,analysisArray:M,setValueScalesOrig:O,setAnalysisArray:P,setAnalysisMode:Y}=(0,c.r2)((0,m.k)(e=>({axis:e.axis,execute:e.execute,operation:e.operation,useTwo:e.useTwo,variable2:e.variable2,valueScalesOrig:e.valueScalesOrig,kernelSize:e.kernelSize,kernelDepth:e.kernelDepth,kernelOperation:e.kernelOperation,reverseDirection:e.reverseDirection,analysisStore:e.analysisStore,analysisMode:e.analysisMode,analysisArray:e.analysisArray,setValueScalesOrig:e.setValueScalesOrig,setAnalysisArray:e.setAnalysisArray,setAnalysisMode:e.setAnalysisMode}))),B=(0,c.SZ)(e=>e.slice),j=(0,d.useRef)(new Float32Array(1));return(0,d.useEffect)(()=>{let e=(0,p.Td)(I);if(!(e.length<=1)&&!l)if(f(!0),z)(async function(){if(s(!0),j.current=await t.GetArray(h,B),s(!1),["TwoVarLinearSlope2D","Correlation2D","Covariance2D"].includes(v)){let t=i.filter((e,n)=>n!=S),l=await eq(C?M:e,j.current.data,{shape:i,strides:r},S,v);b||O(a);let[s,d]=[-1,1];["TwoVarLinearSlope2D","Covariance2D"].includes(v)&&([s,d]=(0,p.Qt)(l)),x({minVal:s,maxVal:d});let f=new Uint8Array(l.map(e=>(e-s)/(d-s)).map(e=>isNaN(e)?255:254*e)),c=new o.GYF(f,t[1],t[0],o.VT0,o.OUM);c.needsUpdate=!0,P(l),n(c),u(!0),y("flat")}else{let t=await eZ(C?M:e,j.current.data,{shape:i,strides:r},{kernelDepth:w,kernelSize:_},v);b||O(a);let[l,s]=[-1,1];["TwoVarLinearSlope3D","Covariance3D"].includes(v)&&([l,s]=(0,p.Qt)(t)),x({minVal:l,maxVal:s});let d=new Uint8Array(t.map(e=>(e-l)/(s-l)).map(e=>isNaN(e)?255:254*e)),f=new o.dYF(d,i[2],i[1],i[0]);f.format=o.VT0,f.minFilter=o.hxR,f.magFilter=o.hxR,f.needsUpdate=!0,P(t),n(f),u(!1),y("volume")}})().then(e=>{Y(!0),f(!1)});else if("Convolution"!=v){let t=i.filter((e,n)=>n!=S),l="CUMSUM3D"==v;!async function(){let s,d,c;if(!(s="CUMSUM3D"==v?await eW(C?M:e,{shape:i,strides:r},S,D):await eR(C?M:e,{shape:i,strides:r},S,v)))return;["StDev","CUMSUM","CUMSUM3D","LinearSlope"].includes(v)?([d,c]=(0,p.Qt)(s),b||O(a),x({minVal:d,maxVal:c})):b?(d=b.minVal,c=b.maxVal,x(b),O(null)):(d=a.minVal,c=a.maxVal);let m=new Uint8Array(s.map(e=>(e-d)/(c-d)).map(e=>isNaN(e)?255:254*e)),g=l?new o.dYF(m,i[2],i[1],i[0]):new o.GYF(m,t[1],t[0],o.VT0,o.OUM);l&&(g.format=o.VT0,g.minFilter=o.hxR,g.magFilter=o.hxR),g.needsUpdate=!0,P(s),n(g),"CUMSUM3D"!=v&&(u(!0),y("flat")),Y(!0),f(!1)}()}else eF(C?M:e,{shape:i,strides:r},k,{kernelDepth:w,kernelSize:_}).then(e=>{let t,r;if(!e)return;"StDev"==k?([t,r]=(0,p.Qt)(e),b||O(a),x({minVal:t,maxVal:r})):b?(t=b.minVal,r=b.maxVal,x(b),O(null)):(t=a.minVal,r=a.maxVal);let l=new Uint8Array(e.map(e=>(e-t)/(r-t)).map(e=>isNaN(e)?255:254*e)),s=new o.dYF(l,i[2],i[1],i[0]);s.format=o.VT0,s.minFilter=o.hxR,s.magFilter=o.hxR,s.needsUpdate=!0,P(e),n(s),u(!1),y("volume")}).then(e=>{Y(!0),f(!1)})},[g]),(0,d.useEffect)(()=>{let e=(0,p.Td)(I);if(!(e.length<=1)&&l&&(f(!0),!z))if("Convolution"!=v);else{let t=i.length>2?i.slice(1):i;eH(C?M:e,{shape:t,strides:r.length>2?r.slice(1):r},k,_).then(e=>{let r,i;if(!e)return;"StDev"==k?([r,i]=(0,p.Qt)(e),b||O(a),x({minVal:r,maxVal:i})):b?(r=b.minVal,i=b.maxVal,x(b),O(null)):(r=a.minVal,i=a.maxVal);let l=new Uint8Array(e.map(e=>(e-r)/(i-r)).map(e=>isNaN(e)?255:254*e)),u=new o.GYF(l,t[1],t[0],o.VT0,o.OUM);u.needsUpdate=!0,P(e),n(u),Y(!0),f(!1)})}},[g]),null},e$=e=>{let{show:n}=e,{valueScales:t,variable:r,metadata:i}=(0,c.on)((0,m.k)(e=>({valueScales:e.valueScales,variable:e.variable,metadata:e.metadata}))),{exportImg:l,includeBackground:u,includeColorbar:s,doubleSize:f,useCustomRes:x,getCbarLoc:p,getCbarNum:y,getCustomRes:S,setHideAxisControls:g,setHideAxis:v}=(0,c.qi)((0,m.k)(e=>({exportImg:e.exportImg,includeBackground:e.includeBackground,includeColorbar:e.includeColorbar,doubleSize:e.doubleSize,useCustomRes:e.useCustomRes,getCbarLoc:e.getCbarLoc,getCbarNum:e.getCbarNum,getCustomRes:e.getCustomRes,setHideAxisControls:e.setHideAxisControls,setHideAxis:e.setHideAxis}))),{gl:z,scene:b,camera:_}=(0,T.C)(),w=(0,d.useRef)(!1),k=(0,h.$m)("--text-plot"),D=(0,h.$m)("--background");return(0,d.useEffect)(()=>{if(!n)return;if(!w.current){w.current=!0;return}let e=z.domElement.width,a=z.domElement.height,l=S(),d=x?l[0]:f?2*e:e,c=x?l[1]:f?2*a:a,m=document.createElement("canvas"),h=m.getContext("2d");if(!h)return;if(m.width=d,m.height=c,u&&(h.fillStyle=D,h.fillRect(0,0,m.width,m.height)),x){let e,n=z.getSize(new o.I9Y);if(_ instanceof o.ubm)e={aspect:_.aspect},_.aspect=d/c,_.updateProjectionMatrix();else if(_ instanceof o.qUd){e={left:_.left,right:_.right,top:_.top,bottom:_.bottom};let n=d/c;if(n>(_.right-_.left)/(_.top-_.bottom)){let e=(_.top-_.bottom)*n,t=(_.left+_.right)/2;_.left=t-e/2,_.right=t+e/2}else{let e=(_.right-_.left)/n,t=(_.top+_.bottom)/2;_.top=t+e/2,_.bottom=t-e/2}_.updateProjectionMatrix()}z.setSize(d,c),z.render(b,_),h.drawImage(z.domElement,0,0,d,c),_ instanceof o.ubm?_.aspect=e.aspect:_ instanceof o.qUd&&(_.left=e.left,_.right=e.right,_.top=e.top,_.bottom=e.bottom),z.setSize(n.x,n.y),_.updateProjectionMatrix(),v(!1),g(!1),z.render(b,_)}else z.render(b,_),h.drawImage(z.domElement,0,0,d,c),z.render(b,_),v(!1),g(!1);h.fillStyle=k,h.font="".concat(f?72:36,'px "Segoe UI"'),h.fillText(r,f?40:20,f?100:50);let I=f?52:26;if(s){let n=document.getElementById("colorbar-canvas"),r=p(),a=f?Math.min(1024,.8*e):Math.min(512,.8*e),o=f?48:24,l=Math.round(d/2-a/2),u="top"===r?f?140:70:f?c-140:c-70,s="right"===r||"left"===r;if(s){let e=a;a=o,u=Math.round(c/2-(o=e)/2),l="right"===r?f?d-140:d-70:f?140:70}if(n instanceof HTMLCanvasElement)if(s){h.save();let e=l+a/2,t=u+o/2;h.translate(e,t),h.rotate(-Math.PI/2);let r=f?1024:512,i=f?48:24;h.drawImage(n,-r/2,-i/2,r,i),h.restore()}else h.drawImage(n,l,u,a,o);let m=y(),x=t.maxVal-t.minVal,S=1/(m-1),g=s?1/(m-1)*o:1/(m-1)*a;if(h.font="".concat(f?36:18,'px "Segoe UI"'),s){h.textBaseline="middle",h.textAlign="left"==r?"left":"right";for(let e=0;e<m;e++)"left"==r?h.fillText(String((t.minVal+e*S*x).toFixed(2)),l+a+6,u+o-e*g):h.fillText(String((t.minVal+e*S*x).toFixed(2)),l-6,u+o-e*g)}else{h.textBaseline="top",h.textAlign="center";for(let e=0;e<m;e++)h.fillText(String((t.minVal+e*S*x).toFixed(2)),l+e*g,u+o+6)}h.fillStyle=k,h.font="".concat(I,'px "Segoe UI" bold'),h.textAlign="center",h.fillText(null==i?void 0:i.units,l+a/2,u-I-4)}h.fillStyle="#888888",h.font="".concat(f?40:20,'px "Segoe UI", serif '),h.textAlign="left",h.textBaseline="bottom",h.fillText("browzarr.io",f?20:10,f?c-20:c-10),m.toBlob(e=>{if(!e)return;let n=URL.createObjectURL(e),t=document.createElement("a");t.download="browzarr-plot.png",t.href=n,t.click(),URL.revokeObjectURL(n)},"image/png")},[l]),(0,a.jsx)(a.Fragment,{})},eJ=e=>{let{isFlat:n}=e,{resetCamera:t}=(0,c.Ws)((0,m.k)(e=>({resetCamera:e.resetCamera}))),r=(0,d.useRef)(null),i=(0,d.useRef)(!1);return(0,d.useEffect)(()=>{if(!i.current){i.current=!0;return}if(r.current){let e,t=r.current,i=performance.now(),a=t.object.position.clone(),l=t.position0.clone(),u=t.target.clone(),s=t.target0.clone(),d=t.object.zoom,f=r=>{(0,T.m)();let c=Math.min((r-i)/1e3,1);t.object.position.lerpVectors(a,l,c),t.target.lerpVectors(u,s,c),n&&(t.object.zoom=o.cj9.lerp(d,1e3,c),t.object.updateProjectionMatrix(),t.update()),c<1&&(e=requestAnimationFrame(f))};return e=requestAnimationFrame(f),()=>cancelAnimationFrame(e)}},[t]),(0,a.jsxs)(a.Fragment,{children:[n&&(0,a.jsx)(N.N,{ref:r,enableRotate:!1,enablePan:!0,maxDistance:50,minZoom:50,maxZoom:3e3}),!n&&(0,a.jsx)(N.N,{ref:r,enableRotate:!0,enablePan:!0,maxDistance:50})]})},eK=e=>{let{ZarrDS:n}=e,{setShape:t,setDataShape:r,setFlipY:i,setValueScales:l,setMetadata:u,setDimArrays:s,setDimNames:f,setDimUnits:y,setPlotOn:g,setShowLoading:b}=(0,c.on)((0,m.k)(e=>({setShape:e.setShape,setDataShape:e.setDataShape,setFlipY:e.setFlipY,setValueScales:e.setValueScales,setMetadata:e.setMetadata,setDimArrays:e.setDimArrays,setDimNames:e.setDimNames,setDimUnits:e.setDimUnits,setPlotOn:e.setPlotOn,setShowLoading:e.setShowLoading}))),{colormap:_,variable:w,isFlat:k,metadata:D,valueScales:I,is4D:C,setIsFlat:M}=(0,c.on)((0,m.k)(e=>({colormap:e.colormap,variable:e.variable,isFlat:e.isFlat,metadata:e.metadata,valueScales:e.valueScales,is4D:e.is4D,setIsFlat:e.setIsFlat}))),{plotType:O}=(0,c.Ws)((0,m.k)(e=>({plotType:e.plotType}))),{slice:P,reFetch:Y}=(0,c.SZ)((0,m.k)(e=>({slice:e.slice,reFetch:e.reFetch}))),B=(0,d.useRef)([0,0]),j=(0,d.useRef)(0),[A,L]=(0,d.useState)(!1),[X,U]=(0,d.useState)([0,0]),[V,N]=(0,d.useState)(null),[T,G]=(0,d.useState)(!0);(0,d.useEffect)(()=>{if("Default"!=w){b(!0),G(!1);try{n.GetArray(w,P).then(e=>{let[n,i]=(0,E.oW)({data:e.data,shape:e.shape});if(n instanceof o.GYF||n instanceof o.dYF?N(n):(console.error("Invalid texture type returned from ArrayToTexture"),N(null)),e.scalingFactor){let{maxVal:n,minVal:t}=i;l({maxVal:n*Math.pow(10,e.scalingFactor),minVal:t*Math.pow(10,e.scalingFactor)})}else l(i);2==e.shape.length?M(!0):M(!1);let a=e.shape[1]/e.shape[2]*2;t(new o.Pq0(2,a,2)),r(e.shape),G(!0),g(!0),b(!1)})}catch(e){b(!1);return}n.GetAttributes(w).then(e=>{u(e);let[t,r,a]=n.GetDimArrays();C&&(t=t.slice(1),r=r.slice(1),a=a.slice(1)),s(t),f(a),t.length>2?t[1][1]<t[1][0]?i(!0):i(!1):t[0][1]<t[0][0]?i(!0):i(!1);let o=[];for(let e of r)o.push(e.units);y(o),(0,p.QB)(o,t)})}else u(null)},[Y]);let F=(0,d.useMemo)(()=>({setLoc:U,setShowInfo:L,coords:B,val:j}),[]),q=(0,d.useMemo)(()=>h.Fp,[]);return(0,a.jsxs)("div",{className:"main-canvas",style:{width:"100vw"},children:[(0,a.jsx)(eQ,{setTexture:N,ZarrDS:n}),T&&(0,a.jsx)(h.PL,{units:null==D?void 0:D.units,valueScales:I}),(0,a.jsx)(q,{}),(k||"flat"==O)&&(0,a.jsx)(R,{loc:X,show:A,info:[...B.current,j.current]}),(!k&&"flat"!=O||k&&"sphere"===O)&&(0,a.jsx)(a.Fragment,{children:(0,a.jsxs)(z.Hl,{id:"main-canvas",camera:{position:k?[0,0,5]:[-4.5,3,4.5],fov:50},frameloop:"demand",gl:{preserveDrawingBuffer:!0},children:[(0,a.jsx)(e7,{}),(0,a.jsx)(e$,{show:T}),T&&(0,a.jsx)(ni,{}),"volume"==O&&T&&(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(x,{volTexture:V}),(0,a.jsx)(S,{ZarrDS:n})]}),"point-cloud"==O&&T&&(0,a.jsx)(a.Fragment,{children:(0,a.jsx)(v,{textures:{texture:V,colormap:_},ZarrDS:n})}),"sphere"==O&&T&&(0,a.jsx)(e5,{texture:V,ZarrDS:n}),(0,a.jsx)(eJ,{isFlat:!1})]})}),(k||"flat"==O)&&(0,a.jsx)(a.Fragment,{children:(0,a.jsxs)(z.Hl,{id:"main-canvas",camera:{position:[0,0,5],zoom:1e3},orthographic:!0,frameloop:"demand",children:[(0,a.jsx)(e$,{show:T}),(0,a.jsx)(e7,{}),T&&(0,a.jsx)(ni,{}),(0,a.jsx)(e3,{texture:V,infoSetters:F}),(0,a.jsx)(eJ,{isFlat:!0})]})})]})};function e0(e){let{points:n,tsID:t,pointSetters:r,scalers:i}=e,l=(0,d.useRef)(null),u=n.length,s=(0,d.useRef)(null),[f,x]=(0,d.useState)(!1),{setPointID:p,setPointLoc:y,setShowPointInfo:S}=r,[g,v]=(0,d.useState)(1),{pointColor:z,pointSize:h,useCustomPointColor:b}=(0,c.Ws)((0,m.k)(e=>({pointColor:e.pointColor,pointSize:e.linePointSize,showPoints:e.showPoints,useCustomPointColor:e.useCustomPointColor}))),{xScale:_,yScale:w}=i,{timeSeries:k}=(0,c.on)((0,m.k)(e=>({timeSeries:e.timeSeries}))),[D,I,C]=k[t].color,M=(0,d.useMemo)(()=>new o.Gu$(h),[h]),O=(0,d.useMemo)(()=>new o.V9B({color:new o.Q1f().setRGB(D/300,I/300,C/300).convertSRGBToLinear()}),[z,b,k]);return(0,d.useEffect)(()=>{if(l.current){let e=new o.B69;for(let t=0;t<u;t++){let r=n[t].toArray();e.position.set(r[0]*(_/2),r[1]*w,1),e.scale.set(h/g,h/g,h/g),e.updateMatrix(),l.current.setMatrixAt(t,e.matrix)}l.current.instanceMatrix.needsUpdate=!0}},[n,g,M,O,_,w,h]),(0,T.D)(e=>{let{camera:n}=e;n.zoom!==g&&v(n.zoom)}),(0,a.jsx)(a.Fragment,{children:(0,a.jsx)("mesh",{position:[0,0,5],onPointerEnter:function(e){if(l.current){let n=e.instanceId,r=new o.B69,i=new o.kn4,a=new o.Pq0;n!=s.current&&s.current&&(l.current.getMatrixAt(s.current,i),a.setFromMatrixPosition(i),r.scale.set(h/g,h/g,h/g),r.position.copy(a),r.updateMatrix(),l.current.setMatrixAt(s.current,r.matrix)),s.current=n,l.current.getMatrixAt(n,i),a.setFromMatrixPosition(i),r.scale.set(3*h/g,3*h/g,3/g),r.position.copy(a),r.updateMatrix(),l.current.setMatrixAt(e.instanceId,r.matrix),l.current.instanceMatrix.needsUpdate=!0,x(e=>!e),p([t,e.instanceId]),y([e.clientX,e.clientY]),S(!0)}},onPointerLeave:function(e){let n=e.instanceId;if(l.current){let e=new o.B69,t=new o.kn4,r=new o.Pq0;s.current&&(l.current.getMatrixAt(n,t),r.setFromMatrixPosition(t),e.scale.set(h/g,h/g,h/g),e.position.copy(r),e.updateMatrix(),l.current.setMatrixAt(n,e.matrix),l.current.instanceMatrix.needsUpdate=!0,x(e=>!e),S(n!=s.current))}},children:(0,a.jsx)("instancedMesh",{ref:l,args:[M,O,u]})})})}let e2=e=>{let{height:n,xScale:t,yScale:r,pointSetters:i}=e,{valueScales:l,timeSeries:u,colormap:s}=(0,c.on)((0,m.k)(e=>({valueScales:e.valueScales,timeSeries:e.timeSeries,colormap:e.colormap}))),{lineWidth:f,useLineColor:x,lineColor:p,showPoints:y,lineResolution:S,useCustomColor:g}=(0,c.Ws)((0,m.k)(e=>({lineWidth:e.lineWidth,linePointSize:e.linePointSize,showPoints:e.showPoints,useLineColor:e.useLineColor,lineColor:e.lineColor,lineResolution:e.lineResolution,useCustomColor:e.useCustomColor}))),{camera:v}=(0,T.C)(),{maxVal:z,minVal:h}=l,b=(0,d.useMemo)(()=>{let e={};return Object.keys(u).reverse().map((n,i)=>{let[a,l,d]=u[n].color;e[n]=new o.BKk({glslVersion:o.Wdf,uniforms:{cmap:{value:s},xScale:{value:t},yScale:{value:r},aspect:{value:window.innerWidth/window.innerHeight},thickness:{value:f},miter:{value:1},useLineColor:{value:g},useMapColors:{value:x},lineColor:{value:new o.Q1f().setRGB(a/255,l/255,d/255)},userColor:{value:new o.Q1f(p)},zoom:{value:v.zoom}},vertexShader:"attribute float direction; \nattribute vec3 next;\nattribute vec3 previous;\nattribute float normed;\n\nvarying float vNormed;\n\nuniform float zoom;\nuniform float thickness;\nuniform int miter;\nuniform float xScale; \nuniform float yScale;\n\nfloat getOrthographicZoom(mat4 projectionMatrix, float referenceWidth) {\n    float m0 = projectionMatrix[0][0]; // Scaling factor: 2/(right-left)\n    float viewWidth = 2.0 / m0; // Viewable width\n    return referenceWidth / viewWidth; // Zoom level\n}\n\nvoid main() {\n    vec3 pos = position;\n    vec3 prev = previous;\n    vec3 nex = next;\n    pos.x *= xScale/2.0;\n    pos.y *= yScale;\n    prev.x *= xScale/2.0;\n    prev.y *= yScale;\n    nex.x *= xScale/2.0;\n    nex.y *= yScale;\n\n    // Transform positions to view space (before projection)\n    float zoom = getOrthographicZoom(projectionMatrix, 2.);\n    float zoomLevel = 2. / projectionMatrix[0][0]; // Extract vertical scale\n    vec4 currentView = modelViewMatrix * vec4(pos, 1.0);\n    vec4 prevView = modelViewMatrix * vec4(prev, 1.0);\n    vec4 nextView = modelViewMatrix * vec4(nex, 1.0);\n\n    // Compute directions in view space\n    vec3 dir = vec3(0.0);\n    if (currentView.xyz == prevView.xyz) {\n        dir = normalize(nextView.xyz - currentView.xyz);\n    } else if (currentView.xyz == nextView.xyz) {\n        dir = normalize(currentView.xyz - prevView.xyz);\n    } else {\n        vec3 dirA = normalize(currentView.xyz - prevView.xyz);\n        if (miter == 1) {\n            vec3 dirB = normalize(nextView.xyz - currentView.xyz);\n            vec3 tangent = normalize(dirA + dirB);\n            vec3 perp = vec3(-dirA.y, dirA.x, 0.0); // Perpendicular in view space\n            vec3 miterVec = vec3(-tangent.y, tangent.x, 0.0);\n            float miterLen = dot(miterVec, perp);\n            miterLen = max(miterLen, 0.5); // Avoid division by zero\n            dir = tangent;\n        } else {\n            dir = dirA;\n        }\n    }\n\n    // Compute normal in view space\n    vec3 normal = vec3(-dir.y, dir.x, 0.0); // Perpendicular to direction\n    float len = thickness / zoom/500.; // Thickness in world/view space units\n    normal *= 0.5 * len * direction; // Apply thickness and direction\n\n    // Apply offset in view space\n    currentView.xyz += normal;\n\n    // Project to clip space\n    gl_Position = projectionMatrix * currentView;\n\n\n    vNormed = normed;\n    gl_PointSize = 1.0;\n}",fragmentShader:"\n                out vec4 Color;\n                uniform sampler2D cmap;\n                uniform bool useLineColor;\n                uniform bool useMapColors;\n                uniform vec3 lineColor;\n                uniform vec3 userColor;\n                varying float vNormed;\n\n                void main() {\n                    vec4 texColor = texture(cmap, vec2(vNormed, 0.1));\n                    texColor.a = 1.;\n                    Color = useLineColor ? vec4(userColor, 1.0) : useMapColors ? texColor : vec4(lineColor, 1.0) ;\n                }\n                ",depthWrite:!1})}),e},[s,f,t,r,window.innerWidth,window.innerHeight,x,p,v.zoom,g,u]),_=(0,d.useMemo)(()=>window.innerWidth,[window.innerWidth]),w=(0,d.useMemo)(()=>window.innerHeight-n,[window.innerWidth,n]),[k,D]=(0,d.useState)({}),I=(0,d.useMemo)(()=>{let e={},n={};return Object.keys(u).map((t,r)=>{let i=u[t].data,a=i.map(e=>(e-h)/(z-h)),l=function(e,n,t){let r=(n-e)/(t-1);return Array.from({length:t},(n,t)=>e+r*t)}(-_,_,i.length),s=a.map((e,n)=>new o.Pq0(l[n],(e-.5)*w,5));n[t]=s;let d=new o.B6O(s).getPoints(s.length*S-1),f=[];for(let e=0;e<d.length;e++){let n=e/(d.length-1)*(a.length-1),t=Math.floor(n),r=Math.min(a.length-1,Math.ceil(n)),i=n-t;f.push(a[t]*(1-i)+a[r]*i)}let c=d.length,m=[],x=[],p=[],y=[],g=[],v=[];for(let e=0;e<c;e++){let n=d[e],t=d[Math.max(0,e-1)],r=d[Math.min(c-1,e+1)];m.push(...n,...n),x.push(1,-1),p.push(...t,...t),y.push(...r,...r),g.push(f[e],f[e])}for(let e=0;e<c-1;e++){let n=2*e,t=n+1,r=n+2,i=n+3;v.push(n,t,r),v.push(t,i,r)}let b=new o.LoY;b.setAttribute("position",new o.qtW(m,3)),b.setAttribute("direction",new o.qtW(x,1)),b.setAttribute("previous",new o.qtW(p,3)),b.setAttribute("next",new o.qtW(y,3)),b.setAttribute("normed",new o.qtW(g,1)),b.setIndex(new o.A$4(v,1)),e[t]=b}),D(n),e},[u,S]);return(0,d.useEffect)(()=>{(0,T.m)()},[y]),(0,a.jsx)(a.Fragment,{children:(0,a.jsxs)("group",{children:[Object.keys(u).map((e,n)=>(0,a.jsx)("mesh",{geometry:I[e],material:b[e]},"lineMesh_".concat(n))),y&&Object.keys(u).map((e,n)=>(0,a.jsx)(e0,{points:k[e],tsID:e,pointSetters:i,scalers:{xScale:t,yScale:r}},"plotPoints_".concat(n)))]})})},e3=e=>{let{texture:n,infoSetters:t}=e,{setLoc:r,setShowInfo:i,val:l,coords:u}=t,{flipY:s,colormap:f,valueScales:x,dimArrays:y,isFlat:S}=(0,c.on)((0,m.k)(e=>({flipY:e.flipY,colormap:e.colormap,valueScales:e.valueScales,dimArrays:e.dimArrays,isFlat:e.isFlat}))),{cScale:g,cOffset:v,animProg:z,nanTransparency:h,nanColor:b}=(0,c.Ws)((0,m.k)(e=>({cOffset:e.cOffset,cScale:e.cScale,resetAnim:e.resetAnim,animate:e.animate,animProg:e.animProg,nanTransparency:e.nanTransparency,nanColor:e.nanColor}))),{axis:_,analysisMode:w,analysisArray:k}=(0,c.r2)((0,m.k)(e=>({axis:e.axis,analysisMode:e.analysisMode,analysisArray:e.analysisArray}))),D=n.source.data,I=(0,d.useMemo)(()=>D.height/D.width,[D]),C=(0,d.useMemo)(()=>new o.bdM(2,2*I),[I]),M=(0,d.useRef)(!1),O=(0,d.useRef)(new o.I9Y(0,0)),P=w&&2==_,Y=(0,d.useMemo)(()=>w?k:(0,p.Td)(),[w,k]),B=(0,d.useMemo)(()=>y.filter((e,n)=>n!=_),[y,_]),j=(0,d.useMemo)(()=>new o.BKk({glslVersion:o.Wdf,uniforms:{cScale:{value:g},cOffset:{value:v},data:{value:n},cmap:{value:f},animateProg:{value:z},nanColor:{value:new o.Q1f(b)},nanAlpha:{value:1-h}},vertexShader:" // by Jeran Poehls\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}",fragmentShader:S?" // Basic Shader for colors on a plane used in FlatMap with 2D data\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nout vec4 color;\r\n\r\nvarying vec2 vUv;\r\n\r\nuniform sampler2D data;\r\nuniform sampler2D cmap;\r\nuniform float nanAlpha;\r\nuniform vec3 nanColor;\r\nuniform float cOffset;\r\nuniform float cScale;\r\n\r\nvoid main(){\r\n\r\n    float strength = texture2D(data, vUv).r;\r\n    bool isNaN = strength == 1.;\r\n    float sampLoc = isNaN ? strength: (strength - 0.5)*cScale + 0.5;\r\n    sampLoc = isNaN ? strength : min(sampLoc+cOffset,0.995);\r\n    color = isNaN ? vec4(nanColor, nanAlpha) : vec4(texture2D(cmap, vec2(sampLoc, 0.5)).rgb, 1.);\r\n\r\n}":"//This is for Flat Textures but with 3D textures to sample from i,e; animation\r\n\r\nuniform sampler3D data;\r\nuniform sampler2D cmap;\r\n\r\nuniform float cOffset;\r\nuniform float cScale;\r\nuniform float animateProg;\r\nuniform float nanAlpha;\r\nuniform vec3 nanColor;\r\n\r\nvarying vec2 vUv;\r\nout vec4 Color;\r\n\r\nvoid main() {\r\n\r\n    float strength = texture(data,vec3(vUv, animateProg)).r;\r\n    bool isNaN = strength == 1.;\r\n    float sampLoc = isNaN ? strength: (strength)*cScale;\r\n    sampLoc = isNaN ? strength : min(sampLoc+cOffset,0.995);\r\n    Color = isNaN ? vec4(nanColor, nanAlpha) : vec4(texture2D(cmap, vec2(sampLoc, 0.5)).rgb, 1.);\r\n\r\n}",side:o.$EB}),[g,v,n,f,z,b,h]);(0,d.useEffect)(()=>{C.dispose()},[C]);let A=(0,d.useRef)(null),L=(0,d.useCallback)(e=>{if(M.current&&e.uv){A.current=e,r([e.clientX,e.clientY]),O.current=e.uv;let{x:n,y:t}=e.uv,i=S?w?B[1].length:y[1].length:y[2].length,a=S?w?B[0].length:y[0].length:y[1].length,o=Math.round(n*i-.5),s=Math.round(t*a-.5),d=i*s+o;d+=S?0:Math.floor((y[0].length-1)*z)*i*a;let f=Y?Y[d]:0;l.current=S&&!w?function(e,n){return e*(n.maxVal-n.minVal)+n.minVal}(f,x):f,u.current=S?w?[B[0][s],B[1][o]]:[y[0][s],y[1][o]]:[y[1][s],y[2][o]]}},[Y,y,z]);return(0,a.jsx)(a.Fragment,{children:(0,a.jsx)("mesh",{material:j,geometry:C,scale:[1,s?-1:1,1],rotation:[0,0,P?Math.PI/2:0],onPointerEnter:()=>{i(!0),M.current=!0},onPointerLeave:()=>{i(!1),M.current=!1},onPointerMove:L})})};function e1(e){return e*Math.PI/180}let e5=e=>{let{texture:n,ZarrDS:t}=e,{colormap:r,isFlat:i}=(0,c.on)((0,m.k)(e=>({colormap:e.colormap,isFlat:e.isFlat}))),{setPlotDim:l,updateDimCoords:u,updateTimeSeries:s}=(0,c.on)((0,m.k)(e=>({setPlotDim:e.setPlotDim,updateDimCoords:e.updateDimCoords,updateTimeSeries:e.updateTimeSeries}))),{analysisMode:x,analysisArray:S}=(0,c.r2)((0,m.k)(e=>({analysisMode:e.analysisMode,analysisArray:e.analysisArray}))),{dimArrays:g,dimNames:v,dimUnits:z,timeSeries:h,dataShape:b,strides:_}=(0,c.on)((0,m.k)(e=>({dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits,timeSeries:e.timeSeries,dataShape:e.dataShape,strides:e.strides}))),{animate:w,animProg:k,cOffset:D,cScale:I,selectTS:C,lonExtent:M,latExtent:O,lonResolution:P,latResolution:Y,nanColor:B,nanTransparency:j,getColorIdx:A,incrementColorIdx:L}=(0,c.Ws)((0,m.k)(e=>({animate:e.animate,animProg:e.animProg,cOffset:e.cOffset,cScale:e.cScale,selectTS:e.selectTS,lonExtent:e.lonExtent,latExtent:e.latExtent,lonResolution:e.lonResolution,latResolution:e.latResolution,nanColor:e.nanColor,nanTransparency:e.nanTransparency,getColorIdx:e.getColorIdx,incrementColorIdx:e.incrementColorIdx}))),[X,U]=(0,d.useState)({}),[V,N]=(0,d.useState)(Array(10).fill(new o.IUQ(-1,-1,-1,-1))),{height:T,width:G}=(0,d.useMemo)(()=>null==n?void 0:n.source.data,[n]);(0,d.useEffect)(()=>{let e=Object.keys(X),n=Object.keys(h),t=(e=e.filter(e=>n.includes(e))).map(e=>X[e]);N([...t,...Array(Math.max(0,10-t.length)).fill(new o.IUQ(-1,-1,-1,-1))])},[X,h]);let[E,R]=(0,d.useMemo)(()=>{let e=Y/2,n=P/2;return[[Math.max(M[0]-n,-180),Math.min(M[1]+n,180)],[Math.max(O[0]-e,-90),Math.min(O[1]+e,90)]]},[O,M,P,Y]),F=(0,d.useMemo)(()=>new o.WBB(1,9),[]);(0,d.useRef)(0);let q=(0,d.useMemo)(()=>new o.BKk({glslVersion:o.Wdf,uniforms:{map:{value:n},selectTS:{value:C},selectBounds:{value:V},cmap:{value:r},cOffset:{value:D},cScale:{value:I},animateProg:{value:k},latBounds:{value:new o.I9Y(e1(R[0]),e1(R[1]))},lonBounds:{value:new o.I9Y(e1(E[0]),e1(E[1]))},nanColor:{value:new o.Q1f(B)},nanAlpha:{value:1-j}},vertexShader:f,fragmentShader:i?" // by Jeran Poehls\nprecision highp float;\nprecision highp sampler2D;\n\nout vec4 color;\n\nin vec3 aPosition;\n\nuniform sampler2D map;\nuniform sampler2D cmap;\n\nuniform float cOffset;\nuniform float cScale;\nuniform float animateProg;\nuniform bool selectTS;\nuniform vec2 latBounds;\nuniform vec2 lonBounds;\nuniform vec3 nanColor;\nuniform float nanAlpha;\n\n#define pi 3.141592653\n\nvec2 giveUV(vec3 position){\n    vec3 n = normalize(position);\n    float latitude = asin(n.y);\n    float longitude = atan(n.z, n.x);\n    latitude = (latitude - latBounds.x)/(latBounds.y - latBounds.x);\n    longitude = (longitude - lonBounds.x)/(lonBounds.y - lonBounds.x);\n\n    return vec2(1.-longitude, latitude);\n}\n\nvoid main(){\n    vec2 sampleCoord = giveUV(aPosition);\n    float strength = texture(map, sampleCoord).r;\n    bool isNaN = strength == 1.;\n    strength = isNaN ? strength : (strength - 0.5)*cScale + 0.5;\n    strength = isNaN ? strength : min(strength+cOffset,0.99);\n    color = isNaN ? vec4(nanColor, nanAlpha) : texture(cmap, vec2(strength, 0.5));\n    if (!isNaN){\n        color.a = 1.;\n    }\n\n\n}":" // by Jeran Poehls\nprecision highp float;\nprecision highp sampler3D;\n\nout vec4 color;\n\nin vec3 aPosition;\n\nuniform sampler3D map;\nuniform sampler2D cmap;\n\nuniform float cOffset;\nuniform float cScale;\nuniform float animateProg;\nuniform vec4[10] selectBounds; \nuniform bool selectTS;\nuniform vec2 latBounds;\nuniform vec2 lonBounds;\nuniform vec3 nanColor;\nuniform float nanAlpha;\n\n#define pi 3.141592653\n\nvec2 giveUV(vec3 position){\n    vec3 n = normalize(position);\n    float latitude = asin(n.y);\n    float longitude = atan(n.z, n.x);\n    latitude = (latitude - latBounds.x)/(latBounds.y - latBounds.x);\n    longitude = (longitude - lonBounds.x)/(lonBounds.y - lonBounds.x);\n\n    return vec2(1.-longitude, latitude);\n}\n\nbool isValid(vec2 sampleCoord){\n    for (int i = 0; i < 10; i++){\n        vec4 thisBound = selectBounds[i];\n        if (thisBound.x == -1.){\n            return false;\n        }\n        bool cond = (sampleCoord.x < thisBound.r || sampleCoord.x > thisBound.g || sampleCoord.y < thisBound.b ||  sampleCoord.y > thisBound.a);\n        if (!cond){\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid main(){\n    vec2 sampleCoord = giveUV(aPosition);\n    bool inBounds = all(greaterThanEqual(sampleCoord, vec2(0.0))) && \n                all(lessThanEqual(sampleCoord, vec2(1.0)));\n    \n    if (inBounds) {\n    float strength = texture(map, vec3(sampleCoord, animateProg)).r;\n    bool isNaN = strength == 1.;\n    strength = isNaN ? strength : (strength)*cScale;\n    strength = isNaN ? strength : min(strength+cOffset,0.99);\n    color = isNaN ? vec4(nanColor, nanAlpha) : texture(cmap, vec2(strength, 0.5));\n    if (!isNaN){\n        color.a = 1.;\n    }\n    bool cond = isValid(sampleCoord);\n    if (!cond && selectTS){\n        color.rgb *= 0.65;\n    }\n    } else {\n        color = vec4(nanColor, 1.); // Black\n        color.a = nanAlpha;\n    }\n    \n    // color = vec4(sampleCoord, 0., 1.0);\n\n}",blending:o.NTi,side:o.hB5,transparent:!0,depthWrite:!1}),[n,k,r,D,I,w,V,C,E,R,B,j]),Z=q.clone();return Z.side=o.hsX,(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("mesh",{renderOrder:1,geometry:F,material:q,onClick:e=>C&&function(e){let n=function(e,n,t){let r=Math.atan2(e.z,e.x),i=Math.asin(e.y),a=(r-e1(t[0]))/(e1(t[1])-e1(t[0])),l=(i-e1(n[0]))/(e1(n[1])-e1(n[0]));return new o.I9Y(1-a,l)}(e.point.normalize(),R,E),r=new o.Pq0(0,0,1);if(t){var i,a;let e=(0,p.PE)({data:x?S:(0,p.Td)(),shape:b,stride:_},{uv:n,normal:r}),t=r.toArray().map((e,n)=>Math.abs(e)>0?n:null).filter(e=>null!==e);l(2-t[0]);let d=(0,p.jT)({normal:r,uv:n}).map((e,n)=>e?g[n][Math.round(e*g[n].length)]:null),f=v.filter((e,n)=>null!==d[n]),c=z.filter((e,n)=>null!==d[n]);d=d.filter(e=>null!==e);let m="".concat(d[0],"_").concat(d[1]),h={color:(0,y.md)(A()/10,"Paired"),data:e};L(),s({[m]:h}),u({[m]:{first:{name:f[0],loc:null!=(i=d[0])?i:0,units:c[0]},second:{name:f[1],loc:null!=(a=d[1])?a:0,units:c[1]},plot:{units:z[2-t[0]]}}}),function(e,n){let t=Math.floor(e.x*G)+.5,r=Math.ceil(e.y*T)-.5,i=1/G,a=1/T,l={[n]:new o.IUQ(...[t/G-i/2,t/G+i/2],...[r/T-a/2,r/T+a/2])};U(e=>({...l,...e}))}(n,m)}}(e)}),(0,a.jsx)("mesh",{renderOrder:0,geometry:F,material:Z})]})};function e4(e,n,t){let[r,i]=e,a=(r-n[0])/(n[1]-n[0]),o=(i-t[0])/(t[1]-t[0]);return a-=.5,o-=.5,[a*=2,(o*=2)/2,0]}function e6(e){let[n,t]=e,r=t*Math.PI/180,i=n*Math.PI/180;return[Math.cos(r)*Math.cos(i)*1.001,1.001*Math.sin(r),Math.cos(r)*Math.sin(i)*1.001]}function e9(e){let{features:n}=e,{xRange:t,yRange:r,plotType:i,borderColor:l,lonExtent:u,latExtent:s,lonResolution:x,latResolution:p}=(0,c.Ws)((0,m.k)(e=>({xRange:e.xRange,yRange:e.yRange,plotType:e.plotType,borderColor:e.borderColor,lonExtent:e.lonExtent,latExtent:e.latExtent,lonResolution:e.lonResolution,latResolution:e.latResolution}))),{flipY:y,shape:S}=(0,c.on)((0,m.k)(e=>({flipY:e.flipY,shape:e.shape}))),[g,v]=(0,d.useMemo)(()=>{let e=p/2,n=x/2,t=[Math.max(u[0]-n,-180),Math.min(u[1]+n,180)],r=[Math.max(s[0]-e,-90),Math.min(s[1]+e,90)];return[t,r=y?[r[1],r[0]]:r]},[s,u,x,p]),[z,h]=(0,d.useState)(!1);(0,d.useEffect)(()=>{"sphere"===i?h(!0):h(!1)},[i]);let b=(0,d.useMemo)(()=>new o.BKk({glslVersion:o.Wdf,vertexShader:f,fragmentShader:"precision highp float;\r\nprecision highp sampler3D;\r\n\r\nout vec4 color;\r\n\r\nin vec3 aPosition;\r\n\r\nuniform vec2 xBounds;\r\nuniform vec2 yBounds;\r\nuniform vec3 borderColor;\r\nuniform bool trim;\r\n\r\nvoid main() {\r\n\r\n    if ((aPosition.x < xBounds.x || aPosition.x > xBounds.y || aPosition.y < yBounds.x || aPosition.y > yBounds.y) && trim){\r\n        discard;\r\n    }\r\n\r\n    color = vec4(borderColor, 1.0);\r\n}",uniforms:{xBounds:{value:new o.I9Y(t[0],t[1])},yBounds:{value:new o.I9Y(r[0]/S.x,r[1]/S.x)},borderColor:{value:new o.Q1f(l)},trim:{value:!z}}}),[t,r,l,z]),_=(0,d.useMemo)(()=>n.flatMap((e,n)=>{let t=[];if("LineString"===e.geometry.type){let n=[];e.geometry.coordinates.forEach(e=>{let[t,r]=e,[i,a,l]=z?e6([-t,r]):e4([t,r],g,v);n.push(new o.Pq0(i,a,l))});let r=new Float32Array(3*n.length);n.forEach((e,n)=>{r.set([e.x,e.y,e.z],3*n)});let i=new o.LoY;i.setAttribute("position",new o.THS(r,3)),t.push(i)}else"MultiPolygon"===e.geometry.type?e.geometry.coordinates.forEach((e,n)=>{let r=n,i=e[0],a=[];i.forEach(e=>{let[n,t]=e;r++;let[i,l,u]=z?e6([-n,t]):e4([n,t],g,v);a.push(new o.Pq0(i,l,u))});let l=new Float32Array(3*a.length);a.forEach((e,n)=>{l.set([e.x,e.y,e.z],3*n)});let u=new o.LoY;u.setAttribute("position",new o.THS(l,3)),t.push(u)}):("Polygon"===e.geometry.type?[e.geometry.coordinates]:e.geometry.coordinates).forEach(e=>{let n=[];e.forEach(e=>{e.forEach(e=>{let[t,r]=e,[i,a,l]=z?e6([-t,r]):e4([t,r],g,v);n.push(new o.Pq0(i,a,l))})});let r=new Float32Array(3*n.length);n.forEach((e,n)=>{r.set([e.x,e.y,e.z],3*n)});let i=new o.LoY;i.setAttribute("position",new o.THS(r,3)),t.push(i)});return t}),[n,z,y,g,v]),w=(0,d.useMemo)(()=>_.map((e,n)=>{let t=new o.N1A(e,b);return(0,a.jsx)("primitive",{object:t},"border-".concat(n))}),[_,b]);return(0,a.jsx)(a.Fragment,{children:w})}let e7=()=>{let[e,n]=(0,d.useState)(null),[t,r]=(0,d.useState)(null),[i,o]=(0,d.useState)(!1),{zRange:l,plotType:u,showBorders:s}=(0,c.Ws)((0,m.k)(e=>({zRange:e.zRange,plotType:e.plotType,showBorders:e.showBorders}))),[f,x]=(0,d.useState)(!1);return(0,d.useEffect)(()=>{"sphere"===u?x(!0):x(!1)},[u]),(0,T.D)(e=>{let{camera:n}=e;!f&&(Math.abs(n.rotation.z)>Math.PI/2?o(!0):i&&o(!1))}),(0,d.useEffect)(()=>{fetch("./ne_110m_coastline.json").then(e=>e.json()).then(e=>n(e.features)),fetch("./ne_110m_admin_0_countries.json").then(e=>e.json()).then(e=>r(e.features))},[]),(0,a.jsxs)("group",{visible:s&&"point-cloud"!=u,position:f?[0,0,0]:[0,0,i?l[0]:l[1]],children:[e&&(0,a.jsx)(e9,{features:e}),t&&(0,a.jsx)(e9,{features:t})]})};var e8=t(2349),ne=t(3571),nn=t(9385);let nt=e=>{let{flipX:n,flipY:t,flipDown:r}=e,{dimArrays:i,dimNames:l,dimUnits:u,shape:s,dataShape:f}=(0,c.on)((0,m.k)(e=>({dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits,shape:e.shape,dataShape:e.dataShape}))),{xRange:x,yRange:y,zRange:S,plotType:g,timeScale:v,animProg:z}=(0,c.Ws)((0,m.k)(e=>({xRange:e.xRange,yRange:e.yRange,zRange:e.zRange,plotType:e.plotType,timeScale:e.timeScale,animProg:e.animProg}))),{hideAxis:b,hideAxisControls:_}=(0,c.qi)((0,m.k)(e=>({hideAxis:e.hideAxis,hideAxisControls:e.hideAxisControls}))),w=[i[0].length,i[1].length,i[2].length],[k,D]=(0,d.useState)(7),[I,C]=(0,d.useState)(7),[M,O]=(0,d.useState)(7),P=(0,d.useMemo)(()=>"point-cloud"==g,[g]),Y=(0,d.useMemo)(()=>f[0]/f[1]*v/2,[f,v]),B=(0,d.useMemo)(()=>s.y/s.x,[s]),j=(0,h.$m)("--text-plot"),A=(0,d.useMemo)(()=>{if(j)return new o.Q1f(j).getHex()},[j]),L=(0,d.useMemo)(()=>new nn.G({color:A||0,linewidth:2}),[A]),X=(0,d.useMemo)(()=>{let e=new e8.n().setPositions([x[0]-.025,0,0,x[1]+.025,0,0]);return new ne.b(e,L)},[x,L]),U=(0,d.useMemo)(()=>{let e=new e8.n().setPositions([0,y[0]*B,0,0,y[1]*B+.025,0]);return new ne.b(e,L)},[y,B,L]),N=(0,d.useMemo)(()=>{let e=new e8.n().setPositions([0,0,P?S[0]*Y-.025:S[0]-.025,0,0,P?S[1]*Y+.025:S[1]+.025]);return new ne.b(e,L)},[S,Y,P,L]),T=(0,d.useMemo)(()=>{let e=new e8.n().setPositions([0,0,0,0,0,.05]);return new ne.b(e,L)},[L]),G=k/(k-1),E=1/(k-1),R=I/(I-1),F=1/(I-1),q=M/(M-1),Z=1/(M-1);return(0,a.jsxs)("group",{visible:"sphere"!=g&&"flat"!=g&&!b,children:[(0,a.jsxs)("group",{position:[0,B*y[0],0],children:[(0,a.jsxs)("group",{position:[0,0,n?P?S[0]*Y-.025:S[0]-.025:P?S[1]*Y+.025:S[1]+.025],rotation:[r?n?-Math.PI/2:Math.PI/2:0,0,0],children:[(0,a.jsx)("primitive",{object:X},"xLine"),Array(k).fill(null).map((e,t)=>(x[0]+1)/2<=t*G/k&&(x[1]+1)/2>=t*G/k&&(0,a.jsxs)("group",{position:[-1+t*G/(k/2),0,0],children:[(0,a.jsx)("primitive",{object:T.clone(),rotation:[0,n?Math.PI:0,0]},t),(0,a.jsx)(V.E,{anchorX:0==t?n?"right":"left":t==k-1?n?"left":"right":"center",anchorY:"top",fontSize:.05,color:A,"material-depthTest":!1,rotation:[-Math.PI/2,0,n?Math.PI:0],position:[0,0,n?-.05:.05],children:(0,p.SB)(i[2][Math.floor((w[2]-1)*t*E)],u[2])},"textX_".concat(t))]},"xGroup_".concat(t))),(0,a.jsxs)("group",{rotation:[-Math.PI/2,0,n?Math.PI:0],position:[(x[0]+x[1])/2,0,n?-.2:.2],children:[(0,a.jsx)(V.E,{anchorX:"center",anchorY:"top",fontSize:.1,color:A,"material-depthTest":!1,children:l[2]},"xTitle"),(0,a.jsxs)("group",{visible:!_,children:[k<20&&(0,a.jsx)(V.E,{anchorX:"center",anchorY:"middle",fontSize:.2,color:A,"material-depthTest":!1,position:[.2,-.2,0],onClick:e=>D(e=>Math.min(e+1,20)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"+"},"xAdd"),k>1&&(0,a.jsx)(V.E,{anchorX:"center",anchorY:"middle",fontSize:.2,color:A,"material-depthTest":!1,position:[-.2,-.2,0],onClick:e=>D(e=>Math.max(e-1,1)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"-"},"xSub")]})]})]}),(0,a.jsxs)("group",{position:[t?x[1]+.025:x[0]-.025,0,0],rotation:[0,0,r?t?-Math.PI/2:Math.PI/2:0],children:[(0,a.jsx)("primitive",{object:N},"zLine"),Array(M).fill(null).map((e,n)=>(S[0]+1)/2<=n*q/M&&(S[1]+1)/2>=n*q/M&&(0,a.jsxs)("group",{position:[0,0,P?-Y+n*q/(M/2)*Y:-1+n*q/(M/2)],children:[(0,a.jsx)("primitive",{object:T.clone(),rotation:[0,t?Math.PI/2:-Math.PI/2,0]},n),(0,a.jsx)(V.E,{anchorX:0==n?t?"right":"left":n==M-1?t?"left":"right":"center",anchorY:"top",fontSize:.04,color:A,"material-depthTest":!1,rotation:[-Math.PI/2,0,t?Math.PI/2:-Math.PI/2],position:[t?.05:-.05,0,0],children:(0,p.SB)(i[0][(Math.floor((w[0]-1)*n*Z)+Math.floor(w[0]*z))%w[0]],u[0])},"textY_".concat(n))]},"zGroup_".concat(n))),(0,a.jsxs)("group",{rotation:[-Math.PI/2,0,t?Math.PI/2:-Math.PI/2],position:[t?.2:-.2,0,P?(S[0]+S[1])/2*Y:(S[0]+S[1])/2],children:[(0,a.jsx)(V.E,{anchorX:"center",anchorY:"top",fontSize:.1,color:A,"material-depthTest":!1,children:l[0]},"zTitle"),(0,a.jsxs)("group",{visible:!_,children:[M<20&&(0,a.jsx)(V.E,{anchorX:"center",anchorY:"middle",fontSize:.2,color:A,"material-depthTest":!1,position:[.2,-.2,0],onClick:e=>O(e=>Math.min(e+1,20)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"+"},"zAdd"),M>1&&(0,a.jsx)(V.E,{anchorX:"center",anchorY:"middle",fontSize:.2,color:A,"material-depthTest":!1,position:[-.2,-.2,0],onClick:e=>O(e=>Math.max(e-1,1)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"-"},"zSub")]})]})]})]}),(0,a.jsxs)("group",{position:[t?x[0]-.025:x[1]+.025,0,n?P?S[0]*Y-.025:S[0]-.025:P?S[1]*Y+.025:S[1]+.025],children:[(0,a.jsx)("primitive",{object:U},"yLine"),Array(I).fill(null).map((e,r)=>(y[0]+1)/2<=r*R/I&&(y[1]+1)/2>=r*R/I&&(0,a.jsxs)("group",{position:[0,-s.y/2+r*R/(I/2)*B,0],children:[(0,a.jsx)("primitive",{object:T.clone(),rotation:[0,t?-Math.PI/2:Math.PI/2,0]},r),(0,a.jsx)(V.E,{anchorX:t?n?"left":"right":n?"right":"left",anchorY:"middle",fontSize:.05,color:A,"material-depthTest":!1,rotation:[0,n?Math.PI:0,0],position:[t?-.07:.07,0,0],children:(0,p.SB)(i[1][Math.floor((w[1]-1)*r*F)],u[1])},"text_".concat(r))]},"yGroup_".concat(r))),(0,a.jsxs)("group",{rotation:[0,n?Math.PI:0,0],position:[t?-.25:.25,(y[0]+y[1])/2*B,0],children:[(0,a.jsx)(V.E,{anchorX:t?n?"left":"right":n?"right":"left",anchorY:"middle",fontSize:.1,color:A,"material-depthTest":!1,children:l[1]},"yTitle"),(0,a.jsxs)("group",{visible:!_,children:[I<20&&(0,a.jsx)(V.E,{anchorX:"center",anchorY:"middle",fontSize:.2,color:A,"material-depthTest":!1,position:[t==n?.2:-.2,.2,0],onClick:e=>C(e=>Math.min(e+1,20)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"+"},"zAdd"),I>1&&(0,a.jsx)(V.E,{anchorX:"center",anchorY:"middle",fontSize:.2,color:A,"material-depthTest":!1,position:[t==n?.2:-.2,-.2,0],onClick:e=>C(e=>Math.max(e-1,1)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"-"},"zSub")]})]})]})]})},nr=()=>{let{dimArrays:e,dimNames:n,dimUnits:t}=(0,c.on)((0,m.k)(e=>({dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits}))),{plotType:r}=(0,c.Ws)((0,m.k)(e=>({plotType:e.plotType}))),{hideAxis:i,hideAxisControls:l}=(0,c.qi)((0,m.k)(e=>({hideAxis:e.hideAxis,hideAxisControls:e.hideAxisControls}))),u=e.map(e=>e.length),s=e.length-1,f=e.length-2,[x,y]=(0,d.useState)(7),[S,g]=(0,d.useState)(7),v=(0,d.useMemo)(()=>u[f]/u[s],[u]),z=(0,h.$m)("--text-plot"),b=(0,d.useMemo)(()=>{if(z)return new o.Q1f(z).getHex()},[z]),_=(0,d.useMemo)(()=>new nn.G({color:b||0,linewidth:2}),[b]),w=(0,d.useMemo)(()=>{let e=new e8.n().setPositions([-1.025,0,0,1.025,0,0]);return new ne.b(e,_)},[_]),k=(0,d.useMemo)(()=>{let e=new e8.n().setPositions([0,-v-.025,0,0,v+.025,0]);return new ne.b(e,_)},[v,_]),D=(0,d.useMemo)(()=>{let e=new e8.n().setPositions([0,0,0,0,0,.05]);return new ne.b(e,_)},[_]),I=x/(x-1),C=1/(x-1),M=S/(S-1),O=1/(S-1);return(0,a.jsxs)("group",{visible:"flat"==r&&!i,children:[(0,a.jsxs)("group",{position:[0,-v-.025,0],rotation:[Math.PI/2,0,0],children:[(0,a.jsx)("primitive",{object:w},"xLine"),Array(x).fill(null).map((n,r)=>(0,a.jsxs)("group",{position:[-1+r*I/(x/2),0,0],children:[(0,a.jsx)("primitive",{object:D.clone(),rotation:[0,0,0]},r),(0,a.jsx)(V.E,{anchorX:"center",anchorY:"top",fontSize:.05,color:b,"material-depthTest":!1,rotation:[-Math.PI/2,0,0],position:[0,0,.05],children:(0,p.SB)(e[s][Math.floor((u[s]-1)*r*C)],t[s])},"textX_".concat(r))]},"xGroup_".concat(r))),(0,a.jsxs)("group",{rotation:[-Math.PI/2,0,0],position:[0,0,.2],children:[(0,a.jsx)(V.E,{anchorX:"center",anchorY:"top",fontSize:.1,color:b,"material-depthTest":!1,children:n[s]},"xTitle"),(0,a.jsxs)("group",{visible:!l,children:[x<20&&(0,a.jsx)(V.E,{anchorX:"center",anchorY:"middle",fontSize:.15,color:b,"material-depthTest":!1,position:[.2,-.15,0],onClick:e=>y(e=>Math.min(e+1,20)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"+"},"xAdd"),x>1&&(0,a.jsx)(V.E,{anchorX:"center",anchorY:"middle",fontSize:.15,color:b,"material-depthTest":!1,position:[-.2,-.15,0],onClick:e=>y(e=>Math.max(e-1,1)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"-"},"xSub")]})]})]}),(0,a.jsxs)("group",{position:[-1.025,0,0],children:[(0,a.jsx)("primitive",{object:k},"yLine"),Array(S).fill(null).map((n,r)=>(0,a.jsxs)("group",{position:[0,-v+r*M/(S/2)*v,0],rotation:[0,0,Math.PI],children:[(0,a.jsx)("primitive",{object:D.clone(),rotation:[0,Math.PI/2,0]},r),(0,a.jsx)(V.E,{anchorX:"right",anchorY:"middle",fontSize:.05,color:b,"material-depthTest":!1,rotation:[0,0,-Math.PI],position:[.07,0,0],children:(0,p.SB)(e[f][Math.floor((u[f]-1)*r*O)],t[f])},"text_".concat(r))]},"yGroup_".concat(r))),(0,a.jsxs)("group",{rotation:[0,0,0],position:[-.25,0,0],children:[(0,a.jsx)(V.E,{anchorX:"right",anchorY:"middle",fontSize:.1,color:b,"material-depthTest":!1,children:n[f]},"yTitle"),(0,a.jsxs)("group",{visible:!l,children:[S<20&&(0,a.jsx)(V.E,{anchorX:"center",anchorY:"middle",fontSize:.15,color:b,"material-depthTest":!1,position:[-.1,.2,0],onClick:e=>g(e=>Math.min(e+1,20)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"+"},"zAdd"),S>1&&(0,a.jsx)(V.E,{anchorX:"center",anchorY:"middle",fontSize:.15,color:b,"material-depthTest":!1,position:[-.1,-.2,0],onClick:e=>g(e=>Math.max(e-1,1)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"-"},"zSub")]})]})]})]})},ni=()=>{let[e,n]=(0,d.useState)(!1),[t,r]=(0,d.useState)(!1),[i,o]=(0,d.useState)(!1),{isFlat:l}=(0,c.on)((0,m.k)(e=>({isFlat:e.isFlat})));return(0,T.D)(a=>{let{camera:l}=a,u=Math.abs(l.rotation.z)>Math.PI/2;e!==u&&n(u);let s=l.rotation.z>0&&l.rotation.x<0||l.rotation.z<=0&&l.rotation.x>0;t!==s&&r(s);let d=l.rotation.x>0||l.position.y<=0;i!==d&&o(d)}),(0,a.jsxs)(a.Fragment,{children:[!l&&(0,a.jsx)(nt,{flipX:e,flipY:t,flipDown:i}),(0,a.jsx)(nr,{})]})};var na=t(9341);function no(e){let{className:n,...t}=e;return(0,a.jsx)("div",{"data-slot":"table-container",className:"relative w-full overflow-x-auto",children:(0,a.jsx)("table",{"data-slot":"table",className:(0,w.cn)("w-full caption-bottom text-sm",n),...t})})}function nl(e){let{className:n,...t}=e;return(0,a.jsx)("tbody",{"data-slot":"table-body",className:(0,w.cn)("[&_tr:last-child]:border-0",n),...t})}function nu(e){let{className:n,...t}=e;return(0,a.jsx)("tr",{"data-slot":"table-row",className:(0,w.cn)("hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",n),...t})}function ns(e){let{className:n,...t}=e;return(0,a.jsx)("td",{"data-slot":"table-cell",className:(0,w.cn)("p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",n),...t})}var nd=t(4716);function nf(e){let{className:n,children:t,...r}=e;return(0,a.jsxs)(nd.bL,{"data-slot":"scroll-area",className:(0,w.cn)("relative",n),...r,children:[(0,a.jsx)(nd.LM,{"data-slot":"scroll-area-viewport",className:"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1",children:t}),(0,a.jsx)(nc,{}),(0,a.jsx)(nd.OK,{})]})}function nc(e){let{className:n,orientation:t="vertical",...r}=e;return(0,a.jsx)(nd.VM,{"data-slot":"scroll-area-scrollbar",orientation:t,className:(0,w.cn)("flex touch-none p-px transition-colors select-none","vertical"===t&&"h-full w-2.5 border-l border-l-transparent","horizontal"===t&&"h-2.5 flex-col border-t border-t-transparent",n),...r,children:(0,a.jsx)(nd.lr,{"data-slot":"scroll-area-thumb",className:"bg-border relative flex-1 rounded-full"})})}var nm=t(489),nx=t(1950),np=t(355);function ny(){let{variables:e,zMeta:n,setVariable:t}=(0,c.on)((0,m.k)(e=>({variables:e.variables,zMeta:e.zMeta,setVariable:e.setVariable}))),[r,i]=(0,d.useState)(""),[o,l]=(0,d.useState)(null),[u,s]=(0,d.useState)(!1),f=(0,d.useMemo)(()=>{let n=r.toLowerCase().trim();return n?e.filter(e=>e.toLowerCase().includes(n)):e},[r,e]);return(0,a.jsx)("div",{className:"min-h-screen w-full flex items-start justify-center pt-[8vh] p-0 relative z-1",children:(0,a.jsxs)(na.Zp,{className:"w-full max-w-full md:max-w-[80%] shadow-xl rounded-2xl border-0 bg-transparent",children:[(0,a.jsx)(na.aR,{className:"gap-3",children:(0,a.jsxs)("div",{className:"flex items-center gap-2 justify-center max-w-[240px] md:max-w-sm mx-auto",children:[(0,a.jsx)(nm.p,{placeholder:"Search variable...",value:r,onChange:e=>i(e.target.value),className:"flex-1"}),(0,a.jsx)(b.$,{variant:"secondary",onClick:()=>i(""),children:"Clear"})]})}),(0,a.jsx)(na.Wu,{children:(0,a.jsx)(nf,{className:"h-[65vh] rounded-md border-0",children:(0,a.jsx)(no,{children:(0,a.jsx)(nl,{children:f.length>0?f.map((e,t)=>(0,a.jsx)(nu,{className:"hover:bg-gray",children:(0,a.jsx)(ns,{className:"text-center",children:(0,a.jsxs)(np.lG,{open:u&&(null==o?void 0:o.name)===e,onOpenChange:e=>{e||(s(!1),l(null))},children:[(0,a.jsx)(np.zM,{asChild:!0,children:(0,a.jsx)(b.$,{variant:"ghost",className:"w-full text-center text-lg cursor-pointer",onClick:()=>{l(null==n?void 0:n.find(n=>n.name===e)),s(!0)},children:e})}),(0,a.jsxs)(np.Cf,{"aria-describedby":"Data information for selected variable","aria-description":"Data information for selected variable",className:"max-w-[85%] md:max-w-2xl max-h-[80vh] overflow-y-auto",children:[(0,a.jsx)(np.L3,{className:"text-center text-lg font-semibold",children:e}),(0,a.jsx)("div",{className:"mt-4",children:o&&(0,a.jsx)(nx.A,{meta:o,setShowMeta:s,noCard:!0})})]})]})})},t)):(0,a.jsx)(nu,{children:(0,a.jsx)(ns,{className:"text-center text-muted-foreground py-8",children:r?"No variables found matching your search.":"No variables available."})})})})})})]})})}o.l2R.enabled=!0;let nS=function(){let{initStore:e,timeSeries:n,variable:t,metadata:r,plotOn:i,setZMeta:o,setVariables:f,setPlotOn:x,setTitleDescription:p,titleDescription:y}=(0,c.on)((0,m.k)(e=>({initStore:e.initStore,timeSeries:e.timeSeries,variable:e.variable,metadata:e.metadata,plotOn:e.plotOn,setZMeta:e.setZMeta,setVariables:e.setVariables,setPlotOn:e.setPlotOn,setTitleDescription:e.setTitleDescription,titleDescription:e.titleDescription}))),{setMaxTextureSize:S}=(0,c.Ws)((0,m.k)(e=>({setMaxTextureSize:e.setMaxTextureSize}))),{currentStore:g,setCurrentStore:v}=(0,c.SZ)((0,m.k)(e=>({currentStore:e.currentStore,setCurrentStore:e.setCurrentStore})));(0,d.useEffect)(()=>{v((0,s.Oe)(e))},[e,v]);let z=(0,d.useMemo)(()=>new s.Y5(g),[g]);return(0,d.useEffect)(()=>{let n=!0;(0,u.tz)(g,e).then(e=>{n&&p(e)});let t=(0,u.Tk)(g),r=(0,u.Bi)(t);return t.then(e=>o(e)),r.then(e=>f(e)),()=>{n=!1}},[g,e,o,f,p]),(0,d.useEffect)(()=>{let e=new l.WebGLRenderer,n=e.getContext();return S(n.getParameter(n.MAX_TEXTURE_SIZE)),()=>{e.dispose()}},[S]),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(h.oU,{}),(0,a.jsx)(h.$D,{}),!i&&(0,a.jsx)(h.Fp,{}),(0,a.jsx)(h.Rh,{}),(0,a.jsx)(h.wC,{}),"Default"===t&&(0,a.jsx)(ny,{}),"Default"!=t&&(0,a.jsx)(eK,{ZarrDS:z}),r&&(0,a.jsx)(h.OS,{data:r}),Object.keys(n).length>=1&&(0,a.jsx)(U,{})]})}},9519:()=>{}},e=>{e.O(0,[248,577,197,669,813,444,755,858,56,667,800,645,812,959,152,195,499,100,970,984,65,705,127,434,212,246,358],()=>e(e.s=1894)),_N_E=e.O()}]);