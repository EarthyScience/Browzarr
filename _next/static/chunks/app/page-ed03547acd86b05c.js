(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[974],{601:()=>{},1417:(e,n,t)=>{"use strict";t.d(n,{default:()=>el});var r=t(5917),a=t(4928),i=t(4021),o=t(7027),s=t(2185),l=t(8738),u=t(1392);t(4435),t(7257);let c=()=>{let{variables:e,zMeta:n,setVariable:t}=(0,l.on)((0,u.k)(e=>({variables:e.variables,zMeta:e.zMeta,setVariable:e.setVariable}))),[a,i]=(0,s.useState)(Math.floor(e.length/2)),[o,c]=(0,s.useState)(null),[d,f]=(0,s.useState)(82),m=(0,s.useRef)(null),p=(0,s.useRef)(0);function x(){let e=window.innerWidth;e<=480?f(42):e<=570?f(54):f(82)}return(0,s.useEffect)(()=>{let e=e=>{e.cancelable&&e.preventDefault()};return document.addEventListener("touchmove",e,{passive:!1}),()=>{document.removeEventListener("touchmove",e)}},[]),(0,s.useEffect)(()=>{if(e&&n){let t=e[a];c(n.find(e=>e.name===t))}},[a,e]),(0,s.useEffect)(()=>{let e=window.innerWidth;return e<=480?f(42):e<=570?f(54):f(82),window.addEventListener("resize",x)},[]),(0,r.jsx)("div",{className:"scroll-container",onWheel:n=>{let t=a+(n.deltaY>0?1:-1);t>=0&&t<e.length&&i(t)},onTouchMove:n=>{let t=n.touches[0].clientY,r=m.current?m.current:t;if(m.current=t,p.current+=r-t,Math.abs(p.current)>=d){let n=a+(p.current>0?1:-1);n>=0&&n<e.length&&(i(n),p.current=0)}},onTouchEnd:()=>{m.current=null,p.current=0},children:(0,r.jsx)("div",{className:"scroll-element",style:{transform:"translateY(calc(40% + ".concat(-a*d,"px))")},children:e.map((e,n)=>{let o=Math.abs(a-n);return(0,r.jsx)("div",{className:"scroll-item",style:{opacity:1-.3*o,fontWeight:a===n?"bold":"normal"},onClick:()=>i(n),onDoubleClick:()=>t(e),children:e},n)})})})},d=" // by Jeran Poehls\r\n\r\nout vec3 vOrigin;\r\nout vec3 vDirection;\r\nout vec3 aPosition;\r\n\r\nout vec2 Vuv;\r\n\r\nvoid main() {\r\n    vec4 worldPos = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n    aPosition = position; //Pass out position for sphere frag\r\n    vOrigin = vec3( inverse( modelMatrix ) * vec4( cameraPosition, 1.0 ) ).xyz;\r\n    vDirection = position - vOrigin;\r\n    Vuv = uv;\r\n    gl_Position = projectionMatrix * worldPos;\r\n}",f=e=>{let{volTexture:n}=e,{shape:t,colormap:i,flipY:o}=(0,l.on)((0,u.k)(e=>({shape:e.shape,colormap:e.colormap,flipY:e.flipY}))),{valueRange:c,xRange:f,yRange:m,zRange:p,quality:x,animProg:h,cScale:v,cOffset:g,useFragOpt:y,transparency:S,nanTransparency:z,nanColor:w}=(0,l.Ws)((0,u.k)(e=>({valueRange:e.valueRange,xRange:e.xRange,yRange:e.yRange,zRange:e.zRange,quality:e.quality,animProg:e.animProg,cScale:e.cScale,cOffset:e.cOffset,useFragOpt:e.useFragOpt,transparency:e.transparency,nanTransparency:e.nanTransparency,nanColor:e.nanColor}))),b=(0,s.useMemo)(()=>new a.BKk({glslVersion:a.Wdf,uniforms:{map:{value:n},cmap:{value:i},cOffset:{value:g},cScale:{value:v},threshold:{value:new a.I9Y(c[0],c[1])},scale:{value:t},flatBounds:{value:new a.IUQ(-f[1],-f[0],p[0],p[1])},vertBounds:{value:new a.I9Y(m[0]/t.x,m[1]/t.x)},steps:{value:x},animateProg:{value:h},transparency:{value:S},nanAlpha:{value:1-z},nanColor:{value:new a.Q1f(w)}},vertexShader:d,fragmentShader:y?"// This is an optimized version of the original Volumetric shader\r\n\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nin vec3 vOrigin;\r\nin vec3 vDirection;\r\n\r\nout vec4 color;\r\n\r\nuniform sampler3D map;\r\nuniform sampler2D cmap;\r\n\r\nuniform float cOffset;\r\nuniform float cScale;\r\nuniform vec3 scale;\r\nuniform vec2 threshold;\r\nuniform float steps;\r\nuniform vec4 flatBounds;\r\nuniform vec2 vertBounds;\r\nuniform float animateProg;\r\nuniform float transparency;\r\nuniform float nanAlpha;\r\nuniform vec3 nanColor;\r\n\r\nvec2 hitBox(vec3 orig, vec3 dir) {\r\n    vec3 box_min = vec3(-(scale * 0.5));\r\n    vec3 box_max = vec3(scale * 0.5);\r\n    vec3 inv_dir = 1.0 / dir;\r\n    vec3 tmin_tmp = (box_min - orig) * inv_dir;\r\n    vec3 tmax_tmp = (box_max - orig) * inv_dir;\r\n    vec3 tmin = min(tmin_tmp, tmax_tmp);\r\n    vec3 tmax = max(tmin_tmp, tmax_tmp);\r\n    float t0 = max(tmin.x, max(tmin.y, tmin.z));\r\n    float t1 = min(tmax.x, min(tmax.y, tmax.z));\r\n    return vec2(t0, t1);\r\n}\r\n\r\nfloat sample1( vec3 p ) {\r\n    return texture( map, p ).r;\r\n}\r\n\r\n#define epsilon 0.0001\r\n\r\nvoid main() {\r\n    vec3 rayDir = normalize(vDirection);\r\n    vec2 bounds = hitBox(vOrigin, rayDir);\r\n\r\n    if (bounds.x > bounds.y) discard;\r\n\r\n    bounds.x = max(bounds.x, 0.0);\r\n\r\n    vec3 p = vOrigin + bounds.x * rayDir;\r\n    vec3 inc = 1.0 / abs(rayDir);\r\n\r\n    //Step Sizes\r\n    float fineDelta = min(inc.x, min(inc.y, inc.z)) / steps;\r\n\r\n    float coarseDelta = min(inc.x, min(inc.y, inc.z))/50.;\r\n\r\n    float delta = fineDelta;\r\n\r\n    vec4 accumColor = vec4(0.0);\r\n    float alphaAcc = 0.0;\r\n\r\n    float t = bounds.x;\r\n    int countdown = 0;\r\n    bool useCoarseStep = false;\r\n\r\n    while (t < bounds.y) {\r\n        vec3 p = vOrigin + rayDir * t;\r\n        \r\n        // --- Boundary checks ---\r\n        if (p.x < flatBounds.x || p.x > flatBounds.y ||\r\n            p.z < flatBounds.z || p.z > flatBounds.w ||\r\n            p.y < vertBounds.x || p.y > vertBounds.y) {\r\n\r\n            t += useCoarseStep ? coarseDelta : fineDelta;\r\n            continue;\r\n        }\r\n\r\n        vec3 texCoord = p / scale + 0.5;\r\n        texCoord.z = mod(texCoord.z + animateProg, 1.0001);\r\n        float d = sample1(texCoord);\r\n\r\n        bool cond = nanAlpha == 0. ? (d > threshold.x) && (d < threshold.y) : (d > threshold.x) && (d < threshold.y+.01); //We skip over nans if the transparency is enabled\r\n        \r\n        if (cond) {\r\n            // Hit something interesting - switch to fine stepping\r\n            if (useCoarseStep) {\r\n                useCoarseStep = false;\r\n                countdown = 40;\r\n                // Step back to ensure we don't miss the boundary\r\n                t -= coarseDelta;\r\n                continue;\r\n            }\r\n            if (d == 1.){\r\n                accumColor.rgb += (1.0 - alphaAcc) * pow(nanAlpha, 5.) * nanColor.rgb;\r\n                alphaAcc += pow(nanAlpha, 5.);\r\n            }\r\n            else{\r\n                float sampLoc = (d - 0.5)*cScale + 0.5;\r\n                sampLoc = min(sampLoc+cOffset,0.99);\r\n                vec4 col = texture(cmap, vec2(sampLoc, 0.5));\r\n                float alpha = pow(max(sampLoc, 0.001), transparency);\r\n                accumColor.rgb += (1.0 - alphaAcc) * alpha * col.rgb;\r\n                alphaAcc += alpha * (1.0 - alphaAcc);\r\n            }      \r\n\r\n            if (alphaAcc >= 1.0) break;\r\n            \r\n            t += fineDelta;\r\n        }\r\n        else {\r\n            // Nothing interesting here\r\n            if (countdown > 0) {\r\n                countdown--;\r\n                t += fineDelta; // Continue with fine steps while countdown > 0\r\n            } else {\r\n                useCoarseStep = true;\r\n                t += coarseDelta; // Switch to coarse steps\r\n            }\r\n        }\r\n    }\r\n    accumColor.a = alphaAcc; // Set the final accumulated alpha\r\n    color = accumColor;\r\n    if (color.a == 0.0) discard;\r\n}\r\n":"// by Jeran Poehls\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nin vec3 vOrigin;\r\nin vec3 vDirection;\r\n\r\nout vec4 color;\r\n\r\nuniform sampler3D map;\r\nuniform sampler2D cmap;\r\n\r\nuniform float cOffset;\r\nuniform float cScale;\r\nuniform vec3 scale;\r\nuniform vec2 threshold;\r\nuniform float steps;\r\nuniform vec4 flatBounds;\r\nuniform vec2 vertBounds;\r\nuniform float animateProg;\r\nuniform float transparency;\r\nuniform float nanAlpha;\r\nuniform vec3 nanColor;\r\n\r\n\r\nvec2 hitBox(vec3 orig, vec3 dir) {\r\n    vec3 box_min = vec3(-(scale * 0.5));\r\n    vec3 box_max = vec3(scale * 0.5);\r\n    vec3 inv_dir = 1.0 / dir;\r\n    vec3 tmin_tmp = (box_min - orig) * inv_dir;\r\n    vec3 tmax_tmp = (box_max - orig) * inv_dir;\r\n    vec3 tmin = min(tmin_tmp, tmax_tmp);\r\n    vec3 tmax = max(tmin_tmp, tmax_tmp);\r\n    float t0 = max(tmin.x, max(tmin.y, tmin.z));\r\n    float t1 = min(tmax.x, min(tmax.y, tmax.z));\r\n    return vec2(t0, t1);\r\n}\r\n\r\nfloat sample1( vec3 p ) {\r\n    return texture( map, p ).r;\r\n}\r\n\r\n#define epsilon 0.0001\r\n\r\nvoid main() {\r\n    vec3 rayDir = normalize(vDirection);\r\n    vec2 bounds = hitBox(vOrigin, rayDir);\r\n\r\n    if (bounds.x > bounds.y) discard;\r\n\r\n    bounds.x = max(bounds.x, 0.0);\r\n\r\n    vec3 p = vOrigin + bounds.x * rayDir;\r\n    vec3 inc = 1.0 / abs(rayDir);\r\n    float delta = min(inc.x, min(inc.y, inc.z));\r\n    delta /= steps;\r\n    vec4 accumColor = vec4(0.0);\r\n    float alphaAcc = 0.0;\r\n\r\n    for (float t = bounds.x; t < bounds.y; t += delta) {\r\n        p = vOrigin + rayDir * t;\r\n        if (p.x > -flatBounds.x || p.x < -flatBounds.y) { \r\n            continue;\r\n        }\r\n        if (-p.z > -flatBounds.z || -p.z < -flatBounds.w) {\r\n            continue;\r\n        }\r\n        if (p.y < vertBounds.x || p.y > vertBounds.y) {\r\n            continue;\r\n        }\r\n\r\n        vec3 texCoord = p / scale + 0.5;\r\n        texCoord.z = mod(texCoord.z + animateProg, 1.0001);\r\n        float d = sample1(texCoord);\r\n\r\n        bool cond = nanAlpha == 0. ? (d > threshold.x) && (d < threshold.y) : (d > threshold.x) && (d < threshold.y+.01); //We skip over nans if the transparency is enabled\r\n        \r\n        if (cond) {\r\n            if (d == 1.){\r\n                accumColor.rgb += (1.0 - alphaAcc) * pow(nanAlpha, 5.) * nanColor.rgb;\r\n                alphaAcc += pow(nanAlpha, 5.);\r\n            }\r\n            else{\r\n                float sampLoc = (d - 0.5)*cScale + 0.5;\r\n                sampLoc = min(sampLoc+cOffset,0.99);\r\n                vec4 col = texture(cmap, vec2(sampLoc, 0.5));\r\n                float alpha = pow(max(sampLoc, 0.001), transparency);\r\n                accumColor.rgb += (1.0 - alphaAcc) * alpha * col.rgb;\r\n                alphaAcc += alpha * (1.0 - alphaAcc);\r\n            }      \r\n\r\n            if (alphaAcc >= 1.0) break;\r\n        }\r\n    }\r\n\r\n    accumColor.a = alphaAcc; // Set the final accumulated alpha\r\n    color = accumColor;\r\n    if (color.a == 0.0) discard;\r\n}\r\n",transparent:!0,blending:a.NTi,depthWrite:!1,side:a.hsX}),[n,i,g,v,c,f,m,p,x,h,y,S,z,w]),C=(0,s.useMemo)(()=>new a.WBB(2,4),[]);return(0,s.useEffect)(()=>()=>{C.dispose()},[]),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("mesh",{geometry:C,scale:[1,o?-1:1,1],children:(0,r.jsx)("primitive",{attach:"material",object:b})})})};var m=t(8042);let p=e=>{let{ZarrDS:n}=e,[t,i]=(0,s.useState)(null),{setTimeSeries:o,setPlotDim:c,setDimCoords:d,updateTimeSeries:f,updateDimCoords:p}=(0,l.on)((0,u.k)(e=>({setTimeSeries:e.setTimeSeries,setPlotDim:e.setPlotDim,setDimCoords:e.setDimCoords,updateTimeSeries:e.updateTimeSeries,updateDimCoords:e.updateDimCoords}))),{shape:x,dimArrays:h,dimNames:v,dimUnits:g}=(0,l.on)((0,u.k)(e=>({shape:e.shape,dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits}))),y=(0,l.Ws)(e=>e.selectTS),S=(0,s.useRef)(null),z=(0,s.useMemo)(()=>new a.iNn(1,1,1),[]);return(0,s.useEffect)(()=>()=>{z.dispose()},[]),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("mesh",{geometry:z,scale:x,onClick:e=>{e.stopPropagation(),e.intersections.length>0&&y&&function(e){let t=e.point,r=e.uv,a=e.normal,s=(0,m.getUnitAxis)(a);if(s!=S.current&&(o({}),d({})),S.current=s,n){var l,u;let e=n.GetTimeSeries({uv:r,normal:a}),t=a.toArray().map((e,n)=>Math.abs(e)>0?n:null).filter(e=>null!==e);c(2-t[0]);let i=(0,m.parseUVCoords)({normal:a,uv:r}).map((e,n)=>e?h[n][Math.round(e*h[n].length)]:null),o=v.filter((e,n)=>null!==i[n]),s=g.filter((e,n)=>null!==i[n]);i=i.filter(e=>null!==e);let d="".concat(i[0],"_").concat(i[1]);f({[d]:e}),p({[d]:{first:{name:o[0],loc:null!=(l=i[0])?l:0,units:s[0]},second:{name:o[1],loc:null!=(u=i[1])?u:0,units:s[1]},plot:{units:g[2-t[0]]}}})}i(t)}(e.intersections[0])},children:(0,r.jsx)("meshBasicMaterial",{transparent:!0,opacity:0})}),t&&(0,r.jsxs)("mesh",{position:t,scale:.01,children:[(0,r.jsx)("boxGeometry",{}),(0,r.jsx)("meshBasicMaterial",{color:"#ff0000"})]})]})},x=e=>{let{dimensions:n,ZarrDS:t,setters:a}=e,{width:i,height:o,depth:c}=n,{setPointIDs:d,setStride:f,setDimWidth:p}=a,x=(0,l.Ws)(e=>e.selectTS),h=i/o,v=c/o,{dimArrays:g,dimUnits:y,dimNames:S,strides:z,setPlotDim:w,setTimeSeries:b,updateTimeSeries:C,setDimCoords:P,updateDimCoords:D}=(0,l.on)((0,u.k)(e=>({dimArrays:e.dimArrays,dimUnits:e.dimUnits,dimNames:e.dimNames,strides:e.strides,setPlotDim:e.setPlotDim,setTimeSeries:e.setTimeSeries,updateTimeSeries:e.updateTimeSeries,setDimCoords:e.setDimCoords,updateDimCoords:e.updateDimCoords}))),k=(0,s.useRef)(null),_=(0,l.Ws)(e=>e.timeScale);return(0,r.jsxs)("mesh",{scale:[2*h,2,2*v*_],onClick:function(e){if(!x)return;let n=e.uv,r=e.normal,a=(0,m.getUnitAxis)(r);if(a!=k.current&&(b({}),P({}),d(Array(10).fill(-1))),k.current=a,t){var s,l;let e=t.GetTimeSeries({uv:n,normal:r}),a=r.toArray().map((e,n)=>Math.abs(e)>0?n:null).filter(e=>null!==e);w(2-a[0]);let u=(0,m.parseUVCoords)({normal:r,uv:n}),x=u.map((e,n)=>e?g[n][Math.round(e*g[n].length-.5)]:null),h=S.filter((e,n)=>null!==x[n]),v=y.filter((e,n)=>null!==x[n]);x=x.filter(e=>null!==e);let b="".concat(x[0],"_").concat(x[1]);C({[b]:e}),D({[b]:{first:{name:h[0],loc:null!=(s=x[0])?s:0,units:v[0]},second:{name:h[1],loc:null!=(l=x[1])?l:0,units:v[1]},plot:{units:y[2-a[0]]}}});let P=[c,o,i].filter((e,n)=>null!=u[n]),k=[c,o,i].filter((e,n)=>null==u[n]),_=u.filter(e=>null!=e),M=z.filter((e,n)=>null!=u[n]),B=Math.round(_[0]*P[0]-.5),j=Math.round(_[1]*P[1]-.5),I=B*M[0]+j*M[1],O=z.filter((e,n)=>null==u[n]);p(k[0]),d(e=>[I,...e].slice(0,10)),f(O[0])}},children:[(0,r.jsx)("boxGeometry",{}),(0,r.jsx)("meshBasicMaterial",{transparent:!0,opacity:0})]})},h=e=>{let{textures:n,ZarrDS:t}=e,{texture:i,colormap:o}=n,c=(0,l.on)(e=>e.flipY),{scalePoints:d,scaleIntensity:f,pointSize:m,cScale:p,cOffset:h,valueRange:v,animProg:g,selectTS:y,timeScale:S,xRange:z,yRange:w,zRange:b}=(0,l.Ws)((0,u.k)(e=>({scalePoints:e.scalePoints,scaleIntensity:e.scaleIntensity,pointSize:e.pointSize,cScale:e.cScale,cOffset:e.cOffset,valueRange:e.valueRange,animProg:e.animProg,selectTS:e.selectTS,timeScale:e.timeScale,xRange:e.xRange,yRange:e.yRange,zRange:e.zRange}))),C=(0,l.$U)(e=>e.setOom),[P,D]=(0,s.useState)(Array(10).fill(-1)),[k,_]=(0,s.useState)(1),[M,B]=(0,s.useState)(0),{data:j,width:I,height:O,depth:A}=(0,s.useMemo)(()=>i instanceof a.dYF?{data:i.image.data,width:i.image.width,height:i.image.height,depth:i.image.depth}:(console.warn("Provided texture is not a Data3DTexture"),{data:[],width:0,height:0,depth:0}),[i]),U=(0,s.useMemo)(()=>I/O,[I,O]),L=(0,s.useMemo)(()=>A/O,[A,O]),{positions:Y,values:V}=(0,s.useMemo)(()=>{let e;try{e=new Float32Array(A*O*I*3)}catch(e){return C(!0),{positions:[],values:[]}}let n=new Uint8Array(A*O*I);for(let t=0;t<A;t++)for(let r=0;r<O;r++)for(let a=0;a<I;a++){let i=a+r*I+t*I*O,o=j[i]||0,s=(a/(I-1)-.5)*U,l=r/(O-1)-.5,u=(t/(A-1)-.5)*L,c=3*i;e[c]=2*s,e[c+1]=2*l,e[c+2]=2*u,n[i]=o}return{positions:e,values:n}},[j,I,O,A]),T=(0,s.useMemo)(()=>{let e=new a.LoY;return e.setAttribute("position",new a.qtW(Y,3)),e.setAttribute("value",new a.qtW(V,1)),e},[Y,V]),G=(0,s.useMemo)(()=>new a.BKk({glslVersion:a.Wdf,uniforms:{pointSize:{value:m},cmap:{value:o},cOffset:{value:h},cScale:{value:p},valueRange:{value:new a.I9Y(v[0],v[1])},scalePoints:{value:d},scaleIntensity:{value:f},startIDs:{value:P},stride:{value:k},showTransect:{value:y},dimWidth:{value:M},timeScale:{value:S},animateProg:{value:g},depthRatio:{value:L},flatBounds:{value:new a.IUQ(z[0]*U,z[1]*U,b[0]*L,b[1]*L)},vertBounds:{value:new a.I9Y(w[0],w[1])}},vertexShader:"attribute float value;\r\nout float vValue;\r\n\r\nflat out int highlight;\r\n\r\nuniform float pointSize;\r\nuniform bool scalePoints;\r\nuniform float scaleIntensity;\r\nuniform vec2 valueRange;\r\nuniform int[10] startIDs;\r\nuniform int stride;\r\nuniform int dimWidth;\r\nuniform bool showTransect;\r\nuniform float timeScale;\r\nuniform float animateProg;\r\nuniform float depthRatio;\r\nuniform vec4 flatBounds;\r\nuniform vec2 vertBounds;\r\n\r\nbool isValidPoint(){\r\n    for (int i = 0; i < 10; i++){\r\n        if (startIDs[i] == -1){\r\n            return false;\r\n        }\r\n        int rePos = gl_VertexID - startIDs[i];\r\n        bool isValid = rePos % stride == 0;\r\n        bool secondary = gl_VertexID < (startIDs[i] + dimWidth*stride) && gl_VertexID > startIDs[i];\r\n        isValid = isValid && secondary;\r\n        if (isValid){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nvoid main() {\r\n    vValue = value/255.;\r\n    vec3 scaledPos = position;\r\n    scaledPos.z += depthRatio;\r\n    scaledPos.z = mod(scaledPos.z + animateProg*2.*depthRatio, 2.*depthRatio);\r\n    scaledPos.z -= depthRatio;\r\n\r\n    scaledPos.z *= timeScale;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(scaledPos, 1.0);\r\n    //If it is nan we just yeet it tf out of the screen space. LMAO I love this solution\r\n    float pointScale = pointSize/gl_Position.w;\r\n    pointScale = scalePoints ? pointScale*pow(vValue,scaleIntensity) : pointScale;\r\n\r\n    bool isValid = isValidPoint();\r\n    highlight = isValid ? 1 : 0;\r\n    \r\n    if (value == 255. || (pointScale*gl_Position.w < 0.75 && scalePoints)){ //Hide points that are invisible or get too small when scalled\r\n        gl_Position = vec4(2.0, 2.0, 2.0, 1.0);\r\n    }\r\n\r\n    if (vValue < valueRange.x || vValue > valueRange.y){ //Hide points that are outside of value range\r\n        gl_Position = vec4(2.0, 2.0, 2.0, 1.0);\r\n    }\r\n\r\n    vec2 scaledZBounds = vec2(flatBounds.z,  flatBounds.w) * vec2(timeScale);\r\n    bool xCheck = scaledPos.x < flatBounds.x || scaledPos.x > flatBounds.y;\r\n    bool zCheck = scaledPos.z < scaledZBounds.x || scaledPos.z > scaledZBounds.y;\r\n    bool yCheck = scaledPos.y < vertBounds.x || scaledPos.y> vertBounds.y;\r\n\r\n    if (xCheck || zCheck || yCheck){ //Hide points that are clipped\r\n        gl_Position = vec4(2.0, 2.0, 2.0, 1.0);\r\n    }\r\n    \r\n    if (showTransect){\r\n        gl_PointSize = isValid ? max(pointScale*5. , pointScale+80./gl_Position.w) : pointScale;\r\n    }\r\n    else{\r\n        gl_PointSize =  pointScale;\r\n    }\r\n\r\n}\r\n",fragmentShader:"out vec4 Color;\r\n\r\nin float vValue;\r\nflat in int highlight;\r\n\r\n\r\nuniform sampler2D cmap;\r\nuniform float cScale;\r\nuniform float cOffset;\r\nuniform bool showTransect;\r\n\r\nvoid main() {\r\n\r\n    float sampLoc = vValue == 1. ? vValue : (vValue - 0.5)*cScale + 0.5;\r\n    sampLoc = vValue == 1. ? vValue : min(sampLoc+cOffset,0.99);\r\n    vec4 color = texture(cmap, vec2(sampLoc, 0.5));\r\n    color.a = 1.;\r\n    Color = color;\r\n    if (showTransect){\r\n        Color = highlight == 1 ? color : color * vec4(vec3(0.4),1.);\r\n    }\r\n    else{\r\n        Color = color;\r\n    }\r\n\r\n}\r\n",depthWrite:!0,transparent:!0,blending:a.NTi,side:a.$EB}),[m,o,h,p,v,d,f,P,k,y,g,S,L,U,z,w,b]);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("mesh",{scale:[1,c?-1:1,1],children:(0,r.jsx)("points",{geometry:T,material:G})}),(0,r.jsx)(x,{dimensions:{width:I,height:O,depth:A},ZarrDS:t,setters:{setPointIDs:D,setStride:_,setDimWidth:B}})]})};var v=t(5130),g=t(5496);t(7619);var y=t(5461);t(6720);var S=t(6508),z=t(7010);function w(e){let{...n}=e;return(0,r.jsx)(S.Root,{"data-slot":"dropdown-menu",...n})}function b(e){let{...n}=e;return(0,r.jsx)(S.Trigger,{"data-slot":"dropdown-menu-trigger",...n})}function C(e){let{className:n,sideOffset:t=4,...a}=e;return(0,r.jsx)(S.Portal,{children:(0,r.jsx)(S.Content,{"data-slot":"dropdown-menu-content",sideOffset:t,className:(0,z.cn)("bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",n),...a})})}function P(e){let{...n}=e;return(0,r.jsx)(S.Group,{"data-slot":"dropdown-menu-group",...n})}function D(e){let{className:n,inset:t,variant:a="default",...i}=e;return(0,r.jsx)(S.Item,{"data-slot":"dropdown-menu-item","data-inset":t,"data-variant":a,className:(0,z.cn)("focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",n),...i})}function k(e){let{className:n,...t}=e;return(0,r.jsx)(S.Separator,{"data-slot":"dropdown-menu-separator",className:(0,z.cn)("bg-border -mx-1 my-1 h-px",n),...t})}let _=s.memo(function(){let{showPoints:e,linePointSize:n,pointColor:t,useCustomPointColor:a,setLinePointSize:i,setPointColor:o,setUseCustomPointColor:s}=(0,l.Ws)((0,u.k)(e=>({showPoints:e.showPoints,linePointSize:e.linePointSize,pointColor:e.pointColor,useCustomPointColor:e.useCustomPointColor,setLinePointSize:e.setLinePointSize,setPointColor:e.setPointColor,setUseCustomPointColor:e.setUseCustomPointColor})));return e?(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("div",{className:"w-full flex items-center",children:[(0,r.jsx)("div",{className:"w-[40%]",children:(0,r.jsx)("b",{children:"Point Size"})}),(0,r.jsx)("input",{type:"range",min:1,max:10,step:.1,value:n,onChange:e=>i(parseFloat(e.target.value))})]}),(0,r.jsxs)("div",{className:"w-full flex items-center",children:[(0,r.jsx)("div",{className:"w-[40%]",children:(0,r.jsx)("b",{children:"Point Color"})}),a&&(0,r.jsx)("input",{type:"color",title:"Point Color",value:t,onChange:e=>o(e.target.value)}),(0,r.jsxs)(y.$,{className:"h-8 px-2 py-1",variant:"outline",onClick:()=>s(!a),children:["Use",a?" Browzarr Color":" Custom Color"]})]})]}):null}),M=s.memo(function(){let{lineWidth:e,lineColor:n,useLineColor:t,lineResolution:a,useCustomColor:i,setLineWidth:o,setLineColor:s,setUseLineColor:c,setLineResolution:d,setUseCustomColor:f}=(0,l.Ws)((0,u.k)(e=>({lineWidth:e.lineWidth,lineColor:e.lineColor,useLineColor:e.useLineColor,lineResolution:e.lineResolution,useCustomColor:e.useCustomColor,setLineWidth:e.setLineWidth,setLineColor:e.setLineColor,setUseLineColor:e.setUseLineColor,setLineResolution:e.setLineResolution,setUseCustomColor:e.setUseCustomColor})));return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("div",{className:"w-full flex items-center",children:[(0,r.jsx)("div",{className:"w-[40%]",children:(0,r.jsx)("b",{children:"Line Width"})}),(0,r.jsx)("input",{type:"range",min:1,max:10,step:.2,value:e,onChange:e=>o(parseFloat(e.target.value))})]}),(0,r.jsxs)("div",{className:"w-full flex items-center",children:[(0,r.jsx)("div",{className:"w-[40%]",children:(0,r.jsx)("b",{children:"Line Resolution"})}),(0,r.jsx)("input",{type:"range",min:1,max:10,step:1,value:a,onChange:e=>d(parseFloat(e.target.value))})]}),(0,r.jsxs)("div",{className:"w-full flex items-center",children:[(0,r.jsx)("div",{className:"w-[40%]",children:(0,r.jsx)("b",{children:"Line Color"})}),i&&(0,r.jsx)("input",{type:"color",title:"Line Color",value:n,onChange:e=>s(e.target.value)}),!i&&(0,r.jsxs)(y.$,{className:"h-8 px-2 py-5",variant:"outline",onClick:()=>c(!t),children:["Use ",(0,r.jsx)("br",{}),t?"Individual Color":"Plot Color"]}),(0,r.jsxs)(y.$,{className:"h-8 px-2 py-5",variant:"outline",onClick:()=>f(!i),children:["Use ",(0,r.jsx)("br",{}),i?"Browzarr Color":"Custom Color"]})]})]})}),B=s.memo(function(){let{showPoints:e,setShowPoints:n}=(0,l.Ws)((0,u.k)(e=>({showPoints:e.showPoints,setShowPoints:e.setShowPoints})));return(0,r.jsx)("div",{className:"plotline-options",children:(0,r.jsxs)(w,{children:[(0,r.jsx)(b,{asChild:!0,children:(0,r.jsx)(y.$,{className:"cursor-pointer",variant:"outline",children:"Line Options"})}),(0,r.jsxs)(C,{className:"w-80 items-center",align:"center",children:[(0,r.jsx)(P,{onClick:e=>e.preventDefault(),children:(0,r.jsx)(D,{children:(0,r.jsx)(y.$,{variant:"outline",onClick:t=>{t.preventDefault(),n(!e)},children:e?"Hide Points":"Show Points"})})}),(0,r.jsx)(_,{}),(0,r.jsx)(k,{}),(0,r.jsx)(M,{})]})]})})});var j=t(958),I=t(3135);function O(e){let{pointID:n,pointLoc:t,showPointInfo:a,plotUnits:i}=e,{plotDim:o,dimArrays:c,dimNames:d,dimUnits:f,timeSeries:p}=(0,l.on)((0,u.k)(e=>({plotDim:e.plotDim,dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits,timeSeries:e.timeSeries}))),x=0,h=0;if(Object.entries(n).length>0&&Object.entries(p).length>0){let[e,t]=Object.entries(n)[0];x=p[e][t],h=c[o][t]}let[v,g]=t,[y,S]=(0,s.useState)(!1);return(0,s.useEffect)(()=>{if(!a){let e=setTimeout(()=>{S(!1)},100);return()=>clearTimeout(e)}S(!0)},[a]),(0,r.jsx)(r.Fragment,{children:y&&(0,r.jsxs)("div",{className:"point-info",style:{left:"".concat(v,"px"),top:"".concat(g,"px")},children:["".concat(x.toFixed(2)).concat(i),(0,r.jsx)("br",{}),"".concat(d[o],": ").concat((0,m.parseLoc)(h,f[o]),"       \n        ")]})})}function A(){let{coords:e,timeSeries:n,setDimCoords:t,setTimeSeries:a}=(0,l.on)((0,u.k)(e=>({coords:e.dimCoords,timeSeries:e.timeSeries,setDimCoords:e.setDimCoords,setTimeSeries:e.setTimeSeries}))),[i,o]=(0,s.useState)(!1),c=(0,s.useRef)([0,Math.round(.255*window.innerHeight)]),d=(0,s.useRef)([0,Math.round(.255*window.innerHeight)]),[f,p]=(0,s.useState)([0,Math.round(.255*window.innerHeight)]);function x(e){if(i){let n=c.current[0]-e.clientX,t=c.current[1]-e.clientY,r=Math.min(Math.max(d.current[0]-n,10),window.innerWidth-120),a=Math.max(d.current[1]+t,0);p([Math.min(r,window.innerWidth-100),Math.min(a,window.innerHeight-100)])}}function h(){o(!1)}return(0,s.useEffect)(()=>(i&&(document.addEventListener("mousemove",x),document.addEventListener("mouseup",h)),()=>{document.removeEventListener("mousemove",x),document.removeEventListener("mouseup",h)}),[i]),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("div",{className:"coord-container",onPointerDown:function(e){c.current=[e.clientX,e.clientY],d.current=[...f],o(!0)},onPointerMove:x,onPointerUp:()=>o(!1),style:{left:"".concat(f[0],"px"),bottom:"".concat(f[1],"px")},children:Object.keys(e).length>0&&Object.keys(e).reverse().map((i,o)=>(0,r.jsxs)("div",{className:"plot-coords",style:{background:"rgb(".concat((0,j.md)(o/10,"Paired"),")"),justifyContent:"space-between"},children:[(0,r.jsx)("b",{children:"".concat(e[i].first.name,": ")}),"".concat((0,m.parseLoc)(e[i].first.loc,e[i].first.units)),(0,r.jsx)("br",{}),(0,r.jsx)("b",{children:"".concat(e[i].second.name,": ")}),"".concat((0,m.parseLoc)(e[i].second.loc,e[i].second.units)),(0,r.jsx)(I.Xr4,{onClick:()=>(function(r){let{[r]:i,...o}=e;t(o);let{[r]:s,...l}=n;a(l)})(i),color:"red",style:{cursor:"pointer",zIndex:3}})]},i))})})}function U(){let[e,n]=(0,s.useState)({}),[t,a]=(0,s.useState)([0,0]),[i,o]=(0,s.useState)(!1),[u,c]=(0,s.useState)(Math.round(window.innerHeight-.25*window.innerHeight)),d=(0,l.on)(e=>e.metadata),f=d?d.units:"Default",[m,p]=(0,s.useState)(1),[x,h]=(0,s.useState)(1);(0,s.useEffect)(()=>{let e=()=>{let e=Math.round(window.innerHeight-.25*window.innerHeight);c(e),document.documentElement.style.setProperty("--plot-height","".concat(e,"px"))};return window.addEventListener("orientationchange",e),window.addEventListener("resize",e),()=>{window.removeEventListener("orientationchange",e),window.removeEventListener("resize",e)}},[]),(0,s.useEffect)(()=>{document.documentElement.style.setProperty("--plot-height","".concat(u,"px"))},[u]);let y=window.innerHeight-u>=10;return(0,r.jsxs)(r.Fragment,{children:[!y&&(0,r.jsx)(g.de,{onClick:()=>{c(window.innerHeight-60)}}),y&&(0,r.jsxs)("div",{className:"plot-canvas",children:[(0,r.jsx)(B,{}),i&&(0,r.jsx)(O,{pointID:e,pointLoc:t,showPointInfo:i,plotUnits:f}),(0,r.jsx)(g.A,{height:u,setHeight:c}),(0,r.jsx)(g.gj,{scale:m,setScale:p}),(0,r.jsx)(g.LC,{scale:x,setScale:h}),(0,r.jsxs)(v.Hl,{orthographic:!0,camera:{position:[0,0,100]},frameloop:"demand",children:[(0,r.jsx)(en,{height:u,yScale:m,pointSetters:{setPointID:n,setPointLoc:a,setShowPointInfo:o},xScale:x}),(0,r.jsx)(T,{height:u,yScale:m,xScale:x})]}),(0,r.jsx)(A,{})]})]})}var L=t(147),Y=t(7801),V=t(5426);function T(e){let{colorTicks:n="grey",tickSize:t=4,fontSize:a=14,showGrid:i=!0,gridOpacity:o=.5,height:c,yScale:d=1,xScale:f=1}=e,{camera:p}=(0,V.C)(),[x,h]=(0,s.useState)({left:0,right:0,top:0,bottom:0}),{dimCoords:v,dimArrays:g,plotDim:y,valueScales:S}=(0,l.on)((0,u.k)(e=>({dimCoords:e.dimCoords,dimArrays:e.dimArrays,plotDim:e.plotDim,valueScales:e.valueScales}))),z=g[y],w=z.length,b=S.maxVal-S.minVal,C=(0,s.useMemo)(()=>{let e=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];if(z){if(z.every(e=>"bigint"==typeof e)){let n=Object.keys(v).length>0?Object.keys(v)[0]:null,t=n?(0,m.parseTimeUnit)(v[n].plot.units):1,r=[];for(let n=0;n<z.length;n++){let a=new Date(Number(z[n])*t),i="".concat(a.getDate().toString().padStart(2,"0")," ").concat(e[a.getMonth()],"\n").concat(a.getFullYear());r.push(i)}return r}return z.map(e=>String(e))}},[z,v]),P=(0,s.useMemo)(()=>{let e=window.innerWidth,n=window.innerHeight-c;return{left:-e/2+p.position.x,right:e/2+p.position.x,top:n/2+p.position.y,bottom:-n/2+p.position.y}},[]),[D,k]=(0,s.useState)(p.zoom),_=(0,s.useMemo)(()=>{let e=1/p.zoom;return{tickSize:t*e,fontSize:a/e,labelOffset:t*e}},[p.zoom,t,a]);(0,V.D)(()=>{p.zoom!==D&&k(p.zoom);let e=window.innerWidth/p.zoom,n=(window.innerHeight-c)/p.zoom,t={left:-e/2+p.position.x,right:e/2+p.position.x,top:n/2+p.position.y,bottom:-n/2+p.position.y};JSON.stringify(x)!=JSON.stringify(t)&&h(t)});let M=(0,s.useRef)(null),B=(0,s.useRef)(null);(0,s.useEffect)(()=>(M.current&&clearTimeout(M.current),B.current&&(M.current=setTimeout(()=>{B.current&&B.current.reset()},100)),()=>{null!==M.current&&clearTimeout(M.current)}),[c]);let j=(x.top+x.bottom)/2,I=(x.left+x.right)/2;return(0,r.jsxs)("group",{children:[i&&(0,r.jsxs)(r.Fragment,{children:[Array.from({length:10},(e,t)=>{var a;if(0===t||9===t)return null;let i=+Math.round(x.left/1)+(Math.round(x.right/1)-Math.round(x.left/1))*(t/9),l=i/f/(P.right-P.left)+.5;return(0,r.jsxs)(s.Fragment,{children:[(0,r.jsx)("group",{position:[i,j,0],children:(0,r.jsxs)("line",{children:[(0,r.jsx)("bufferGeometry",{children:(0,r.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([0,x.top-j,0,0,x.bottom-j,0]),3]})}),(0,r.jsx)("lineDashedMaterial",{color:n,opacity:o,transparent:!0,dashSize:.5,gapSize:.5})]},"vgrid-".concat(t))}),(0,r.jsxs)("group",{position:[i,x.top,0],children:[(0,r.jsxs)("line",{children:[(0,r.jsx)("bufferGeometry",{children:(0,r.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([0,0,0,0,-_.tickSize,0]),3]})}),(0,r.jsx)("lineBasicMaterial",{color:n})]}),0!==t&&9!==t&&(0,r.jsx)(L.E,{position:[0,_.tickSize/4-_.labelOffset,0],fontSize:_.fontSize/D**2,color:n,anchorX:"center",anchorY:"top",children:null!=(a=null==C?void 0:C[Math.round(l*w-.5)])?a:""})]},"top-tick-".concat(t))]},"vert-group-".concat(t))}),Array.from({length:8},(e,t)=>{if(0===t||7===t)return null;let a=x.bottom+(x.top-x.bottom)*(t/7),i=a/d/(x.top-x.bottom)/D+.5;return(0,r.jsxs)(s.Fragment,{children:[(0,r.jsx)("group",{position:[I,a,0],children:(0,r.jsxs)("line",{children:[(0,r.jsx)("bufferGeometry",{children:(0,r.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([x.left-I,0,0,x.right-I,0,0]),3]})}),(0,r.jsx)("lineDashedMaterial",{color:n,opacity:o,transparent:!0,dashSize:0,gapSize:.5,linewidth:1})]})},"hgrid-".concat(t)),(0,r.jsxs)("group",{position:[x.right,a,0],children:[(0,r.jsxs)("line",{children:[(0,r.jsx)("bufferGeometry",{children:(0,r.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([0,0,0,-_.tickSize,0,0]),3]})}),(0,r.jsx)("lineBasicMaterial",{color:n})]}),0!==t&&7!==t&&(0,r.jsx)(L.E,{position:[-_.tickSize-_.labelOffset,0,0],fontSize:_.fontSize/D**2,color:n,anchorX:"right",anchorY:"middle",children:(S.minVal+i*b).toFixed(1)})]},"right-tick-".concat(t))]},"vert-group-".concat(t))})]}),(0,r.jsx)(Y.N,{ref:B,enableRotate:!1,enablePan:!0,enableZoom:!0,zoomSpeed:.85,maxDistance:500,maxZoom:20,minZoom:.5})]})}var G=t(7410);t(601);let R=e=>{let{loc:n,show:t,info:a}=e,{dimNames:i,dimUnits:o}=(0,l.on)((0,u.k)(e=>({dimNames:e.dimNames,dimUnits:e.dimUnits}))),c=(0,l.r2)(e=>e.axis),d=(0,s.useMemo)(()=>i.length<3?[i[0],i[1]]:i.filter((e,n)=>n!=c),[i,c]),f=(0,s.useMemo)(()=>i.length<3?[o[0],o[1]]:o.filter((e,n)=>n!=c),[o,c]);return(0,r.jsxs)("div",{className:"analysis-overlay",style:{left:"".concat(n[0]+10,"px"),top:"".concat(n[1]+10,"px"),display:t?"":"none"},children:["".concat(d[0],": ").concat(t&&(0,m.parseLoc)(a[0],f[0])),(0,r.jsx)("br",{}),"".concat(d[1],": ").concat(t&&(0,m.parseLoc)(a[1],f[1])),(0,r.jsx)("br",{}),"Value: ".concat(Math.round(100*a[2])/100)]})};var E=t(1822);let F="\n    struct Params {\n        zStride: u32,\n        yStride: u32,\n        xStride: u32,\n        xSize: u32,\n        ySize: u32,\n        reduceDim: u32,\n        dimLength: u32,\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f32>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let reduceDim = params.reduceDim;\n        let dimLength = params.dimLength;\n                        \n        let outX = global_id.y;\n        let outY = global_id.x;\n        \n        if (outX >= xSize || outY >= ySize) {\n            return;\n        }\n",N="\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        zStride: u32,\n        xSize: u32,\n        ySize: u32,\n        zSize: u32,\n        workGroups: vec3<u32>,\n        kernelSize: u32,\n        kernelDepth: u32\n    };\n    @group(0) @binding(0) var<storage, read> inputData: array<f32>;\n    @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    @compute @workgroup_size(4, 4, 4)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride; \n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let zSize = params.zSize; \n        let workGroups = params.workGroups;\n        let kernelSize = params.kernelSize;\n        let kernelDepth = params.kernelDepth;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n        let outZ = global_id.z; \n\n        if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n            return;\n        }\n\n        let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n        let globalIdx = global_id.z * total_threads_per_slice + \n                        global_id.y * (workGroups.x * 4) + \n                        global_id.x;\n\n        let xy_radius: i32 = i32(kernelSize/2u);\n        let z_radius: i32 = i32(kernelDepth/2u);\n\n        var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n        var zOffset: i32 = 0;\n        if (xy_radius == 0){\n            xyOffset = -1;\n        }\n        if (z_radius == 0){\n            zOffset = -1;\n        }\n",W={Mean:"\n    ".concat(F,"\n        var sum: f32 = 0.0;\n        \n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                sum += inputData[inputIndex];\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                sum += inputData[inputIndex];\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                sum += inputData[inputIndex];\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = sum / f32(dimLength);\n    }\n"),Min:"\n    ".concat(F,"\n        var min: f32 = 1e12;\n        \n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let newMin = inputData[inputIndex];\n                if (newMin < min) {\n                    min = newMin;\n                }\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let newMin = inputData[inputIndex];\n                if (newMin < min) {\n                    min = newMin;\n                }\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let newMin = inputData[inputIndex];\n                if (newMin < min) {\n                    min = newMin;\n                }\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = min;\n    }\n"),Max:"\n    ".concat(F,"\n        \n        var max: f32 = -1e12;\n        \n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let newMax = inputData[inputIndex];\n                if (newMax > max) {\n                    max = newMax;\n                }\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let newMax = inputData[inputIndex];\n                if (newMax > max) {\n                    max = newMax;\n                }\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let newMax = inputData[inputIndex];\n                if (newMax > max) {\n                    max = newMax;\n                }\n            }\n        }\n        \n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = max;\n    }\n"),StDev:"\n    ".concat(F,"\n        var sum: f32 = 0.0;\n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                sum += inputData[inputIndex];\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                sum += inputData[inputIndex];\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                sum += inputData[inputIndex];\n            }\n        }\n        \n        let mean: f32 = sum / f32(dimLength);\n\n        var squaredDiffSum: f32 = 0.0;\n\n        // Iterate along the dimension again\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let diff: f32 = mean - inputData[inputIndex];\n                squaredDiffSum += diff*diff;\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let diff: f32 = mean - inputData[inputIndex];\n                squaredDiffSum += diff*diff;\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let diff: f32 = mean - inputData[inputIndex];\n                squaredDiffSum += diff*diff;\n            }\n        }\n\n        let stDev: f32 = sqrt(squaredDiffSum / f32(dimLength));\n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = stDev;\n    }\n")},X={Mean:"\n        ".concat(N,"    \n        var sum: f32 = 0.0;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                        sum += inputData[u32(newIdx)];\n                        count ++;\n                    }\n                }\n            }\n        }\n        \n        outputData[globalIdx] = sum / f32(count);\n    }\n"),Min:"\n    ".concat(N,"  \n        var minVal: f32 = 1e12;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                        let sampledVal = inputData[u32(newIdx)];\n                        if (sampledVal < minVal){\n                            minVal = sampledVal;\n                        }\n                    }\n                }\n            }\n        }\n        \n        outputData[globalIdx] = minVal;\n    }\n"),Max:"\n    ".concat(N,"  \n\n        var maxVal: f32 = -1e12;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                        let sampledVal = inputData[u32(newIdx)];\n                        if (sampledVal > maxVal){\n                            maxVal = sampledVal;\n                        }\n                    }\n                }\n            }\n        }\n        \n        outputData[globalIdx] = maxVal;\n    }\n"),StDev:"\n    ".concat(N,"  \n        var sum: f32 = 0.0;\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                        sum += inputData[u32(newIdx)];\n                        count ++;\n                    }\n                }\n            }\n        }\n        \n        let mean: f32 = sum / f32(count);\n\n        var squaredDiffSum: f32 = 0.0;\n\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                        let diff: f32 = mean - inputData[u32(newIdx)];\n                        squaredDiffSum += diff*diff;\n                    }\n                }\n            }\n        }\n\n        let stDev: f32 = sqrt(squaredDiffSum / f32(count));\n\n        outputData[globalIdx] = stDev;\n    }\n")};async function q(e,n,t,r){var a;let i=await (null==(a=navigator.gpu)?void 0:a.requestAdapter()),o=await (null==i?void 0:i.requestDevice());if(!o)return void Error("need a browser that supports WebGPU");let{strides:s,shape:l}=n,[u,c,d]=s,f=l.filter((e,n)=>n!=t),m=l[t],p=f[0]*f[1],x=f.map(e=>Math.ceil(e/16)),h=W[r],v=o.createShaderModule({label:"reduction compute module",code:h}),g=o.createComputePipeline({label:"reduction compute pipeline",layout:"auto",compute:{module:v}}),y=(0,E.Wu)(h),S=(0,E.FE)(y.uniforms.params);S.set({zStride:u,yStride:c,xStride:d,xSize:f[1],ySize:f[0],reduceDim:t,dimLength:m});let z=o.createBuffer({label:"Input Buffer",size:e.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),w=o.createBuffer({label:"Output Buffer",size:4*p,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),b=o.createBuffer({size:S.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),C=o.createBuffer({label:"Output Buffer",size:4*p,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});o.queue.writeBuffer(z,0,e),o.queue.writeBuffer(b,0,S.arrayBuffer);let P=o.createBindGroup({layout:g.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:z}},{binding:1,resource:{buffer:w}},{binding:2,resource:{buffer:b}}]}),D=o.createCommandEncoder({label:"reduction encoder"}),k=D.beginComputePass({label:"reduction compute pass"});k.setPipeline(g),k.setBindGroup(0,P),k.dispatchWorkgroups(x[0],x[1]),k.end(),D.copyBufferToBuffer(w,0,C,0,4*p),o.queue.submit([D.finish()]),await C.mapAsync(GPUMapMode.READ);let _=new Float32Array(C.getMappedRange().slice());return C.unmap(),_}async function Z(e,n,t,r){var a;let i=await (null==(a=navigator.gpu)?void 0:a.requestAdapter()),o=await (null==i?void 0:i.requestDevice({requiredLimits:{maxBufferSize:0x7a0a1efc,maxStorageBufferBindingSize:0x7a0a1efc}}));if(!o)return void Error("need a browser that supports WebGPU");let{kernelDepth:s,kernelSize:l}=r,{strides:u,shape:c}=n,d=c[0]*c[1]*c[2],[f,m,p]=u,x=c.map(e=>Math.ceil(e/4)),h=X[t],v=o.createShaderModule({label:"convolution compute module",code:h}),g=o.createComputePipeline({label:"convolution compute pipeline",layout:"auto",compute:{module:v}}),y=(0,E.Wu)(h),S=(0,E.FE)(y.uniforms.params);S.set({xStride:p,yStride:m,zStride:f,xSize:c[2],ySize:c[1],zSize:c[0],workGroups:[x[2],x[1],x[0]],kernelDepth:s,kernelSize:l});let z=o.createBuffer({label:"Input Buffer",size:e.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),w=o.createBuffer({label:"Output Buffer",size:4*d,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),b=o.createBuffer({label:"Uniform Buffer",size:S.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),C=o.createBuffer({label:"Read Buffer",size:4*d,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});o.queue.writeBuffer(z,0,e),o.queue.writeBuffer(b,0,S.arrayBuffer);let P=o.createBindGroup({layout:g.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:z}},{binding:1,resource:{buffer:w}},{binding:2,resource:{buffer:b}}]}),D=o.createCommandEncoder({label:"convolution encoder"}),k=D.beginComputePass({label:"convolution compute pass"});k.setPipeline(g),k.setBindGroup(0,P),k.dispatchWorkgroups(x[2],x[1],x[0]),k.end(),D.copyBufferToBuffer(w,0,C,0,4*d),o.queue.submit([D.finish()]),await C.mapAsync(GPUMapMode.READ);let _=new Float32Array(C.getMappedRange().slice());return C.unmap(),_}async function H(e,n,t,r){var a;let i=await (null==(a=navigator.gpu)?void 0:a.requestAdapter()),o=await (null==i?void 0:i.requestDevice({requiredLimits:{maxBufferSize:0x7a0a1efc,maxStorageBufferBindingSize:0x7a0a1efc}}));if(!o)return void Error("need a browser that supports WebGPU");let{strides:s,shape:l}=t,[u,c,d]=s,f=l.filter((e,n)=>n!=r),m=l[r],p=f[0]*f[1],x=f.map(e=>Math.ceil(e/16)),h="\n    struct Params {\n        zStride: u32,\n        yStride: u32,\n        xStride: u32,\n        xSize: u32,\n        ySize: u32,\n        reduceDim: u32,\n        dimLength: u32,\n    };\n    @group(0) @binding(0) var<storage, read> firstData: array<f32>;\n    @group(0) @binding(1) var<storage, read> secondData: array<f32>;\n    @group(0) @binding(2) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(3) var<uniform> params: Params;\n\n    @compute @workgroup_size(16, 16, 1)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride;\n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let reduceDim = params.reduceDim;\n        let dimLength = params.dimLength;\n                        \n        let outX = global_id.y;\n        let outY = global_id.x;\n        \n        if (outX >= xSize || outY >= ySize) {\n            return;\n        }\n\n        var xSum: f32 = 0.0;\n        var xxSum: f32 = 0.0;\n        var ySum: f32 = 0.0;\n        var yySum: f32 = 0.0;\n        var xySum: f32 = 0.0;\n        // Iterate along the dimension we're averaging\n        if (reduceDim == 0u) { // Average along Z\n            let cCoord = outX * xStride + outY * yStride;\n            for (var z: u32 = 0u; z < dimLength; z++) {\n                let inputIndex = cCoord + (z * zStride);\n                let xI = firstData[inputIndex];\n                let yI = secondData[inputIndex];\n                xSum += xI;\n                xxSum += xI * xI;\n                ySum += yI;\n                yySum += yI * yI;\n                xySum += xI * yI;\n            }\n        } else if (reduceDim == 1u) { // Average along Y\n            let cCoord = outX * xStride + outY * zStride;\n            for (var y: u32 = 0u; y < dimLength; y++) {\n                let inputIndex = cCoord + (y * yStride);\n                let xI = firstData[inputIndex];\n                let yI = secondData[inputIndex];\n                xSum += xI;\n                xxSum += xI * xI;\n                ySum += yI;\n                yySum += yI * yI;\n                xySum += xI * yI;\n            }\n        } else { // Average along X\n            let cCoord = outX * yStride + outY * zStride;\n            for (var x: u32 = 0u; x < dimLength; x++) {\n                let inputIndex = cCoord + (x * xStride);\n                let xI = firstData[inputIndex];\n                let yI = secondData[inputIndex];\n                xSum += xI;\n                xxSum += xI * xI;\n                ySum += yI;\n                yySum += yI * yI;\n                xySum += xI * yI;\n            }\n        }\n\n        let N: f32 = f32(dimLength);\n        let meanX = xSum / N;\n        let meanY = ySum / N;\n        let varX = (xxSum / N) - (meanX * meanX);\n        let varY = (yySum / N) - (meanY * meanY);\n        let covXY = (xySum / N) - (meanX * meanY);\n        let sigmaX = sqrt(max(0.0, varX));\n        let sigmaY = sqrt(max(0.0, varY));\n        let epsilon = 1e-6;\n        let denominator = sigmaX * sigmaY + epsilon;\n        let correlation = covXY / denominator;\n\n        let outputIndex = outY * xSize + outX;\n        outputData[outputIndex] = correlation;\n    }\n",v=o.createShaderModule({label:"Correlation2D compute module",code:h}),g=o.createComputePipeline({label:"Correlation2D compute pipeline",layout:"auto",compute:{module:v}}),y=(0,E.Wu)(h),S=(0,E.FE)(y.uniforms.params);S.set({zStride:u,yStride:c,xStride:d,xSize:f[1],ySize:f[0],reduceDim:r,dimLength:m});let z=o.createBuffer({label:"First Input Buffer",size:e.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),w=o.createBuffer({label:"Second Input Buffer",size:n.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),b=o.createBuffer({label:"Output Buffer",size:4*p,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),C=o.createBuffer({size:S.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),P=o.createBuffer({label:"Output Buffer",size:4*p,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});o.queue.writeBuffer(z,0,e),o.queue.writeBuffer(w,0,n),o.queue.writeBuffer(C,0,S.arrayBuffer);let D=o.createBindGroup({layout:g.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:z}},{binding:1,resource:{buffer:w}},{binding:2,resource:{buffer:b}},{binding:3,resource:{buffer:C}}]}),k=o.createCommandEncoder({label:"Correlation2D encoder"}),_=k.beginComputePass({label:"Correlation2D compute pass"});_.setPipeline(g),_.setBindGroup(0,D),_.dispatchWorkgroups(x[0],x[1]),_.end(),k.copyBufferToBuffer(b,0,P,0,4*p),o.queue.submit([k.finish()]),await P.mapAsync(GPUMapMode.READ);let M=new Float32Array(P.getMappedRange().slice());return P.unmap(),M}async function $(e,n,t,r){var a;let i=await (null==(a=navigator.gpu)?void 0:a.requestAdapter()),o=await (null==i?void 0:i.requestDevice({requiredLimits:{maxBufferSize:0x7a0a1efc,maxStorageBufferBindingSize:0x7a0a1efc}}));if(!o)return void Error("need a browser that supports WebGPU");let{kernelDepth:s,kernelSize:l}=r,{strides:u,shape:c}=t,[d,f,m]=u,p=c[0]*c[1]*c[2],x=c.map(e=>Math.ceil(e/4)),h="\n    struct Params {\n        xStride: u32,\n        yStride: u32,\n        zStride: u32,\n        xSize: u32,\n        ySize: u32,\n        zSize: u32,\n        workGroups: vec3<u32>,\n        kernelSize: u32,\n        kernelDepth: u32\n    };\n    @group(0) @binding(0) var<storage, read> firstData: array<f32>;\n    @group(0) @binding(1) var<storage, read> secondData: array<f32>;\n    @group(0) @binding(2) var<storage, read_write> outputData: array<f32>;\n    @group(0) @binding(3) var<uniform> params: Params;\n\n    @compute @workgroup_size(4, 4, 4)\n    fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n        let zStride = params.zStride;\n        let yStride = params.yStride;\n        let xStride = params.xStride; \n        let xSize = params.xSize;\n        let ySize = params.ySize;\n        let zSize = params.zSize; \n        let workGroups = params.workGroups;\n        let kernelSize = params.kernelSize;\n        let kernelDepth = params.kernelDepth;\n\n        let outX = global_id.x; \n        let outY = global_id.y;\n        let outZ = global_id.z; \n\n        if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n            return;\n        }\n\n        let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n        let globalIdx = global_id.z * total_threads_per_slice + \n                        global_id.y * (workGroups.x * 4) + \n                        global_id.x;\n\n        let xy_radius: i32 = i32(kernelSize/2u);\n        let z_radius: i32 = i32(kernelDepth/2u);\n\n        var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n        var zOffset: i32 = 0;\n        if (xy_radius == 0){\n            xyOffset = -1;\n        }\n        if (z_radius == 0){\n            zOffset = -1;\n        }\n\n        var xSum: f32 = 0.0;\n        var xxSum: f32 = 0.0;\n        var ySum: f32 = 0.0;\n        var yySum: f32 = 0.0;\n        var xySum: f32 = 0.0;\n\n        var count: u32 = 0u;\n        for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n            for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                    let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                        in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let zOffset = kz * i32(zStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                        let xI = firstData[newIdx];\n                        let yI = secondData[newIdx];\n                        xSum += xI;\n                        xxSum += xI * xI;\n                        ySum += yI;\n                        yySum += yI * yI;\n                        xySum += xI * yI;\n                        count ++;\n                    }\n                }\n            }\n        }\n\n        let N: f32 = f32(count);\n        let meanX = xSum / N;\n        let meanY = ySum / N;\n        let varX = (xxSum / N) - (meanX * meanX);\n        let varY = (yySum / N) - (meanY * meanY);\n        let covXY = (xySum / N) - (meanX * meanY);\n        let sigmaX = sqrt(max(0.0, varX));\n        let sigmaY = sqrt(max(0.0, varY));\n        let epsilon = 1e-6;\n        let denominator = sigmaX * sigmaY + epsilon;\n        let correlation = covXY / denominator;\n\n        outputData[globalIdx] = correlation;\n    }\n",v=o.createShaderModule({label:"Correlation3D compute module",code:h}),g=o.createComputePipeline({label:"Correlation3D compute pipeline",layout:"auto",compute:{module:v}}),y=(0,E.Wu)(h),S=(0,E.FE)(y.uniforms.params);S.set({xStride:m,yStride:f,zStride:d,xSize:c[2],ySize:c[1],zSize:c[0],workGroups:[x[2],x[1],x[0]],kernelDepth:s,kernelSize:l});let z=o.createBuffer({label:"First Input Buffer",size:e.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),w=o.createBuffer({label:"Second Input Buffer",size:n.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),b=o.createBuffer({label:"Output Buffer",size:4*p,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),C=o.createBuffer({size:S.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),P=o.createBuffer({label:"Output Buffer",size:4*p,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});o.queue.writeBuffer(z,0,e),o.queue.writeBuffer(w,0,n),o.queue.writeBuffer(C,0,S.arrayBuffer);let D=o.createBindGroup({layout:g.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:z}},{binding:1,resource:{buffer:w}},{binding:2,resource:{buffer:b}},{binding:3,resource:{buffer:C}}]}),k=o.createCommandEncoder({label:"Correlation3D encoder"}),_=k.beginComputePass({label:"Correlation3D compute pass"});_.setPipeline(g),_.setBindGroup(0,D),_.dispatchWorkgroups(x[2],x[1],x[0]),_.end(),k.copyBufferToBuffer(b,0,P,0,4*p),o.queue.submit([k.finish()]),await P.mapAsync(GPUMapMode.READ);let M=new Float32Array(P.getMappedRange().slice());return P.unmap(),M}let J=e=>{let{setTexture:n,ZarrDS:t}=e,{dataArray:r,strides:i,dataShape:o,valueScales:c,setIsFlat:d,setDownloading:f,setShowLoading:p,setValueScales:x}=(0,l.on)((0,u.k)(e=>({dataArray:e.dataArray,strides:e.strides,dataShape:e.dataShape,valueScales:e.valueScales,setIsFlat:e.setIsFlat,setDownloading:e.setDownloading,setShowLoading:e.setShowLoading,setValueScales:e.setValueScales}))),h=(0,l.Ws)(e=>e.setPlotType),{axis:v,execute:g,operation:y,useTwo:S,variable2:z,valueScalesOrig:w,kernelSize:b,kernelDepth:C,kernelOperation:P,setValueScalesOrig:D,setAnalysisArray:k}=(0,l.r2)((0,u.k)(e=>({axis:e.axis,execute:e.execute,operation:e.operation,useTwo:e.useTwo,variable2:e.variable2,valueScalesOrig:e.valueScalesOrig,kernelSize:e.kernelSize,kernelDepth:e.kernelDepth,kernelOperation:e.kernelOperation,setValueScalesOrig:e.setValueScalesOrig,setAnalysisArray:e.setAnalysisArray}))),_=(0,l.SZ)(e=>e.slice),M=(0,s.useRef)(new Float32Array(1));return(0,s.useEffect)(()=>{if(!(r.length<=1))if(p(!0),S)(async function(){if(f(!0),M.current=await t.GetArray(z,_),f(!1),"Correlation2D"==y){let e=o.filter((e,n)=>n!=v),t=await H(r,M.current.data,{shape:o,strides:i},v);w||D(c);let[s,l]=[-1,1];x({minVal:s,maxVal:l});let u=new Uint8Array(t.map(e=>(e-s)/(l-s)).map(e=>isNaN(e)?255:254*e)),f=new a.GYF(u,e[1],e[0],a.VT0,a.OUM);f.needsUpdate=!0,k(t),n(f),d(!0),h("flat")}else{let e=await $(r,M.current.data,{shape:o,strides:i},{kernelDepth:C,kernelSize:b});w||D(c);let[t,s]=[-1,1];x({minVal:t,maxVal:s});let l=new Uint8Array(e.map(e=>(e-t)/(s-t)).map(e=>isNaN(e)?255:254*e)),u=new a.dYF(l,o[2],o[1],o[0]);u.format=a.VT0,u.minFilter=a.hxR,u.magFilter=a.hxR,u.needsUpdate=!0,k(e),n(u),d(!1),h("volume")}})().then(e=>p(!1));else if("Convolution"!=y){let e=o.filter((e,n)=>n!=v);q(r,{shape:o,strides:i},v,y).then(t=>{let r,i;if(!t)return;"StDev"==y?([r,i]=(0,m.ArrayMinMax)(t),w||D(c),x({minVal:r,maxVal:i})):w?(r=w.minVal,i=w.maxVal,x(w),D(null)):(r=c.minVal,i=c.maxVal);let o=new Uint8Array(t.map(e=>(e-r)/(i-r)).map(e=>isNaN(e)?255:254*e)),s=new a.GYF(o,e[1],e[0],a.VT0,a.OUM);s.needsUpdate=!0,k(t),n(s),d(!0),h("flat")}).then(e=>p(!1))}else Z(r,{shape:o,strides:i},P,{kernelDepth:C,kernelSize:b}).then(e=>{let t,r;if(!e)return;"StDev"==P?([t,r]=(0,m.ArrayMinMax)(e),w||D(c),x({minVal:t,maxVal:r})):w?(t=w.minVal,r=w.maxVal,x(w),D(null)):(t=c.minVal,r=c.maxVal);let i=new Uint8Array(e.map(e=>(e-t)/(r-t)).map(e=>isNaN(e)?255:254*e)),s=new a.dYF(i,o[2],o[1],o[0]);s.format=a.VT0,s.minFilter=a.hxR,s.magFilter=a.hxR,s.needsUpdate=!0,k(e),n(s),d(!1),h("volume")}).then(e=>p(!1))},[g]),null},Q=e=>{let{isFlat:n}=e,{resetCamera:t}=(0,l.Ws)((0,u.k)(e=>({resetCamera:e.resetCamera}))),i=(0,s.useRef)(null);return(0,s.useEffect)(()=>{if(i.current){let e,t=i.current,r=performance.now(),o=t.object.position.clone(),s=t.position0.clone(),l=t.target.clone(),u=t.target0.clone(),c=t.object.zoom,d=i=>{(0,V.m)();let f=Math.min((i-r)/1e3,1);t.object.position.lerpVectors(o,s,f),t.target.lerpVectors(l,u,f),n&&(t.object.zoom=a.cj9.lerp(c,1e3,f),t.object.updateProjectionMatrix(),t.update()),f<1&&(e=requestAnimationFrame(d))};return e=requestAnimationFrame(d),()=>cancelAnimationFrame(e)}},[t]),(0,r.jsxs)(r.Fragment,{children:[n&&(0,r.jsx)(Y.N,{ref:i,enableRotate:!1,enablePan:!0,maxDistance:50,minZoom:50,maxZoom:3e3}),!n&&(0,r.jsx)(Y.N,{ref:i,enableRotate:!0,enablePan:!0,maxDistance:50})]})},K=e=>{let{ZarrDS:n}=e,{setShape:t,setDataShape:i,setFlipY:o,setValueScales:c,setMetadata:d,setDimArrays:m,setDimNames:x,setDimUnits:y,setPlotOn:S,setShowLoading:z}=(0,l.on)((0,u.k)(e=>({setShape:e.setShape,setDataShape:e.setDataShape,setFlipY:e.setFlipY,setValueScales:e.setValueScales,setMetadata:e.setMetadata,setDimArrays:e.setDimArrays,setDimNames:e.setDimNames,setDimUnits:e.setDimUnits,setPlotOn:e.setPlotOn,setShowLoading:e.setShowLoading}))),{colormap:w,variable:b,isFlat:C,metadata:P,valueScales:D,setIsFlat:k,setDataArray:_}=(0,l.on)((0,u.k)(e=>({colormap:e.colormap,variable:e.variable,isFlat:e.isFlat,metadata:e.metadata,valueScales:e.valueScales,setIsFlat:e.setIsFlat,setDataArray:e.setDataArray}))),{plotType:M}=(0,l.Ws)((0,u.k)(e=>({plotType:e.plotType}))),{slice:B,reFetch:j}=(0,l.SZ)((0,u.k)(e=>({slice:e.slice,reFetch:e.reFetch}))),I=(0,s.useRef)([0,0]),O=(0,s.useRef)(0),[A,U]=(0,s.useState)(!1),[L,Y]=(0,s.useState)([0,0]),[V,T]=(0,s.useState)(null),[E,F]=(0,s.useState)(!0);(0,s.useEffect)(()=>{if("Default"!=b){z(!0),F(!1);try{n.GetArray(b,B).then(e=>{let[n,r]=(0,G.oW)({data:e.data,shape:e.shape});n instanceof a.GYF||n instanceof a.dYF?T(n):(console.error("Invalid texture type returned from ArrayToTexture"),T(null)),"object"==typeof r&&"maxVal"in r&&"minVal"in r&&c(r),2==e.shape.length?k(!0):k(!1),_(e.data);let o=e.shape[1]/e.shape[2]*2;t(new a.Pq0(2,o,2)),i(e.shape),z(!1),F(!0),S(!0)})}catch(e){z(!1);return}n.GetAttributes(b).then(e=>{d(e);let[t,r,a]=n.GetDimArrays();m(t),x(a),t.length>2?t[1][1]<t[1][0]?o(!0):o(!1):t[0][1]<t[0][0]?o(!0):o(!1);let i=[];for(let e of r)i.push(e.units);y(i)})}else d(null)},[b,j]);let N=(0,s.useMemo)(()=>({setLoc:Y,setShowInfo:U,coords:I,val:O}),[]),W=(0,s.useMemo)(()=>g.Fp,[]);return(0,r.jsxs)("div",{className:"main-canvas",style:{width:"100vw"},children:[(0,r.jsx)(J,{setTexture:T,ZarrDS:n}),E&&(0,r.jsx)(g.PL,{units:null==P?void 0:P.units,valueScales:D}),(0,r.jsx)(W,{}),(C||"flat"==M)&&(0,r.jsx)(R,{loc:L,show:A,info:[...I.current,O.current]}),(!C&&"flat"!=M||C&&"sphere"===M)&&(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(v.Hl,{id:"main-canvas",camera:{position:C?[0,0,5]:[-4.5,3,4.5],fov:50},frameloop:"demand",children:[(0,r.jsx)(es,{}),"volume"==M&&E&&(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(f,{volTexture:V}),(0,r.jsx)(p,{ZarrDS:n})]}),"point-cloud"==M&&E&&(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(h,{textures:{texture:V,colormap:w},ZarrDS:n})}),"sphere"==M&&E&&(0,r.jsx)(er,{texture:V,ZarrDS:n}),(0,r.jsx)(Q,{isFlat:!1})]})}),(C||"flat"==M)&&(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(v.Hl,{id:"main-canvas",camera:{position:[0,0,5],zoom:1e3},orthographic:!0,frameloop:"demand",children:[(0,r.jsx)(es,{}),(0,r.jsx)(et,{texture:V,infoSetters:N}),(0,r.jsx)(Q,{isFlat:!0})]})})]})};function ee(e){let{points:n,tsID:t,pointSetters:i,colIDX:o,scalers:c}=e,d=(0,s.useRef)(null),f=n.length,m=(0,s.useRef)(null),[p,x]=(0,s.useState)(!1),{setPointID:h,setPointLoc:v,setShowPointInfo:g}=i,[y,S]=(0,s.useState)(1),{pointColor:z,pointSize:w,useCustomPointColor:b}=(0,l.Ws)((0,u.k)(e=>({pointColor:e.pointColor,pointSize:e.linePointSize,showPoints:e.showPoints,useCustomPointColor:e.useCustomPointColor}))),{xScale:C,yScale:P}=c,[D,k,_]=(0,s.useMemo)(()=>(0,j.md)(o/10,"Paired"),[o]),M=(0,s.useMemo)(()=>new a.Gu$(w),[w]),B=(0,s.useMemo)(()=>new a.V9B({color:b?z:new a.Q1f().setRGB(D/500,k/500,_/500)}),[z,b]);return(0,s.useEffect)(()=>{if(d.current){let e=new a.B69;for(let t=0;t<f;t++){let r=n[t].toArray();e.position.set(r[0]*(C/2),r[1]*P,1),e.scale.set(w/y,w/y,w/y),e.updateMatrix(),d.current.setMatrixAt(t,e.matrix)}d.current.instanceMatrix.needsUpdate=!0}},[n,y,M,B,C,P,w]),(0,V.D)(e=>{let{camera:n}=e;n.zoom!==y&&S(n.zoom)}),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("mesh",{position:[0,0,5],onPointerEnter:function(e){if(d.current){let n=e.instanceId,r=new a.B69,i=new a.kn4,o=new a.Pq0;n!=m.current&&m.current&&(d.current.getMatrixAt(m.current,i),o.setFromMatrixPosition(i),r.scale.set(w/y,w/y,w/y),r.position.copy(o),r.updateMatrix(),d.current.setMatrixAt(m.current,r.matrix)),m.current=n,d.current.getMatrixAt(n,i),o.setFromMatrixPosition(i),r.scale.set(3*w/y,3*w/y,3/y),r.position.copy(o),r.updateMatrix(),d.current.setMatrixAt(e.instanceId,r.matrix),d.current.instanceMatrix.needsUpdate=!0,x(e=>!e),h({[t]:e.instanceId}),v([e.clientX,e.clientY]),g(!0)}},onPointerLeave:function(e){let n=e.instanceId;if(d.current){let e=new a.B69,t=new a.kn4,r=new a.Pq0;m.current&&(d.current.getMatrixAt(n,t),r.setFromMatrixPosition(t),e.scale.set(w/y,w/y,w/y),e.position.copy(r),e.updateMatrix(),d.current.setMatrixAt(n,e.matrix),d.current.instanceMatrix.needsUpdate=!0,x(e=>!e),g(n!=m.current))}},children:(0,r.jsx)("instancedMesh",{ref:d,args:[M,B,f]})})})}let en=e=>{let{height:n,xScale:t,yScale:i,pointSetters:o}=e,{valueScales:c,timeSeries:d,colormap:f}=(0,l.on)((0,u.k)(e=>({valueScales:e.valueScales,timeSeries:e.timeSeries,colormap:e.colormap}))),{lineWidth:m,useLineColor:p,lineColor:x,showPoints:h,lineResolution:v,useCustomColor:g}=(0,l.Ws)((0,u.k)(e=>({lineWidth:e.lineWidth,linePointSize:e.linePointSize,showPoints:e.showPoints,useLineColor:e.useLineColor,lineColor:e.lineColor,lineResolution:e.lineResolution,useCustomColor:e.useCustomColor})));(0,s.useRef)([]);let{camera:y}=(0,V.C)(),{maxVal:S,minVal:z}=c,w=(0,s.useMemo)(()=>{let e={};return Object.keys(d).reverse().map((n,r)=>{let[o,s,l]=(0,j.md)(r/10,"Paired");e[n]=new a.BKk({glslVersion:a.Wdf,uniforms:{cmap:{value:f},xScale:{value:t},yScale:{value:i},aspect:{value:window.innerWidth/window.innerHeight},thickness:{value:m},miter:{value:1},useLineColor:{value:g},useMapColors:{value:p},lineColor:{value:new a.Q1f().setRGB(o/255,s/255,l/255)},userColor:{value:new a.Q1f(x)},zoom:{value:y.zoom}},vertexShader:"attribute float direction; \nattribute vec3 next;\nattribute vec3 previous;\nattribute float normed;\n\nvarying float vNormed;\n\nuniform float zoom;\nuniform float thickness;\nuniform int miter;\nuniform float xScale; \nuniform float yScale;\n\nfloat getOrthographicZoom(mat4 projectionMatrix, float referenceWidth) {\n    float m0 = projectionMatrix[0][0]; // Scaling factor: 2/(right-left)\n    float viewWidth = 2.0 / m0; // Viewable width\n    return referenceWidth / viewWidth; // Zoom level\n}\n\nvoid main() {\n    vec3 pos = position;\n    vec3 prev = previous;\n    vec3 nex = next;\n    pos.x *= xScale/2.0;\n    pos.y *= yScale;\n    prev.x *= xScale/2.0;\n    prev.y *= yScale;\n    nex.x *= xScale/2.0;\n    nex.y *= yScale;\n\n    // Transform positions to view space (before projection)\n    float zoom = getOrthographicZoom(projectionMatrix, 2.);\n    float zoomLevel = 2. / projectionMatrix[0][0]; // Extract vertical scale\n    vec4 currentView = modelViewMatrix * vec4(pos, 1.0);\n    vec4 prevView = modelViewMatrix * vec4(prev, 1.0);\n    vec4 nextView = modelViewMatrix * vec4(nex, 1.0);\n\n    // Compute directions in view space\n    vec3 dir = vec3(0.0);\n    if (currentView.xyz == prevView.xyz) {\n        dir = normalize(nextView.xyz - currentView.xyz);\n    } else if (currentView.xyz == nextView.xyz) {\n        dir = normalize(currentView.xyz - prevView.xyz);\n    } else {\n        vec3 dirA = normalize(currentView.xyz - prevView.xyz);\n        if (miter == 1) {\n            vec3 dirB = normalize(nextView.xyz - currentView.xyz);\n            vec3 tangent = normalize(dirA + dirB);\n            vec3 perp = vec3(-dirA.y, dirA.x, 0.0); // Perpendicular in view space\n            vec3 miterVec = vec3(-tangent.y, tangent.x, 0.0);\n            float miterLen = dot(miterVec, perp);\n            miterLen = max(miterLen, 0.5); // Avoid division by zero\n            dir = tangent;\n        } else {\n            dir = dirA;\n        }\n    }\n\n    // Compute normal in view space\n    vec3 normal = vec3(-dir.y, dir.x, 0.0); // Perpendicular to direction\n    float len = thickness / zoom/500.; // Thickness in world/view space units\n    normal *= 0.5 * len * direction; // Apply thickness and direction\n\n    // Apply offset in view space\n    currentView.xyz += normal;\n\n    // Project to clip space\n    gl_Position = projectionMatrix * currentView;\n\n\n    vNormed = normed;\n    gl_PointSize = 1.0;\n}",fragmentShader:"\n                out vec4 Color;\n                uniform sampler2D cmap;\n                uniform bool useLineColor;\n                uniform bool useMapColors;\n                uniform vec3 lineColor;\n                uniform vec3 userColor;\n                varying float vNormed;\n\n                void main() {\n                    vec4 texColor = texture(cmap, vec2(vNormed, 0.1));\n                    texColor.a = 1.;\n                    Color = useLineColor ? vec4(userColor, 1.0) : useMapColors ? texColor : vec4(lineColor, 1.0) ;\n                }\n                ",depthWrite:!1})}),e},[f,m,t,i,window.innerWidth,window.innerHeight,p,x,y.zoom,g,d]),b=(0,s.useMemo)(()=>window.innerWidth,[window.innerWidth]),C=(0,s.useMemo)(()=>window.innerHeight-n,[window.innerWidth,n]),[P,D]=(0,s.useState)({}),k=(0,s.useMemo)(()=>{let e={},n={};return Object.keys(d).map((t,r)=>{let i=d[t],o=i.map(e=>(e-z)/(S-z)),s=function(e,n,t){let r=(n-e)/(t-1);return Array.from({length:t},(n,t)=>e+r*t)}(-b,b,i.length),l=o.map((e,n)=>new a.Pq0(s[n],(e-.5)*C,5));n[t]=l;let u=new a.B6O(l).getPoints(l.length*v-1),c=[];for(let e=0;e<u.length;e++){let n=e/(u.length-1)*(o.length-1),t=Math.floor(n),r=Math.min(o.length-1,Math.ceil(n)),a=n-t;c.push(o[t]*(1-a)+o[r]*a)}let f=u.length,m=[],p=[],x=[],h=[],g=[],y=[];for(let e=0;e<f;e++){let n=u[e],t=u[Math.max(0,e-1)],r=u[Math.min(f-1,e+1)];m.push(...n,...n),p.push(1,-1),x.push(...t,...t),h.push(...r,...r),g.push(c[e],c[e])}for(let e=0;e<f-1;e++){let n=2*e,t=n+1,r=n+2,a=n+3;y.push(n,t,r),y.push(t,a,r)}let w=new a.LoY;w.setAttribute("position",new a.qtW(m,3)),w.setAttribute("direction",new a.qtW(p,1)),w.setAttribute("previous",new a.qtW(x,3)),w.setAttribute("next",new a.qtW(h,3)),w.setAttribute("normed",new a.qtW(g,1)),w.setIndex(new a.A$4(y,1)),e[t]=w}),D(n),e},[d,v]);return(0,s.useEffect)(()=>{(0,V.m)()},[h]),(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)("group",{children:[Object.keys(d).map((e,n)=>(0,r.jsx)("mesh",{geometry:k[e],material:w[e]},"lineMesh_".concat(n))),h&&Object.keys(d).map((e,n)=>(0,r.jsx)(ee,{points:P[e],tsID:e,colIDX:n,pointSetters:o,scalers:{xScale:t,yScale:i}},"plotPoints_".concat(n)))]})})},et=e=>{let{texture:n,infoSetters:t}=e,{setLoc:i,setShowInfo:o,val:c,coords:d}=t,{flipY:f,colormap:m,dataArray:p,valueScales:x,dimArrays:h,isFlat:v}=(0,l.on)((0,u.k)(e=>({flipY:e.flipY,colormap:e.colormap,dataArray:e.dataArray,valueScales:e.valueScales,dimArrays:e.dimArrays,isFlat:e.isFlat}))),{cScale:g,cOffset:y,animProg:S}=(0,l.Ws)((0,u.k)(e=>({cOffset:e.cOffset,cScale:e.cScale,resetAnim:e.resetAnim,animate:e.animate,animProg:e.animProg}))),{axis:z,analysisMode:w,analysisArray:b}=(0,l.r2)((0,u.k)(e=>({axis:e.axis,analysisMode:e.analysisMode,analysisArray:e.analysisArray}))),C=n.source.data,P=(0,s.useMemo)(()=>C.height/C.width,[C]),D=(0,s.useMemo)(()=>new a.bdM(2,2*P),[P]),k=(0,s.useRef)(!1),_=(0,s.useRef)(new a.I9Y(0,0)),M=w&&2==z,B=(0,s.useMemo)(()=>w?b:p,[w,p,b]),j=(0,s.useMemo)(()=>h.filter((e,n)=>n!=z),[h,z]),I=(0,s.useMemo)(()=>new a.BKk({glslVersion:a.Wdf,uniforms:{cScale:{value:g},cOffset:{value:y},data:{value:n},cmap:{value:m},animateProg:{value:S}},vertexShader:" // by Jeran Poehls\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}",fragmentShader:v?"uniform sampler2D data;\r\nuniform sampler2D cmap;\r\n\r\nuniform float cOffset;\r\nuniform float cScale;\r\n\r\nvarying vec2 vUv;\r\nout vec4 Color;\r\n\r\nvoid main() {\r\n    vec4 val = texture(data,vUv);\r\n    float d = val.x;\r\n    float sampLoc = d == 1. ? d : (d - 0.5)*cScale + 0.5;\r\n    sampLoc = d == 1. ? d : min(sampLoc+cOffset,0.99);\r\n    vec4 color = texture(cmap, vec2(sampLoc,0.5));\r\n    color.a = val.x > 0.999 ? 0. : 1.;\r\n\r\n    Color = color;\r\n}":"//This is for Flat Textures but with 3D textures to sample from i,e; animation\r\n\r\nuniform sampler3D data;\r\nuniform sampler2D cmap;\r\n\r\nuniform float cOffset;\r\nuniform float cScale;\r\nuniform float animateProg;\r\n\r\nvarying vec2 vUv;\r\nout vec4 Color;\r\n\r\nvoid main() {\r\n    vec4 val = texture(data,vec3(vUv, animateProg));\r\n    float d = val.x;\r\n    float sampLoc = d == 1. ? d : (d - 0.5)*cScale + 0.5;\r\n    sampLoc = d == 1. ? d : min(sampLoc+cOffset,0.99);\r\n    vec4 color = texture(cmap, vec2(sampLoc,0.5));\r\n    color.a = val.x > 0.999 ? 0. : 1.;\r\n\r\n    Color = color;\r\n}",side:a.$EB}),[g,y,n,m,S]);(0,s.useEffect)(()=>{D.dispose()},[D]);let O=(0,s.useRef)(null),A=(0,s.useCallback)(e=>{if(k.current&&e.uv){O.current=e,i([e.clientX,e.clientY]),_.current=e.uv;let{x:n,y:t}=e.uv,r=v?w?j[1].length:h[1].length:h[2].length,a=v?w?j[0].length:h[0].length:h[1].length,o=Math.round(n*r-.5),s=Math.round(t*a-.5),l=r*s+o;l+=v?0:Math.round(h[0].length*S)*r*a;let u=B?B[l]:0;c.current=v&&!w?function(e,n){return e*(n.maxVal-n.minVal)+n.minVal}(u,x):u,d.current=v?w?[j[0][s],j[1][o]]:[h[0][s],h[1][o]]:[h[1][s],h[2][o]]}},[B,h,S]);return(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("mesh",{material:I,geometry:D,scale:[1,f?-1:1,1],rotation:[0,0,M?Math.PI/2:0],onPointerEnter:()=>{o(!0),k.current=!0},onPointerLeave:()=>{o(!1),k.current=!1},onPointerMove:A})})},er=e=>{let{texture:n,ZarrDS:t}=e,{colormap:i,flipY:o,isFlat:c}=(0,l.on)((0,u.k)(e=>({colormap:e.colormap,flipY:e.flipY,isFlat:e.isFlat}))),{setPlotDim:f,updateDimCoords:p,updateTimeSeries:x}=(0,l.on)((0,u.k)(e=>({setPlotDim:e.setPlotDim,updateDimCoords:e.updateDimCoords,updateTimeSeries:e.updateTimeSeries}))),{dimArrays:h,dimNames:v,dimUnits:g}=(0,l.on)((0,u.k)(e=>({shape:e.shape,dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits}))),{animate:y,animProg:S,cOffset:z,cScale:w,selectTS:b}=(0,l.Ws)((0,u.k)(e=>({animate:e.animate,animProg:e.animProg,cOffset:e.cOffset,cScale:e.cScale,selectTS:e.selectTS}))),[C,P]=(0,s.useState)(Array(10).fill(new a.IUQ(-1,-1,-1,-1))),{height:D,width:k}=(0,s.useMemo)(()=>null==n?void 0:n.source.data,[n]),_=(0,s.useMemo)(()=>new a.WBB(1,9),[]),M=(0,s.useMemo)(()=>new a.BKk({glslVersion:a.Wdf,uniforms:{map:{value:n},selectTS:{value:b},selectBounds:{value:C},cmap:{value:i},cOffset:{value:z},cScale:{value:w},animateProg:{value:S}},vertexShader:d,fragmentShader:c?" // by Jeran Poehls\nprecision highp float;\nprecision highp sampler2D;\n\nout vec4 color;\n\nin vec3 aPosition;\n\nuniform sampler2D map;\nuniform sampler2D cmap;\n\nuniform float cOffset;\nuniform float cScale;\nuniform float animateProg;\nuniform bool selectTS;\n\n#define pi 3.141592653\n\nvec2 giveUV(vec3 position){\n    vec3 n = normalize(position);\n    float latitude = asin(n.y);\n    float longitude = atan(n.z, n.x);\n    vec2 uv = vec2(-longitude/(pi), latitude/(pi/2.0));\n    uv /= 2.;\n    uv += 0.5;\n    return uv;\n}\n\n\nvoid main(){\n    vec2 sampleCoord = giveUV(aPosition);\n    float strength = texture(map, sampleCoord).r;\n    strength = strength == 1. ? strength : (strength - 0.5)*cScale + 0.5;\n    strength = strength == 1. ? strength : min(strength+cOffset,0.99);\n    color = texture(cmap, vec2(strength, 0.5));\n    color.a = 1.;\n    // color = vec4(sampleCoord, 0., 1.0);\n\n}":" // by Jeran Poehls\nprecision highp float;\nprecision highp sampler3D;\n\nout vec4 color;\n\nin vec3 aPosition;\n\nuniform sampler3D map;\nuniform sampler2D cmap;\n\nuniform float cOffset;\nuniform float cScale;\nuniform float animateProg;\nuniform vec4[10] selectBounds; \nuniform bool selectTS;\n\n#define pi 3.141592653\n\nvec2 giveUV(vec3 position){\n    vec3 n = normalize(position);\n    float latitude = asin(n.y);\n    float longitude = atan(n.z, n.x);\n    vec2 uv = vec2(-longitude/(pi), latitude/(pi/2.0));\n    uv /= 2.;\n    uv += 0.5;\n    return uv;\n}\n\nbool isValid(vec2 sampleCoord){\n    for (int i = 0; i < 10; i++){\n        vec4 thisBound = selectBounds[i];\n        if (thisBound.x == -1.){\n            return false;\n        }\n        bool cond = (sampleCoord.x < thisBound.r || sampleCoord.x > thisBound.g || sampleCoord.y < thisBound.b ||  sampleCoord.y > thisBound.a);\n        if (!cond){\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid main(){\n    vec2 sampleCoord = giveUV(aPosition);\n    float strength = texture(map, vec3(sampleCoord, animateProg)).r;\n    strength = strength == 1. ? strength : (strength - 0.5)*cScale + 0.5;\n    strength = strength == 1. ? strength : min(strength+cOffset,0.99);\n    color = texture(cmap, vec2(strength, 0.5));\n    bool cond = isValid(sampleCoord);\n    if (!cond && selectTS){\n        color.rgb *= 0.65;\n    }\n    color.a = 1.;\n    // color = vec4(sampleCoord, 0., 1.0);\n\n}",blending:a.NTi}),[n,S,i,z,w,y,C,b]);return(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("mesh",{geometry:_,material:M,scale:[1,o?-1:1,1],onClick:e=>b&&function(e){let r=function(e,n,t){let r=Math.atan2(e.z,e.x),i=Math.asin(e.y),o=(r+Math.PI)/(2*Math.PI),s=(i+Math.PI/2)/Math.PI;return o=Math.round((o=1-o)*n-.5)/n,s=Math.round(s*t-.5)/t,new a.I9Y(o,s)}(e.point.normalize(),null==n?void 0:n.source.data.width,null==n?void 0:n.source.data.height),i=new a.Pq0(0,0,1);if(t){var s,l;let e=t.GetTimeSeries({uv:r,normal:i}),n=i.toArray().map((e,n)=>Math.abs(e)>0?n:null).filter(e=>null!==e);f(2-n[0]);let a=(0,m.parseUVCoords)({normal:i,uv:r}).map((e,n)=>e?h[n][Math.round(e*h[n].length)]:null),o=v.filter((e,n)=>null!==a[n]),u=g.filter((e,n)=>null!==a[n]);a=a.filter(e=>null!==e);let c="".concat(a[0],"_").concat(a[1]);x({[c]:e}),p({[c]:{first:{name:o[0],loc:null!=(s=a[0])?s:0,units:u[0]},second:{name:o[1],loc:null!=(l=a[1])?l:0,units:u[1]},plot:{units:g[2-n[0]]}}})}!function(e){let n=Math.round(e.x*k)+.5,t=o?Math.round((1-e.y)*D)-.5:Math.round(e.y*D)+.5,r=1/k,i=1/D,s=new a.IUQ(...[n/k-r/2,n/k+r/2],...[t/D-i/2,t/D+i/2]);P(e=>[s,...e].slice(0,10))}(r)}(e)})})};function ea(e){let[n,t]=e;return[n/180,t/180,0]}function ei(e){let[n,t]=e,r=t*Math.PI/180,a=n*Math.PI/180;return[Math.cos(r)*Math.cos(a)*1.001,1.001*Math.sin(r),Math.cos(r)*Math.sin(a)*1.001]}function eo(e){let{features:n}=e,{xRange:t,yRange:i,plotType:o,borderColor:c}=(0,l.Ws)((0,u.k)(e=>({xRange:e.xRange,yRange:e.yRange,plotType:e.plotType,borderColor:e.borderColor}))),{flipY:f,shape:m}=(0,l.on)((0,u.k)(e=>({flipY:e.flipY,shape:e.shape}))),[p,x]=(0,s.useState)(!1);(0,s.useEffect)(()=>{"sphere"===o?x(!0):x(!1)},[o]);let h=(0,s.useMemo)(()=>new a.BKk({glslVersion:a.Wdf,vertexShader:d,fragmentShader:"precision highp float;\r\nprecision highp sampler3D;\r\n\r\nout vec4 color;\r\n\r\nin vec3 aPosition;\r\n\r\nuniform vec2 xBounds;\r\nuniform vec2 yBounds;\r\nuniform vec3 borderColor;\r\nuniform bool trim;\r\n\r\nvoid main() {\r\n\r\n    if ((aPosition.x < xBounds.x || aPosition.x > xBounds.y || aPosition.y < yBounds.x || aPosition.y > yBounds.y) && trim){\r\n        discard;\r\n    }\r\n\r\n    color = vec4(borderColor, 1.0);\r\n}",uniforms:{xBounds:{value:new a.I9Y(t[0],t[1])},yBounds:{value:new a.I9Y(i[0]/m.x,i[1]/m.x)},borderColor:{value:new a.Q1f(c)},trim:{value:!p}}}),[t,i,c,p]),v=(0,s.useMemo)(()=>n.flatMap((e,n)=>{let t=[];if("LineString"===e.geometry.type){let n=[];e.geometry.coordinates.forEach(e=>{let[t,r]=e,[i,o,s]=p?ei([-t,r]):ea([t,r]);n.push(new a.Pq0(i,o,s))});let r=new Float32Array(3*n.length);n.forEach((e,n)=>{r.set([e.x,e.y,e.z],3*n)});let i=new a.LoY;i.setAttribute("position",new a.THS(r,3)),t.push(i)}else"MultiPolygon"===e.geometry.type?e.geometry.coordinates.forEach((e,n)=>{let r=n,i=e[0],o=[];i.forEach(e=>{let[n,t]=e;r++;let[i,s,l]=p?ei([-n,t]):ea([n,t]);o.push(new a.Pq0(i,s,l))});let s=new Float32Array(3*o.length);o.forEach((e,n)=>{s.set([e.x,e.y,e.z],3*n)});let l=new a.LoY;l.setAttribute("position",new a.THS(s,3)),t.push(l)}):("Polygon"===e.geometry.type?[e.geometry.coordinates]:e.geometry.coordinates).forEach(e=>{let n=[];e.forEach(e=>{e.forEach(e=>{let[t,r]=e,[i,o,s]=p?ei([-t,r]):ea([t,r]);n.push(new a.Pq0(i,o,s))})});let r=new Float32Array(3*n.length);n.forEach((e,n)=>{r.set([e.x,e.y,e.z],3*n)});let i=new a.LoY;i.setAttribute("position",new a.THS(r,3)),t.push(i)});return t}),[n,p,f]),g=(0,s.useMemo)(()=>v.map((e,n)=>{let t=new a.N1A(e,h);return(0,r.jsx)("primitive",{object:t},"border-".concat(n))}),[v,h]);return(0,r.jsx)(r.Fragment,{children:g})}let es=()=>{let[e,n]=(0,s.useState)(null),[t,a]=(0,s.useState)(null),[i,o]=(0,s.useState)(!1),{zRange:c,plotType:d,showBorders:f}=(0,l.Ws)((0,u.k)(e=>({zRange:e.zRange,plotType:e.plotType,showBorders:e.showBorders}))),[m,p]=(0,s.useState)(!1);return(0,s.useEffect)(()=>{"sphere"===d?p(!0):p(!1)},[d]),(0,V.D)(e=>{let{camera:n}=e;!m&&(Math.abs(n.rotation.z)>Math.PI/2?o(!0):i&&o(!1))}),(0,s.useEffect)(()=>{fetch("./ne_110m_coastline.json").then(e=>e.json()).then(e=>n(e.features)),fetch("./ne_110m_admin_0_countries.json").then(e=>e.json()).then(e=>a(e.features))},[]),(0,r.jsxs)("group",{visible:f,position:m?[0,0,0]:[0,0,i?c[0]:c[1]],children:[e&&(0,r.jsx)(eo,{features:e}),t&&(0,r.jsx)(eo,{features:t})]})};a.l2R.enabled=!0;let el=function(){let{initStore:e,setZMeta:n}=(0,l.on)((0,u.k)(e=>({initStore:e.initStore,setZMeta:e.setZMeta}))),{currentStore:t,setCurrentStore:a}=(0,l.SZ)((0,u.k)(e=>({currentStore:e.currentStore,setCurrentStore:e.setCurrentStore})));(0,s.useEffect)(()=>{a((0,o.Oe)(e))},[e]);let d=(0,s.useMemo)(()=>new o.Y5(t),[t]),[f,m]=(0,s.useState)({});(0,s.useEffect)(()=>{let e=!0;(0,i.tz)(t).then(n=>{e&&m(n)});let r=(0,i.Tk)(t),a=(0,i.Bi)(r);return r.then(e=>n(e)),a.then(e=>{p(e)}),()=>{e=!1}},[t]);let{setVariables:p,setPlotOn:x,timeSeries:h,variable:v,metadata:y,plotOn:S}=(0,l.on)((0,u.k)(e=>({setVariables:e.setVariables,setPlotOn:e.setPlotOn,timeSeries:e.timeSeries,variable:e.variable,metadata:e.metadata,plotOn:e.plotOn})));return(0,s.useEffect)(()=>{"Default"===v&&x(!1)},[v]),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(g.oU,{}),(0,r.jsx)(g.$D,{}),!S&&(0,r.jsx)(g.Fp,{}),(0,r.jsx)(g.Rh,{}),"Default"===v&&(0,r.jsx)(c,{}),"Default"!=v&&(0,r.jsx)(K,{ZarrDS:d}),y&&(0,r.jsx)(g.OS,{data:y}),Object.keys(h).length>=1&&(0,r.jsx)(U,{})]})}},4435:()=>{},6720:()=>{},7619:()=>{},8968:(e,n,t)=>{Promise.resolve().then(t.bind(t,1417))}},e=>{e.O(0,[546,826,989,197,669,813,755,858,56,667,645,451,812,959,152,195,100,970,800,984,65,154,225,496,540,240,358],()=>e(e.s=8968)),_N_E=e.O()}]);