(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[974],{642:(e,n,t)=>{Promise.resolve().then(t.bind(t,7033))},4431:()=>{},6730:()=>{},7033:(e,n,t)=>{"use strict";t.d(n,{default:()=>ew});var r=t(4079),i=t(9038),a=t(568),o=t(2688),l=t(6471);let s=" // by Jeran Poehls\r\n\r\nout vec3 vOrigin;\r\nout vec3 vDirection;\r\nout vec3 aPosition;\r\n\r\nout vec2 Vuv;\r\n\r\nvoid main() {\r\n    vec4 worldPos = modelViewMatrix * vec4( position, 1.0 );\r\n    \r\n    aPosition = position; //Pass out position for sphere frag\r\n    vOrigin = vec3( inverse( modelMatrix ) * vec4( cameraPosition, 1.0 ) ).xyz;\r\n    vDirection = position - vOrigin;\r\n    Vuv = uv;\r\n    gl_Position = projectionMatrix * worldPos;\r\n}";var u=t(3045),d=t(2783),c=t(4593);let f=e=>{let{volTexture:n}=e,{shape:t,colormap:a,flipY:o,textureArrayDepths:f}=(0,u.on)((0,d.k)(e=>({shape:e.shape,colormap:e.colormap,flipY:e.flipY,textureArrayDepths:e.textureArrayDepths}))),{valueRange:m,xRange:p,yRange:x,zRange:v,quality:S,animProg:h,cScale:y,cOffset:g,useFragOpt:z,transparency:w,nanTransparency:b,nanColor:_,vTransferRange:I,vTransferScale:C}=(0,u.Ws)((0,d.k)(e=>({valueRange:e.valueRange,xRange:e.xRange,yRange:e.yRange,zRange:e.zRange,quality:e.quality,animProg:e.animProg,cScale:e.cScale,cOffset:e.cOffset,useFragOpt:e.useFragOpt,transparency:e.transparency,nanTransparency:e.nanTransparency,nanColor:e.nanColor,vTransferRange:e.vTransferRange,vTransferScale:e.vTransferScale}))),D=t.y/t.x,M=(0,l.useMemo)(()=>new i.BKk({glslVersion:i.Wdf,uniforms:{map:{value:n},textureDepths:{value:new i.Pq0(f[2],f[1],f[0])},cmap:{value:a},cOffset:{value:g},cScale:{value:y},threshold:{value:new i.I9Y(m[0],m[1])},scale:{value:t},flatBounds:{value:new i.IUQ(-p[1],-p[0],v[0],v[1])},vertBounds:{value:new i.I9Y(x[0]*D,x[1]*D)},steps:{value:S},animateProg:{value:h},transparency:{value:w},opacityMag:{value:C},useClipScale:{value:I},nanAlpha:{value:1-b},nanColor:{value:new i.Q1f(_)}},vertexShader:s,fragmentShader:z?"// This is an optimized version of the original Volumetric shader\r\n\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nin vec3 vOrigin;\r\nin vec3 vDirection;\r\n\r\nout vec4 color;\r\n\r\nuniform sampler3D map;\r\nuniform sampler2D cmap;\r\n\r\nuniform float cOffset;\r\nuniform float cScale;\r\nuniform vec3 scale;\r\nuniform vec2 threshold;\r\nuniform float steps;\r\nuniform vec4 flatBounds;\r\nuniform vec2 vertBounds;\r\nuniform float animateProg;\r\nuniform float transparency;\r\nuniform float nanAlpha;\r\nuniform vec3 nanColor;\r\n\r\nvec2 hitBox(vec3 orig, vec3 dir) {\r\n    vec3 box_min = vec3(-(scale * 0.5));\r\n    vec3 box_max = vec3(scale * 0.5);\r\n    vec3 inv_dir = 1.0 / dir;\r\n    vec3 tmin_tmp = (box_min - orig) * inv_dir;\r\n    vec3 tmax_tmp = (box_max - orig) * inv_dir;\r\n    vec3 tmin = min(tmin_tmp, tmax_tmp);\r\n    vec3 tmax = max(tmin_tmp, tmax_tmp);\r\n    float t0 = max(tmin.x, max(tmin.y, tmin.z));\r\n    float t1 = min(tmax.x, min(tmax.y, tmax.z));\r\n    return vec2(t0, t1);\r\n}\r\n\r\nfloat sample1( vec3 p ) {\r\n    return texture( map, p ).r;\r\n}\r\n\r\n#define epsilon 0.0001\r\n\r\nvoid main() {\r\n    vec3 rayDir = normalize(vDirection);\r\n    vec2 bounds = hitBox(vOrigin, rayDir);\r\n\r\n    if (bounds.x > bounds.y) discard;\r\n\r\n    bounds.x = max(bounds.x, 0.0);\r\n\r\n    vec3 p = vOrigin + bounds.x * rayDir;\r\n    vec3 inc = 1.0 / abs(rayDir);\r\n\r\n    //Step Sizes\r\n    float fineDelta = min(inc.x, min(inc.y, inc.z)) / steps;\r\n\r\n    float coarseDelta = min(inc.x, min(inc.y, inc.z))/50.;\r\n\r\n    float delta = fineDelta;\r\n\r\n    vec4 accumColor = vec4(0.0);\r\n    float alphaAcc = 0.0;\r\n\r\n    float t = bounds.x;\r\n    int countdown = 0;\r\n    bool useCoarseStep = false;\r\n\r\n    while (t < bounds.y) {\r\n        vec3 p = vOrigin + rayDir * t;\r\n        \r\n        // --- Boundary checks ---\r\n        if (p.x < flatBounds.x || p.x > flatBounds.y ||\r\n            p.z < flatBounds.z || p.z > flatBounds.w ||\r\n            p.y < vertBounds.x || p.y > vertBounds.y) {\r\n\r\n            t += useCoarseStep ? coarseDelta : fineDelta;\r\n            continue;\r\n        }\r\n\r\n        vec3 texCoord = p / scale + 0.5;\r\n        texCoord.z = mod(texCoord.z + animateProg, 1.0001);\r\n        float d = sample1(texCoord);\r\n\r\n        bool cond = nanAlpha == 0. ? (d > threshold.x) && (d < threshold.y) : (d > threshold.x) && (d < threshold.y+.01); //We skip over nans if the transparency is enabled\r\n        \r\n        if (cond) {\r\n            // Hit something interesting - switch to fine stepping\r\n            if (useCoarseStep) {\r\n                useCoarseStep = false;\r\n                countdown = 40;\r\n                // Step back to ensure we don't miss the boundary\r\n                t -= coarseDelta;\r\n                continue;\r\n            }\r\n            if (d == 1.){\r\n                accumColor.rgb += (1.0 - alphaAcc) * pow(nanAlpha, 5.) * nanColor.rgb;\r\n                alphaAcc += pow(nanAlpha, 5.);\r\n            }\r\n            else{\r\n                float sampLoc = (d - 0.5)*cScale + 0.5;\r\n                sampLoc = min(sampLoc+cOffset,0.99);\r\n                vec4 col = texture(cmap, vec2(sampLoc, 0.5));\r\n                float alpha = pow(max(sampLoc, 0.001), transparency);\r\n                accumColor.rgb += (1.0 - alphaAcc) * alpha * col.rgb;\r\n                alphaAcc += alpha * (1.0 - alphaAcc);\r\n            }      \r\n\r\n            if (alphaAcc >= 1.0) break;\r\n            \r\n            t += fineDelta;\r\n        }\r\n        else {\r\n            // Nothing interesting here\r\n            if (countdown > 0) {\r\n                countdown--;\r\n                t += fineDelta; // Continue with fine steps while countdown > 0\r\n            } else {\r\n                useCoarseStep = true;\r\n                t += coarseDelta; // Switch to coarse steps\r\n            }\r\n        }\r\n    }\r\n    accumColor.a = alphaAcc; // Set the final accumulated alpha\r\n    color = accumColor;\r\n    if (color.a == 0.0) discard;\r\n}\r\n":"// by Jeran Poehls\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nin vec3 vOrigin;\r\nin vec3 vDirection;\r\n\r\nout vec4 color;\r\n\r\nuniform sampler3D map[14]; // We are limited to 16 textures. Cmap counts as one. 15 is weird so we use 14. \r\nuniform sampler2D cmap;\r\nuniform vec3 textureDepths;\r\n\r\nuniform float cOffset;\r\nuniform float cScale;\r\nuniform vec3 scale;\r\nuniform vec2 threshold;\r\nuniform float steps;\r\nuniform vec4 flatBounds;\r\nuniform vec2 vertBounds;\r\nuniform float animateProg;\r\nuniform float transparency;\r\nuniform float nanAlpha;\r\nuniform vec3 nanColor;\r\nuniform float opacityMag;\r\nuniform bool useClipScale;\r\n\r\n\r\nvec2 hitBox(vec3 orig, vec3 dir) {\r\n    vec3 box_min = vec3(-(scale * 0.5));\r\n    vec3 box_max = vec3(scale * 0.5);\r\n    vec3 inv_dir = 1.0 / dir;\r\n    vec3 tmin_tmp = (box_min - orig) * inv_dir;\r\n    vec3 tmax_tmp = (box_max - orig) * inv_dir;\r\n    vec3 tmin = min(tmin_tmp, tmax_tmp);\r\n    vec3 tmax = max(tmin_tmp, tmax_tmp);\r\n    float t0 = max(tmin.x, max(tmin.y, tmin.z));\r\n    float t1 = min(tmax.x, min(tmax.y, tmax.z));\r\n    return vec2(t0, t1);\r\n}\r\n\r\nfloat sample1(vec3 p, int index) { // Shader doesn't support dynamic indexing so we gotta use switching\r\n    if (index == 0) return texture(map[0], p).r;\r\n    else if (index == 1) return texture(map[1], p).r;\r\n    else if (index == 2) return texture(map[2], p).r;\r\n    else if (index == 3) return texture(map[3], p).r;\r\n    else if (index == 4) return texture(map[4], p).r;\r\n    else if (index == 5) return texture(map[5], p).r;\r\n    else if (index == 6) return texture(map[6], p).r;\r\n    else if (index == 7) return texture(map[7], p).r;\r\n    else if (index == 8) return texture(map[8], p).r;\r\n    else if (index == 9) return texture(map[9], p).r;\r\n    else if (index == 10) return texture(map[10], p).r;\r\n    else if (index == 11) return texture(map[11], p).r;\r\n    else if (index == 12) return texture(map[12], p).r;\r\n    else if (index == 13) return texture(map[13], p).r;\r\n    else return 0.0;\r\n}\r\n\r\n\r\n\r\n#define epsilon 0.000001\r\n\r\nvoid main() {\r\n    vec3 rayDir = normalize(vDirection);\r\n    vec2 bounds = hitBox(vOrigin, rayDir);\r\n\r\n    if (bounds.x > bounds.y) discard;\r\n\r\n    bounds.x = max(bounds.x, 0.0);\r\n\r\n    vec3 p = vOrigin + bounds.x * rayDir;\r\n    vec3 inc = 1.0 / abs(rayDir);\r\n    float delta = min(inc.x, min(inc.y, inc.z));\r\n    delta /= steps;\r\n    vec4 accumColor = vec4(0.0);\r\n    float alphaAcc = 0.0;\r\n\r\n    int zStepSize = int(textureDepths.y) * int(textureDepths.x); \r\n    int yStepSize = int(textureDepths.x); \r\n\r\n    for (float t = bounds.x; t < bounds.y; t += delta) {\r\n        p = vOrigin + rayDir * t;\r\n        if (p.x > -flatBounds.x || p.x < -flatBounds.y) { \r\n            continue;\r\n        }\r\n        if (-p.z > -flatBounds.z || -p.z < -flatBounds.w) {\r\n            continue;\r\n        }\r\n        if (p.y < vertBounds.x || p.y > vertBounds.y) {\r\n            continue;\r\n        }\r\n\r\n        vec3 texCoord = p / scale + 0.5;\r\n        texCoord.z = mod(texCoord.z + animateProg, 1.0001);\r\n        texCoord = clamp(texCoord, vec3(0.0), 1. - vec3(epsilon)); // This prevents the the very end of the dimensions having floating point errors\r\n\r\n        ivec3 idx = clamp(ivec3(texCoord * textureDepths), ivec3(0), ivec3(textureDepths) - 1);\r\n        int textureIdx = idx.z * zStepSize + idx.y * yStepSize + idx.x;\r\n        vec3 localCoord = texCoord * (textureDepths);  \r\n        localCoord = fract(localCoord);\r\n        float d = sample1(localCoord, textureIdx);\r\n\r\n        bool cond = nanAlpha == 0. ? (d >= threshold.x) && (d <= threshold.y) : (d >= threshold.x) && (d <= threshold.y); //We skip over nans if the transparency is enabled\r\n        \r\n        if (cond) {\r\n            if (d == 1.){\r\n                accumColor.rgb += (1.0 - alphaAcc) * pow(nanAlpha, 5.) * nanColor.rgb;\r\n                alphaAcc += pow(nanAlpha, 5.);\r\n            }\r\n            else{\r\n                float sampLoc = (d - 0.5)*cScale + 0.5;\r\n                sampLoc = min(sampLoc+cOffset,0.99);\r\n                vec4 col = texture(cmap, vec2(sampLoc, 0.5));\r\n                float alpha;\r\n                if (useClipScale){\r\n                    float normalizedOpacity = clamp((sampLoc - threshold.x) / (threshold.y - threshold.x), 0.0, 1.0);\r\n                    alpha = pow(max(normalizedOpacity, 0.001), transparency*opacityMag);\r\n                } else {\r\n                    alpha = pow(max(sampLoc, 0.001), transparency*opacityMag);\r\n                }\r\n                accumColor.rgb += (1.0 - alphaAcc) * alpha * col.rgb;\r\n                alphaAcc += alpha * (1.0 - alphaAcc);\r\n            }      \r\n\r\n            if (alphaAcc >= 1.0) break;\r\n        }\r\n    }\r\n\r\n    accumColor.a = alphaAcc; // Set the final accumulated alpha\r\n    color = accumColor;\r\n    if (color.a == 0.0) discard;\r\n}\r\n",transparent:!0,blending:i.NTi,depthWrite:!1,side:i.hsX}),[z]),k=(0,l.useMemo)(()=>new i.WBB(12,4),[]);return(0,l.useEffect)(()=>{if(M){let e=M.uniforms;e.map.value=n,e.cmap.value=a,e.cOffset.value=g,e.cScale.value=y,e.threshold.value.set(m[0],m[1]),e.scale.value=t,e.flatBounds.value.set(-p[1],-p[0],v[0],v[1]),e.vertBounds.value.set(x[0]*D,x[1]*D),e.steps.value=S,e.animateProg.value=h,e.transparency.value=w,e.nanAlpha.value=1-b,e.nanColor.value.set(_),e.opacityMag.value=C,e.useClipScale.value=I,(0,c.m)()}},[n,t,a,g,y,m,p,x,v,D,S,h,w,b,_,C,I]),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("mesh",{geometry:k,scale:[1,o?-1:1,1],children:(0,r.jsx)("primitive",{attach:"material",object:M})})})};var m=t(3889),p=t(9999);let x=e=>{let{ZarrDS:n}=e,{setTimeSeries:t,setPlotDim:a,setDimCoords:o,updateTimeSeries:s,updateDimCoords:c}=(0,u.on)((0,d.k)(e=>({setTimeSeries:e.setTimeSeries,setPlotDim:e.setPlotDim,setDimCoords:e.setDimCoords,updateTimeSeries:e.updateTimeSeries,updateDimCoords:e.updateDimCoords}))),{analysisMode:f,analysisArray:x}=(0,u.r2)((0,d.k)(e=>({analysisMode:e.analysisMode,analysisArray:e.analysisArray}))),{shape:v,dataShape:S,strides:h,dimArrays:y,dimNames:g,dimUnits:z}=(0,u.on)((0,d.k)(e=>({shape:e.shape,dataShape:e.dataShape,strides:e.strides,dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits}))),{selectTS:w,getColorIdx:b,incrementColorIdx:_}=(0,u.Ws)((0,d.k)(e=>({selectTS:e.selectTS,getColorIdx:e.getColorIdx,incrementColorIdx:e.incrementColorIdx}))),I=(0,l.useRef)(0),C=(0,l.useMemo)(()=>new i.iNn(1,1,1),[]);return(0,l.useEffect)(()=>()=>{C.dispose()},[]),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("mesh",{geometry:C,scale:v,onClick:e=>{e.stopPropagation(),e.intersections.length>0&&w&&function(e){e.point;let r=e.uv,i=e.normal,l=(0,m._8)(i);if(l!=I.current&&(t({}),o({})),I.current=l,n){var u,d;let e=(0,m.PE)({data:f?x:(0,m.Td)(),shape:S,stride:h},{uv:r,normal:i}),n=i.toArray().map((e,n)=>Math.abs(e)>0?n:null).filter(e=>null!==e);a(2-n[0]);let t=(0,m.jT)({normal:i,uv:r}).map((e,n)=>e?y[n][Math.round(e*y[n].length)]:null),o=g.filter((e,n)=>null!==t[n]),l=z.filter((e,n)=>null!==t[n]);t=t.filter(e=>null!==e);let v="".concat(t[0],"_").concat(t[1]);s({[v]:{color:(0,p.md)(b()/10,"Paired"),data:e}}),_(),c({[v]:{first:{name:o[0],loc:null!=(u=t[0])?u:0,units:l[0]},second:{name:o[1],loc:null!=(d=t[1])?d:0,units:l[1]},plot:{units:z[2-n[0]]}}})}}(e.intersections[0])},children:(0,r.jsx)("meshBasicMaterial",{transparent:!0,opacity:0})})})},v=e=>{let{dimensions:n,ZarrDS:t,setters:i}=e,{width:a,height:o,depth:s}=n,{setPoints:c,setStride:f,setDimWidth:x}=i,v=(0,u.Ws)(e=>e.selectTS),{dimArrays:S,dimUnits:h,dimNames:y,strides:g,dataShape:z,setPlotDim:w,setTimeSeries:b,updateTimeSeries:_,setDimCoords:I,updateDimCoords:C}=(0,u.on)((0,d.k)(e=>({dimArrays:e.dimArrays,dimUnits:e.dimUnits,dimNames:e.dimNames,strides:e.strides,dataShape:e.dataShape,setPlotDim:e.setPlotDim,setTimeSeries:e.setTimeSeries,updateTimeSeries:e.updateTimeSeries,setDimCoords:e.setDimCoords,updateDimCoords:e.updateDimCoords}))),{analysisMode:D,analysisArray:M}=(0,u.r2)((0,d.k)(e=>({analysisMode:e.analysisMode,analysisArray:e.analysisArray}))),{zSlice:k,ySlice:P,xSlice:T}=(0,u.SZ)((0,d.k)(e=>({zSlice:e.zSlice,ySlice:e.ySlice,xSlice:e.xSlice}))),O=[S[0].slice(k[0],k[1]?k[1]:void 0),S[1].slice(P[0],P[1]?P[1]:void 0),S.length>2?S[2].slice(T[0],T[1]?T[1]:void 0):[]],B=(0,l.useRef)(null),{timeScale:A,getColorIdx:N,incrementColorIdx:j}=(0,u.Ws)((0,d.k)(e=>({timeScale:e.timeScale,getColorIdx:e.getColorIdx,incrementColorIdx:e.incrementColorIdx}))),E=z[2]/500,L=(0,l.useMemo)(()=>z[0]/z[2]*A,[z,A]),U=(0,l.useMemo)(()=>z[1]/z[2],[z]);return(0,r.jsxs)("mesh",{scale:[2*E,2*U*E,2*L*E],position:[-.002,-.002,.002],onClick:function(e){if(!v)return;let n=e.uv,r=e.normal,i=(0,m._8)(r);if(i!=B.current&&(b({}),I({}),c({})),B.current=i,t){var l,u;let e=(0,m.PE)({data:D?M:(0,m.Td)(),shape:z,stride:g},{uv:n,normal:r}),t=r.toArray().map((e,n)=>Math.abs(e)>0?n:null).filter(e=>null!==e);w(2-t[0]);let i=(0,m.jT)({normal:r,uv:n}),d=i.map((e,n)=>e?O[n][Math.round(e*O[n].length-.5)]:null),v=y.filter((e,n)=>null!==d[n]),S=h.filter((e,n)=>null!==d[n]);d=d.filter(e=>null!==e);let b="".concat(d[0],"_").concat(d[1]),I={color:(0,p.md)(N()/10,"Paired"),data:e};j(),_({[b]:I}),C({[b]:{first:{name:v[0],loc:null!=(l=d[0])?l:0,units:S[0]},second:{name:v[1],loc:null!=(u=d[1])?u:0,units:S[1]},plot:{units:h[2-t[0]]}}});let k=[s,o,a].filter((e,n)=>null!=i[n]),P=[s,o,a].filter((e,n)=>null==i[n]),T=i.filter(e=>null!=e),B=g.filter((e,n)=>null!=i[n]),A=Math.round(T[0]*k[0]-.5),E=Math.round(T[1]*k[1]-.5),L=A*B[0]+E*B[1],U=g.filter((e,n)=>null==i[n]);x(P[0]),c(e=>({...{[b]:L},...e})),f(U[0])}},children:[(0,r.jsx)("boxGeometry",{}),(0,r.jsx)("meshBasicMaterial",{transparent:!0,opacity:0})]})},S=e=>{let{textures:n,ZarrDS:t}=e,{colormap:a}=n,{timeSeries:o,flipY:s,dataShape:c,textureData:f}=(0,u.on)((0,d.k)(e=>({timeSeries:e.timeSeries,flipY:e.flipY,dataShape:e.dataShape,textureData:e.textureData}))),{scalePoints:m,scaleIntensity:p,pointSize:x,cScale:S,cOffset:h,valueRange:y,animProg:g,selectTS:z,timeScale:w,xRange:b,yRange:_,zRange:I}=(0,u.Ws)((0,d.k)(e=>({scalePoints:e.scalePoints,scaleIntensity:e.scaleIntensity,pointSize:e.pointSize,cScale:e.cScale,cOffset:e.cOffset,valueRange:e.valueRange,animProg:e.animProg,selectTS:e.selectTS,timeScale:e.timeScale,xRange:e.xRange,yRange:e.yRange,zRange:e.zRange}))),[C,D]=(0,l.useState)({}),[M,k]=(0,l.useState)(Array(10).fill(-1)),[P,T]=(0,l.useState)(1),[O,B]=(0,l.useState)(0);(0,l.useEffect)(()=>{let e=Object.keys(C),n=Object.keys(o),t=(e=e.filter(e=>n.includes(e))).map(e=>C[e]);k([...t,...Array(Math.max(0,10-t.length)).fill(-1)])},[o,C]);let{data:A,width:N,height:j,depth:E}=(0,l.useMemo)(()=>{let[e,n,t]=c;return{data:f,width:t,height:n,depth:e}},[f,c]),L=(0,l.useMemo)(()=>{let e=new i.LoY;e.setAttribute("value",new i.baL(A,1));let n=E*j*N;return e.setDrawRange(0,n),e},[A]),U=(0,l.useMemo)(()=>new i.BKk({glslVersion:i.Wdf,uniforms:{pointSize:{value:x},cmap:{value:a},cOffset:{value:h},cScale:{value:S},valueRange:{value:new i.I9Y(y[0],y[1])},scalePoints:{value:m},scaleIntensity:{value:p},startIDs:{value:M},stride:{value:P},showTransect:{value:z},dimWidth:{value:O},timeScale:{value:w},animateProg:{value:g},shape:{value:new i.Pq0(E,j,N)},flatBounds:{value:new i.IUQ(b[0],b[1],I[0],I[1])},vertBounds:{value:new i.I9Y(_[0],_[1])}},vertexShader:"attribute float value;\r\n\r\nout float vValue;\r\n\r\nflat out int highlight;\r\n\r\nuniform float pointSize;\r\nuniform bool scalePoints;\r\nuniform float scaleIntensity;\r\nuniform vec2 valueRange;\r\nuniform int[10] startIDs;\r\nuniform int stride;\r\nuniform int dimWidth;\r\nuniform bool showTransect;\r\nuniform float timeScale;\r\nuniform float animateProg;\r\nuniform vec4 flatBounds;\r\nuniform vec2 vertBounds;\r\nuniform vec3 shape;\r\n\r\nbool isValidPoint(){\r\n    for (int i = 0; i < 10; i++){\r\n        if (startIDs[i] == -1){\r\n            return false;\r\n        }\r\n        int rePos = gl_VertexID - startIDs[i];\r\n        bool isValid = rePos % stride == 0;\r\n        bool secondary = gl_VertexID < (startIDs[i] + dimWidth*stride) && gl_VertexID > startIDs[i];\r\n        isValid = isValid && secondary;\r\n        if (isValid){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nvec3 computePosition(int vertexID) {\r\n    int depth = int(shape.x);\r\n    int height = int(shape.y);\r\n    int width = int(shape.z);\r\n\r\n    int sliceSize = width * height;\r\n\r\n    int z = vertexID / sliceSize;\r\n    int y = (vertexID % sliceSize) / width;\r\n    int x = vertexID % width;\r\n\r\n    float px = (float(x) - (float(width)/2.)) / 500.;\r\n    float py = (float(y) - (float(height)/2.)) / 500.;\r\n    float pz = (float(z) - (float(depth )/2.)) /500.;\r\n\r\n    return vec3(px * 2.0, py * 2.0, pz * 2.0);\r\n}\r\n\r\nvoid main() {\r\n    vValue = float(value)/255.;\r\n    vec3 scaledPos = computePosition(gl_VertexID);\r\n    float depthSize = float(shape.x)/500.;\r\n    float globalScale = float(shape.z)/600.;\r\n\r\n    scaledPos.z += depthSize;\r\n    scaledPos.z = mod(scaledPos.z + animateProg*depthSize*2., depthSize*2.);\r\n    scaledPos.z -= depthSize;\r\n\r\n    scaledPos.z *= timeScale;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(scaledPos, 1.0);\r\n\r\n    float pointScale = pointSize/gl_Position.w;\r\n    pointScale = scalePoints ? pointScale*pow(vValue,scaleIntensity) : pointScale;\r\n\r\n    bool isValid = isValidPoint();\r\n    highlight = isValid ? 1 : 0;\r\n    \r\n    if (value == 255. || (pointScale*gl_Position.w < 0.75 && scalePoints)){ //Hide points that are invisible or get too small when scalled\r\n        gl_Position = vec4(2.0, 2.0, 2.0, 1.0);\r\n    }\r\n\r\n    if (vValue < valueRange.x || vValue > valueRange.y){ //Hide points that are outside of value range\r\n        gl_Position = vec4(2.0, 2.0, 2.0, 1.0);\r\n    }\r\n\r\n    float scaleX = float(shape.z) / 500.0; //width scaling\r\n    float scaleY = float(shape.y) / 500.0; //height scaling\r\n    float scaleZ = float(shape.x) / 500.0; //depth scaling\r\n    \r\n    vec2 scaledXBounds = vec2(flatBounds.x, flatBounds.y) * scaleX;\r\n    vec2 scaledZBounds = vec2(flatBounds.z, flatBounds.w) * scaleZ * timeScale;\r\n    vec2 scaledYBounds = vec2(vertBounds.x, vertBounds.y) * scaleY;\r\n    \r\n    bool xCheck = scaledPos.x < scaledXBounds.x || scaledPos.x > scaledXBounds.y;\r\n    bool zCheck = scaledPos.z < scaledZBounds.x || scaledPos.z > scaledZBounds.y;\r\n    bool yCheck = scaledPos.y < scaledYBounds.x || scaledPos.y > scaledYBounds.y;\r\n\r\n    if (xCheck || zCheck || yCheck){ //Hide points that are clipped\r\n        gl_Position = vec4(2.0, 2.0, 2.0, 1.0);\r\n    }\r\n    \r\n    if (showTransect){\r\n        gl_PointSize = isValid ? pointScale*5.*globalScale : pointScale;\r\n    }\r\n    else{\r\n        gl_PointSize =  pointScale;\r\n    }\r\n\r\n}\r\n",fragmentShader:"out vec4 Color;\r\n\r\nin float vValue;\r\nflat in int highlight;\r\n\r\n\r\nuniform sampler2D cmap;\r\nuniform float cScale;\r\nuniform float cOffset;\r\nuniform bool showTransect;\r\n\r\nvoid main() {\r\n    float sampLoc = vValue == 1. ? vValue : (vValue - 0.5)*cScale + 0.5;\r\n    sampLoc = vValue == 1. ? vValue : min(sampLoc+cOffset,0.99);\r\n    vec4 color = texture(cmap, vec2(sampLoc, 0.5));\r\n    color.a = 1.;\r\n    Color = color;\r\n    if (showTransect){\r\n        Color = highlight == 1 ? color : color * vec4(vec3(0.4),1.);\r\n    }\r\n    else{\r\n        Color = color;\r\n    }\r\n}\r\n",depthWrite:!0,depthTest:!0,transparent:!1,blending:i.NTi,side:i.$EB}),[]);return(0,l.useEffect)(()=>{if(U){let e=U.uniforms;e.pointSize.value=x,e.cmap.value=a,e.cOffset.value=h,e.cScale.value=S,e.valueRange.value.set(y[0],y[1]),e.scalePoints.value=m,e.scaleIntensity.value=p,e.startIDs.value=M,e.stride.value=P,e.showTransect.value=z,e.dimWidth.value=O,e.timeScale.value=w,e.animateProg.value=g,e.flatBounds.value.set(b[0],b[1],I[0],I[1]),e.vertBounds.value.set(_[0],_[1])}},[x,a,h,S,y,m,p,M,P,z,g,w,b,_,I]),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("mesh",{scale:[1,s?-1:1,1],children:(0,r.jsx)("points",{geometry:L,material:U,frustumCulled:!1})}),(0,r.jsx)(v,{dimensions:{width:N,height:j,depth:E},ZarrDS:t,setters:{setPoints:D,setStride:T,setDimWidth:B}})]})};var h=t(2453),y=t(8992);t(9645);var g=t(3770);t(6730);var z=t(1870),w=t(5433);function b(e){let{...n}=e;return(0,r.jsx)(z.bL,{"data-slot":"dropdown-menu",...n})}function _(e){let{...n}=e;return(0,r.jsx)(z.l9,{"data-slot":"dropdown-menu-trigger",...n})}function I(e){let{className:n,sideOffset:t=4,...i}=e;return(0,r.jsx)(z.ZL,{children:(0,r.jsx)(z.UC,{"data-slot":"dropdown-menu-content",sideOffset:t,className:(0,w.cn)("bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",n),...i})})}function C(e){let{...n}=e;return(0,r.jsx)(z.YJ,{"data-slot":"dropdown-menu-group",...n})}function D(e){let{className:n,inset:t,variant:i="default",...a}=e;return(0,r.jsx)(z.q7,{"data-slot":"dropdown-menu-item","data-inset":t,"data-variant":i,className:(0,w.cn)("focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",n),...a})}function M(e){let{className:n,...t}=e;return(0,r.jsx)(z.wv,{"data-slot":"dropdown-menu-separator",className:(0,w.cn)("bg-border -mx-1 my-1 h-px",n),...t})}var k=t(4961);let P=l.memo(function(){let{showPoints:e,linePointSize:n,pointColor:t,useCustomPointColor:i,setLinePointSize:a,setPointColor:o,setUseCustomPointColor:l}=(0,u.Ws)((0,d.k)(e=>({showPoints:e.showPoints,linePointSize:e.linePointSize,pointColor:e.pointColor,useCustomPointColor:e.useCustomPointColor,setLinePointSize:e.setLinePointSize,setPointColor:e.setPointColor,setUseCustomPointColor:e.setUseCustomPointColor})));return e?(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("div",{className:"w-full flex items-center mb-2",children:[(0,r.jsx)("div",{className:"w-[40%]",children:(0,r.jsx)("b",{children:"Point Size"})}),(0,r.jsx)(k.A,{min:1,max:10,step:.1,value:[n],className:"flex-1 my-2",onValueChange:e=>a(e[0])})]}),(0,r.jsxs)("div",{className:"w-full flex items-center mb-2",children:[(0,r.jsx)("div",{className:"w-[40%]",children:(0,r.jsx)("b",{children:"Point Color"})}),i&&(0,r.jsx)("input",{type:"color",title:"Point Color",value:t,onChange:e=>o(e.target.value)}),(0,r.jsxs)(g.$,{className:"h-8 px-2 py-1",variant:"outline",onClick:()=>l(!i),children:["Use",i?" Browzarr Color":" Custom Color"]})]})]}):null}),T=l.memo(function(){let{lineWidth:e,lineColor:n,useLineColor:t,lineResolution:i,useCustomColor:a,setLineWidth:o,setLineColor:l,setUseLineColor:s,setLineResolution:c,setUseCustomColor:f}=(0,u.Ws)((0,d.k)(e=>({lineWidth:e.lineWidth,lineColor:e.lineColor,useLineColor:e.useLineColor,lineResolution:e.lineResolution,useCustomColor:e.useCustomColor,setLineWidth:e.setLineWidth,setLineColor:e.setLineColor,setUseLineColor:e.setUseLineColor,setLineResolution:e.setLineResolution,setUseCustomColor:e.setUseCustomColor})));return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("div",{className:"w-full flex items-center mb-2",children:[(0,r.jsx)("div",{className:"w-[40%]",children:(0,r.jsx)("b",{children:"Line Width"})}),(0,r.jsx)(k.A,{min:1,max:10,step:.2,value:[e],className:"flex-1 my-2",onValueChange:e=>o(e[0])})]}),(0,r.jsxs)("div",{className:"w-full flex items-center mb-2",children:[(0,r.jsx)("div",{className:"w-[40%]",children:(0,r.jsx)("b",{children:"Line Resolution"})}),(0,r.jsx)(k.A,{min:1,max:10,step:1,value:[i],className:"flex-1 my-2",onValueChange:e=>c(e[0])})]}),(0,r.jsxs)("div",{className:"w-full flex items-center",children:[(0,r.jsx)("div",{className:"w-[40%]",children:(0,r.jsx)("b",{children:"Line Color"})}),a&&(0,r.jsx)("input",{type:"color",title:"Line Color",value:n,onChange:e=>l(e.target.value)}),!a&&(0,r.jsxs)(g.$,{className:"h-8 px-2 py-5",variant:"outline",onClick:()=>s(!t),children:["Use ",(0,r.jsx)("br",{}),t?"Individual Color":"Plot Color"]}),(0,r.jsxs)(g.$,{className:"h-8 px-2 py-5",variant:"outline",onClick:()=>f(!a),children:["Use ",(0,r.jsx)("br",{}),a?"Browzarr Color":"Custom Color"]})]})]})}),O=l.memo(function(){let{showPoints:e,setShowPoints:n}=(0,u.Ws)((0,d.k)(e=>({showPoints:e.showPoints,setShowPoints:e.setShowPoints})));return(0,r.jsx)("div",{className:"plotline-options",children:(0,r.jsxs)(b,{children:[(0,r.jsx)(_,{asChild:!0,children:(0,r.jsx)(g.$,{className:"cursor-pointer",variant:"outline",children:"Line Options"})}),(0,r.jsxs)(I,{className:"w-80 items-center",align:"center",children:[(0,r.jsx)(C,{onClick:e=>e.preventDefault(),children:(0,r.jsx)(D,{children:(0,r.jsx)(g.$,{variant:"outline",onClick:t=>{t.preventDefault(),n(!e)},children:e?"Hide Points":"Show Points"})})}),(0,r.jsx)(P,{}),(0,r.jsx)(M,{}),(0,r.jsx)(T,{})]})]})})});var B=t(2142);function A(e){let{pointID:n,pointLoc:t,showPointInfo:i,plotUnits:a}=e,{plotDim:o,dimArrays:s,dimNames:c,dimUnits:f,timeSeries:p}=(0,u.on)((0,d.k)(e=>({plotDim:e.plotDim,dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits,timeSeries:e.timeSeries}))),x=0,v=0;if(Object.entries(n).length>0&&Object.entries(p).length>0){let[e,t]=n;x=p[e].data[t],v=s[o][t]}let[S,h]=t,[y,g]=(0,l.useState)(!1);return(0,l.useEffect)(()=>{if(!i){let e=setTimeout(()=>{g(!1)},100);return()=>clearTimeout(e)}g(!0)},[i]),(0,r.jsx)(r.Fragment,{children:y&&(0,r.jsxs)("div",{className:"point-info",style:{left:"".concat(S,"px"),top:"".concat(h,"px")},children:["".concat(x.toFixed(2)).concat(a),(0,r.jsx)("br",{}),"".concat(c[o],": ").concat((0,m.SB)(v,f[o]),"       \n        ")]})})}function N(){let{coords:e,timeSeries:n,setDimCoords:t,setTimeSeries:i}=(0,u.on)((0,d.k)(e=>({coords:e.dimCoords,timeSeries:e.timeSeries,setDimCoords:e.setDimCoords,setTimeSeries:e.setTimeSeries}))),[a,o]=(0,l.useState)(!1),s=(0,l.useRef)([0,Math.round(.255*window.innerHeight)]),c=(0,l.useRef)([0,Math.round(.255*window.innerHeight)]),[f,p]=(0,l.useState)([0,Math.round(.255*window.innerHeight)]);function x(e){if(a){let n=s.current[0]-e.clientX,t=s.current[1]-e.clientY,r=Math.min(Math.max(c.current[0]-n,10),window.innerWidth-120),i=Math.max(c.current[1]+t,0);p([Math.min(r,window.innerWidth-100),Math.min(i,window.innerHeight-100)])}}function v(){o(!1)}return(0,l.useEffect)(()=>(a&&(document.addEventListener("mousemove",x),document.addEventListener("mouseup",v)),()=>{document.removeEventListener("mousemove",x),document.removeEventListener("mouseup",v)}),[a]),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("div",{className:"coord-container",onPointerDown:function(e){s.current=[e.clientX,e.clientY],c.current=[...f],o(!0)},onPointerMove:x,onPointerUp:()=>o(!1),style:{left:"".concat(f[0],"px"),bottom:"".concat(f[1],"px")},children:Object.keys(e).length>0&&Object.keys(e).reverse().map((a,o)=>(0,r.jsxs)("div",{className:"plot-coords",style:{background:"rgb(".concat(n[a].color,")"),justifyContent:"space-between"},children:[(0,r.jsx)("b",{children:"".concat(e[a].first.name,": ")}),"".concat((0,m.SB)(e[a].first.loc,e[a].first.units)),(0,r.jsx)("br",{}),(0,r.jsx)("b",{children:"".concat(e[a].second.name,": ")}),"".concat((0,m.SB)(e[a].second.loc,e[a].second.units)),(0,r.jsx)(B.Xr4,{onClick:()=>(function(r){let{[r]:a,...o}=e;t(o);let{[r]:l,...s}=n;i(s)})(a),style:{cursor:"pointer",zIndex:3},size:24})]},a))})})}function j(){let[e,n]=(0,l.useState)(["",0]),[t,i]=(0,l.useState)([0,0]),[a,o]=(0,l.useState)(!1),[s,d]=(0,l.useState)(Math.round(window.innerHeight-.25*window.innerHeight)),c=(0,u.on)(e=>e.metadata),f=c?c.units:"Default",[m,p]=(0,l.useState)(1),[x,v]=(0,l.useState)(1);(0,l.useEffect)(()=>{let e=()=>{let e=Math.round(window.innerHeight-.25*window.innerHeight);d(e),document.documentElement.style.setProperty("--plot-height","".concat(e,"px"))};return window.addEventListener("orientationchange",e),window.addEventListener("resize",e),()=>{window.removeEventListener("orientationchange",e),window.removeEventListener("resize",e)}},[]),(0,l.useEffect)(()=>{document.documentElement.style.setProperty("--plot-height","".concat(s,"px"))},[s]);let S=window.innerHeight-s>=10;return(0,r.jsxs)(r.Fragment,{children:[!S&&(0,r.jsx)(y.de,{onClick:()=>{d(window.innerHeight-60)}}),S&&(0,r.jsxs)("div",{className:"plot-canvas",children:[(0,r.jsx)(O,{}),a&&(0,r.jsx)(A,{pointID:e,pointLoc:t,showPointInfo:a,plotUnits:f}),(0,r.jsx)(y.A,{height:s,setHeight:d}),(0,r.jsx)(y.gj,{scale:m,setScale:p}),(0,r.jsx)(y.LC,{scale:x,setScale:v}),(0,r.jsxs)(h.Hl,{orthographic:!0,camera:{position:[0,0,100]},frameloop:"demand",children:[(0,r.jsx)(er,{height:s,yScale:m,pointSetters:{setPointID:n,setPointLoc:i,setShowPointInfo:o},xScale:x}),(0,r.jsx)(U,{height:s,yScale:m,xScale:x})]}),(0,r.jsx)(N,{})]})]})}var E=t(5788),L=t(8939);function U(e){let{colorTicks:n="grey",tickSize:t=4,fontSize:i=14,showGrid:a=!0,gridOpacity:o=.5,height:s,yScale:f=1,xScale:p=1}=e,{camera:x}=(0,c.C)(),[v,S]=(0,l.useState)({left:0,right:0,top:0,bottom:0}),{dimCoords:h,dimArrays:y,plotDim:g,valueScales:z}=(0,u.on)((0,d.k)(e=>({dimCoords:e.dimCoords,dimArrays:e.dimArrays,plotDim:e.plotDim,valueScales:e.valueScales}))),{zSlice:w,ySlice:b,xSlice:_}=(0,u.SZ)((0,d.k)(e=>({zSlice:e.zSlice,ySlice:e.ySlice,xSlice:e.xSlice}))),I=[y[0].slice(w[0],w[1]?w[1]:void 0),y[1].slice(b[0],b[1]?b[1]:void 0),y[2].slice(_[0],_[1]?_[1]:void 0)][g],C=I.length,D=z.maxVal-z.minVal,M=(0,l.useMemo)(()=>{let e=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];if(I){if(I.every(e=>"bigint"==typeof e)){let n=Object.keys(h).length>0?Object.keys(h)[0]:null,[t,r]=n?(0,m.lt)(h[n].plot.units):[1,0],i=[];for(let n=0;n<I.length;n++){let a=new Date(Number(I[n])*t+r),o="".concat(a.getDate().toString().padStart(2,"0")," ").concat(e[a.getMonth()],"\n").concat(a.getFullYear());i.push(o)}return i}return I.map(e=>String(e))}},[I,h]),k=(0,l.useMemo)(()=>{let e=window.innerWidth,n=window.innerHeight-s;return{left:-e/2+x.position.x,right:e/2+x.position.x,top:n/2+x.position.y,bottom:-n/2+x.position.y}},[]),[P,T]=(0,l.useState)(x.zoom),O=(0,l.useMemo)(()=>{let e=1/x.zoom;return{tickSize:t*e,fontSize:i/e,labelOffset:t*e}},[x.zoom,t,i]);(0,c.D)(()=>{x.zoom!==P&&T(x.zoom);let e=window.innerWidth/x.zoom,n=(window.innerHeight-s)/x.zoom,t={left:-e/2+x.position.x,right:e/2+x.position.x,top:n/2+x.position.y,bottom:-n/2+x.position.y};JSON.stringify(v)!=JSON.stringify(t)&&S(t)});let B=(0,l.useRef)(null),A=(0,l.useRef)(null);(0,l.useEffect)(()=>(B.current&&clearTimeout(B.current),A.current&&(B.current=setTimeout(()=>{A.current&&A.current.reset()},100)),()=>{null!==B.current&&clearTimeout(B.current)}),[s]);let N=(v.top+v.bottom)/2,j=(v.left+v.right)/2;return(0,r.jsxs)("group",{children:[a&&(0,r.jsxs)(r.Fragment,{children:[Array.from({length:10},(e,t)=>{var i;if(0===t||9===t)return null;let a=+Math.round(v.left/1)+(Math.round(v.right/1)-Math.round(v.left/1))*(t/9),s=a/p/(k.right-k.left)+.5;return(0,r.jsxs)(l.Fragment,{children:[(0,r.jsx)("group",{position:[a,N,0],children:(0,r.jsxs)("line",{children:[(0,r.jsx)("bufferGeometry",{children:(0,r.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([0,v.top-N,0,0,v.bottom-N,0]),3]})}),(0,r.jsx)("lineDashedMaterial",{color:n,opacity:o,transparent:!0,dashSize:.5,gapSize:.5})]},"vgrid-".concat(t))}),(0,r.jsxs)("group",{position:[a,v.top,0],children:[(0,r.jsxs)("line",{children:[(0,r.jsx)("bufferGeometry",{children:(0,r.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([0,0,0,0,-O.tickSize,0]),3]})}),(0,r.jsx)("lineBasicMaterial",{color:n})]}),0!==t&&9!==t&&(0,r.jsx)(E.E,{position:[0,O.tickSize/4-O.labelOffset,0],fontSize:O.fontSize/P**2,color:n,anchorX:"center",anchorY:"top",children:null!=(i=null==M?void 0:M[Math.round(s*C-.5)])?i:""})]},"top-tick-".concat(t))]},"vert-group-".concat(t))}),Array.from({length:8},(e,t)=>{if(0===t||7===t)return null;let i=v.bottom+(v.top-v.bottom)*(t/7),a=i/f/(v.top-v.bottom)/P+.5;return(0,r.jsxs)(l.Fragment,{children:[(0,r.jsx)("group",{position:[j,i,0],children:(0,r.jsxs)("line",{children:[(0,r.jsx)("bufferGeometry",{children:(0,r.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([v.left-j,0,0,v.right-j,0,0]),3]})}),(0,r.jsx)("lineDashedMaterial",{color:n,opacity:o,transparent:!0,dashSize:0,gapSize:.5,linewidth:1})]})},"hgrid-".concat(t)),(0,r.jsxs)("group",{position:[v.right,i,0],children:[(0,r.jsxs)("line",{children:[(0,r.jsx)("bufferGeometry",{children:(0,r.jsx)("float32BufferAttribute",{attach:"attributes-position",args:[new Float32Array([0,0,0,-O.tickSize,0,0]),3]})}),(0,r.jsx)("lineBasicMaterial",{color:n})]}),0!==t&&7!==t&&(0,r.jsx)(E.E,{position:[-O.tickSize-O.labelOffset,0,0],fontSize:O.fontSize/P**2,color:n,anchorX:"right",anchorY:"middle",children:(z.minVal+a*D).toFixed(1)})]},"right-tick-".concat(t))]},"vert-group-".concat(t))})]}),(0,r.jsx)(L.N,{ref:A,enableRotate:!1,enablePan:!0,enableZoom:!0,zoomSpeed:.85,maxDistance:500,maxZoom:20,minZoom:.5})]})}var Y=t(3609);t(4431);let V=e=>{let{loc:n,show:t,info:i}=e,{dimNames:a,dimUnits:o}=(0,u.on)((0,d.k)(e=>({dimNames:e.dimNames,dimUnits:e.dimUnits}))),s=(0,u.r2)(e=>e.axis),c=(0,l.useMemo)(()=>a.length<3?[a[0],a[1]]:a.filter((e,n)=>n!=s),[a,s]),f=(0,l.useMemo)(()=>a.length<3?[o[0],o[1]]:o.filter((e,n)=>n!=s),[o,s]);return(0,r.jsxs)("div",{className:"analysis-overlay",style:{left:"".concat(n[0]+10,"px"),top:"".concat(n[1]+10,"px"),display:t?"":"none"},children:["".concat(c[0],": ").concat(t&&(0,m.SB)(i[0],f[0])),(0,r.jsx)("br",{}),"".concat(c[1],": ").concat(t&&(0,m.SB)(i[1],f[1])),(0,r.jsx)("br",{}),"Value: ".concat(Math.round(100*i[2])/100)]})};var R=t(9001);let F=e=>{let n="f16"===e?"enable f16;":"",t="\n        ".concat(n,"\n        struct Params {\n            zStride: u32,\n            yStride: u32,\n            xStride: u32,\n            xSize: u32,\n            ySize: u32,\n            reduceDim: u32,\n            dimLength: u32,\n        };\n        @group(0) @binding(0) var<storage, read> inputData: array<").concat(e,">;\n        @group(0) @binding(1) var<storage, read_write> outputData: array<").concat(e,">;\n        @group(0) @binding(2) var<uniform> params: Params;\n\n        @compute @workgroup_size(16, 16, 1)\n        fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n            let zStride = params.zStride;\n            let yStride = params.yStride;\n            let xStride = params.xStride;\n            let xSize = params.xSize;\n            let ySize = params.ySize;\n            let reduceDim = params.reduceDim;\n            let dimLength = params.dimLength;\n                            \n            let outX = global_id.y;\n            let outY = global_id.x;\n            \n            if (outX >= xSize || outY >= ySize) {\n                return;\n            }\n    "),r="\n        ".concat(n,"\n        struct Params {\n            xStride: u32,\n            yStride: u32,\n            zStride: u32,\n            xSize: u32,\n            ySize: u32,\n            zSize: u32,\n            workGroups: vec3<u32>,\n            kernelSize: u32,\n            kernelDepth: u32\n        };\n        @group(0) @binding(0) var<storage, read> inputData: array<").concat(e,">;\n        @group(0) @binding(1) var<storage, read_write> outputData: array<").concat(e,">;\n        @group(0) @binding(2) var<uniform> params: Params;\n        \n        @compute @workgroup_size(4, 4, 4)\n        fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n            let zStride = params.zStride;\n            let yStride = params.yStride;\n            let xStride = params.xStride; \n            let xSize = params.xSize;\n            let ySize = params.ySize;\n            let zSize = params.zSize; \n            let workGroups = params.workGroups;\n            let kernelSize = params.kernelSize;\n            let kernelDepth = params.kernelDepth;\n\n            let outX = global_id.x; \n            let outY = global_id.y;\n            let outZ = global_id.z; \n\n            if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n                return;\n            }\n\n            let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n            let globalIdx = global_id.z * total_threads_per_slice + \n                            global_id.y * (workGroups.x * 4) + \n                            global_id.x;\n\n            let xy_radius: i32 = i32(kernelSize/2u);\n            let z_radius: i32 = i32(kernelDepth/2u);\n\n            let xy_start: i32 = select(-xy_radius, 0, kernelSize == 1u);\n            let xy_end: i32 = select(xy_radius + 1, 1, kernelSize == 1u);\n            let z_start: i32 = select(-z_radius, 0, kernelDepth == 1u);\n            let z_end: i32 = select(z_radius + 1, 1, kernelDepth == 1u);\n    "),i="\n        ".concat(n,"\n        struct Params {\n            xStride: u32,\n            yStride: u32,\n            xSize: u32,\n            ySize: u32,\n            kernelSize: u32,\n            kernelDepth: u32\n        };\n        @group(0) @binding(0) var<storage, read> inputData: array<").concat(e,">;\n        @group(0) @binding(1) var<storage, read_write> outputData: array<").concat(e,">;\n        @group(0) @binding(2) var<uniform> params: Params;\n\n        @compute @workgroup_size(16, 16, 1)\n        fn main(@builtin(global_invocation_id) global_id: vec3<u32>,) {\n            let xStride = params.xStride; \n            let yStride = params.yStride;\n            let xSize = params.xSize;\n            let ySize = params.ySize;\n            let kernelSize = params.kernelSize;\n\n            let outX = global_id.x; \n            let outY = global_id.y;\n\n            if (outX >= xSize|| outY >= ySize) {\n                return;\n            }\n\n            let globalIdx = outY * xSize + outX;\n            let thisVal = inputData[globalIdx];\n            let isNaN: bool = thisVal != thisVal;\n            if (isNaN){\n                outputData[globalIdx] = thisVal;\n                return;\n            }   \n\n            let xy_radius: i32 = i32(kernelSize/2u);\n\n    ");return{MeanReduction:"\n        ".concat(t,"\n            var sum: f32 = 0.0;\n            \n            // Iterate along the dimension we're averaging\n            if (reduceDim == 0u) { // Average along Z\n                let cCoord = outX * xStride + outY * yStride;\n                for (var z: u32 = 0u; z < dimLength; z++) {\n                    let inputIndex = cCoord + (z * zStride);\n                    let newVal = f32(inputData[u32(inputIndex)]);\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    sum += newVal;\n                }\n            } else if (reduceDim == 1u) { // Average along Y\n                let cCoord = outX * xStride + outY * zStride;\n                for (var y: u32 = 0u; y < dimLength; y++) {\n                    let inputIndex = cCoord + (y * yStride);\n                    let newVal = f32(inputData[u32(inputIndex)]);\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    sum += newVal;\n                }\n            } else { // Average along X\n                let cCoord = outX * yStride + outY * zStride;\n                for (var x: u32 = 0u; x < dimLength; x++) {\n                    let inputIndex = cCoord + (x * xStride);\n                    let newVal = f32(inputData[u32(inputIndex)]);\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    sum += newVal;\n                }\n            }\n            \n            let outputIndex = outY * xSize + outX;\n            outputData[outputIndex] = ").concat(e,"(sum / f32(dimLength));\n        }\n    "),MinReduction:"\n        ".concat(t,"\n            var min: f32 = 1e12;\n            \n            // Iterate along the dimension we're averaging\n            if (reduceDim == 0u) { // Average along Z\n                let cCoord = outX * xStride + outY * yStride;\n                for (var z: u32 = 0u; z < dimLength; z++) {\n                    let inputIndex = cCoord + (z * zStride);\n                    let newMin = f32(inputData[inputIndex]);\n                    if (newMin < min) {\n                        min = newMin;\n                    }\n                }\n            } else if (reduceDim == 1u) { // Average along Y\n                let cCoord = outX * xStride + outY * zStride;\n                for (var y: u32 = 0u; y < dimLength; y++) {\n                    let inputIndex = cCoord + (y * yStride);\n                    let newMin = f32(inputData[inputIndex]);\n                    if (newMin < min) {\n                        min = newMin;\n                    }\n                }\n            } else { // Average along X\n                let cCoord = outX * yStride + outY * zStride;\n                for (var x: u32 = 0u; x < dimLength; x++) {\n                    let inputIndex = cCoord + (x * xStride);\n                    let newMin = f32(inputData[inputIndex]);\n                    if (newMin < min) {\n                        min = newMin;\n                    }\n                }\n            }\n            \n            let outputIndex = outY * xSize + outX;\n            outputData[outputIndex] = ").concat(e,"(min);\n        }\n    "),MaxReduction:"\n        ".concat(t,"\n            \n            var max: f32 = -1e12;\n            \n            // Iterate along the dimension we're averaging\n            if (reduceDim == 0u) { // Average along Z\n                let cCoord = outX * xStride + outY * yStride;\n                for (var z: u32 = 0u; z < dimLength; z++) {\n                    let inputIndex = cCoord + (z * zStride);\n                    let newMax = f32(inputData[inputIndex]);\n                    if (newMax > max) {\n                        max = newMax;\n                    }\n                }\n            } else if (reduceDim == 1u) { // Average along Y\n                let cCoord = outX * xStride + outY * zStride;\n                for (var y: u32 = 0u; y < dimLength; y++) {\n                    let inputIndex = cCoord + (y * yStride);\n                    let newMax = f32(inputData[inputIndex]);\n                    if (newMax > max) {\n                        max = newMax;\n                    }\n                }\n            } else { // Average along X\n                let cCoord = outX * yStride + outY * zStride;\n                for (var x: u32 = 0u; x < dimLength; x++) {\n                    let inputIndex = cCoord + (x * xStride);\n                    let newMax = f32(inputData[inputIndex]);\n                    if (newMax > max) {\n                        max = newMax;\n                    }\n                }\n            }\n            \n            let outputIndex = outY * xSize + outX;\n            outputData[outputIndex] = ").concat(e,"(max);\n        }\n    "),StDevReduction:"\n        ".concat(t,"\n            var sum: f32 = 0.0;\n            // Iterate along the dimension we're averaging\n            if (reduceDim == 0u) { // Average along Z\n                let cCoord = outX * xStride + outY * yStride;\n                for (var z: u32 = 0u; z < dimLength; z++) {\n                    let inputIndex = cCoord + (z * zStride);\n                    let newVal = f32(inputData[u32(inputIndex)]);\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    sum += newVal;\n                }\n            } else if (reduceDim == 1u) { // Average along Y\n                let cCoord = outX * xStride + outY * zStride;\n                for (var y: u32 = 0u; y < dimLength; y++) {\n                    let inputIndex = cCoord + (y * yStride);\n                    let newVal = f32(inputData[u32(inputIndex)]);\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    sum += newVal;\n                }\n            } else { // Average along X\n                let cCoord = outX * yStride + outY * zStride;\n                for (var x: u32 = 0u; x < dimLength; x++) {\n                    let inputIndex = cCoord + (x * xStride);\n                    let newVal = f32(inputData[u32(inputIndex)]);\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    sum += newVal;\n                }\n            }\n            \n            let mean: f32 = sum / f32(dimLength);\n\n            var squaredDiffSum: f32 = 0.0;\n\n            // Iterate along the dimension again\n            if (reduceDim == 0u) { // Average along Z\n                let cCoord = outX * xStride + outY * yStride;\n                for (var z: u32 = 0u; z < dimLength; z++) {\n                    let inputIndex = cCoord + (z * zStride);\n                    let newVal = f32(inputData[u32(inputIndex)]);\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    let diff: f32 = mean - newVal;\n                    squaredDiffSum += diff*diff;\n                }\n            } else if (reduceDim == 1u) { // Average along Y\n                let cCoord = outX * xStride + outY * zStride;\n                for (var y: u32 = 0u; y < dimLength; y++) {\n                    let inputIndex = cCoord + (y * yStride);\n                    let newVal = f32(inputData[u32(inputIndex)]);\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    let diff: f32 = mean - newVal;\n                    squaredDiffSum += diff*diff;\n                }\n            } else { // Average along X\n                let cCoord = outX * yStride + outY * zStride;\n                for (var x: u32 = 0u; x < dimLength; x++) {\n                    let inputIndex = cCoord + (x * xStride);\n                    let newVal = f32(inputData[u32(inputIndex)]);\n                    if (newVal != newVal){ //This only evaluates if newVal is NaN\n                        continue;\n                    }\n                    let diff: f32 = mean - newVal;\n                    squaredDiffSum += diff*diff;\n                }\n            }\n\n            let stDev: f32 = sqrt(squaredDiffSum / f32(dimLength));\n            let outputIndex = outY * xSize + outX;\n            outputData[outputIndex] = ").concat(e,"(stDev);\n        }\n    "),CUMSUMReduction:"\n        ".concat(n,"\n        struct Params {\n            zStride: u32,\n            yStride: u32,\n            xStride: u32,\n            xSize: u32,\n            ySize: u32,\n            reduceDim: u32,\n            dimLength: u32,\n        };\n        @group(0) @binding(0) var<storage, read> inputData: array<").concat(e,">;\n        @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n        @group(0) @binding(2) var<uniform> params: Params;\n\n        @compute @workgroup_size(16, 16, 1)\n        fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n            let zStride = params.zStride;\n            let yStride = params.yStride;\n            let xStride = params.xStride;\n            let xSize = params.xSize;\n            let ySize = params.ySize;\n            let reduceDim = params.reduceDim;\n            let dimLength = params.dimLength;\n                            \n            let outX = global_id.y;\n            let outY = global_id.x;\n            \n            if (outX >= xSize || outY >= ySize) {\n                return;\n            }\n            \n            var accum: f32 = 0;\n            \n            // Iterate along the dimension we're averaging\n            if (reduceDim == 0u) { // Average along Z\n                let cCoord = outX * xStride + outY * yStride;\n                for (var z: u32 = 0u; z < dimLength; z++) {\n                    let inputIndex = cCoord + (z * zStride);\n                    accum += f32(inputData[inputIndex]);\n                    \n                }\n            } else if (reduceDim == 1u) { // Average along Y\n                let cCoord = outX * xStride + outY * zStride;\n                for (var y: u32 = 0u; y < dimLength; y++) {\n                    let inputIndex = cCoord + (y * yStride);\n                    accum += f32(inputData[inputIndex]);\n                }\n            } else { // Average along X\n                let cCoord = outX * yStride + outY * zStride;\n                for (var x: u32 = 0u; x < dimLength; x++) {\n                    let inputIndex = cCoord + (x * xStride);\n                    accum += f32(inputData[inputIndex]);\n                }\n            }\n            \n            let outputIndex = outY * xSize + outX;\n            outputData[outputIndex] = accum;\n        }\n    "),LinearSlopeReduction:"\n        ".concat(t,"\n            let meanY: f32 = f32(dimLength)/2;\n            var sum: f32 = 0.0;\n\n\n            // Iterate along the dimension we're averaging\n            if (reduceDim == 0u) { // Average along Z\n                let cCoord = outX * xStride + outY * yStride;\n                for (var z: u32 = 0u; z < dimLength; z++) {\n                    let inputIndex = cCoord + (z * zStride);\n                    sum += f32(inputData[inputIndex]);\n                }\n            } else if (reduceDim == 1u) { // Average along Y\n                let cCoord = outX * xStride + outY * zStride;\n                for (var y: u32 = 0u; y < dimLength; y++) {\n                    let inputIndex = cCoord + (y * yStride);\n                    sum += f32(inputData[inputIndex]);\n                }\n            } else { // Average along X\n                let cCoord = outX * yStride + outY * zStride;\n                for (var x: u32 = 0u; x < dimLength; x++) {\n                    let inputIndex = cCoord + (x * xStride);\n                    sum += f32(inputData[inputIndex]);\n                }\n            }\n            \n            let meanX: f32 = sum / f32(dimLength);\n            var numSum: f32 = 0;\n            var denomSum: f32 = 0;\n\n            if (reduceDim == 0u) { // Average along Z\n                let cCoord = outX * xStride + outY * yStride;\n                for (var z: u32 = 0u; z < dimLength; z++) {\n                    let inputIndex = cCoord + (z * zStride);\n                    let xi: f32 = f32(inputData[inputIndex]);\n                    numSum += (xi - meanX)*(f32(z) - meanY);\n                    denomSum += (f32(z) - meanY)*(f32(z) - meanY);\n                }\n            } else if (reduceDim == 1u) { // Average along Y\n                let cCoord = outX * xStride + outY * zStride;\n                for (var y: u32 = 0u; y < dimLength; y++) {\n                    let inputIndex = cCoord + (y * yStride);\n                    let xi: f32 = f32(inputData[inputIndex]);\n                    numSum += (xi - meanX)*(f32(y) - meanY);\n                    denomSum += (f32(y) - meanY)*(f32(y) - meanY);\n                }\n            } else { // Average along X\n                let cCoord = outX * yStride + outY * zStride;\n                for (var x: u32 = 0u; x < dimLength; x++) {\n                    let inputIndex = cCoord + (x * xStride);\n                    let xi: f32 = f32(inputData[inputIndex]);\n                    numSum += (xi - meanX)*(f32(x) - meanY);\n                    denomSum += (f32(x) - meanY)*(f32(x) - meanY);\n                }\n            }\n            \n            let outputIndex = outY * xSize + outX;\n            outputData[outputIndex] = ").concat(e,"(numSum/denomSum);\n        }\n    "),TwoVarLinearSlopeReduction:"\n        ".concat(n,"\n        struct Params {\n        zStride: u32,\n        yStride: u32,\n        xStride: u32,\n        xSize: u32,\n        ySize: u32,\n        reduceDim: u32,\n        dimLength: u32,\n        };\n        @group(0) @binding(0) var<storage, read> firstData: array<").concat(e,">;\n        @group(0) @binding(1) var<storage, read> secondData: array<").concat(e,">;\n        @group(0) @binding(2) var<storage, read_write> outputData: array<").concat(e,">;\n        @group(0) @binding(3) var<uniform> params: Params;\n\n        @compute @workgroup_size(16, 16, 1)\n        fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n            let zStride = params.zStride;\n            let yStride = params.yStride;\n            let xStride = params.xStride;\n            let xSize = params.xSize;\n            let ySize = params.ySize;\n            let reduceDim = params.reduceDim;\n            let dimLength = params.dimLength;\n                            \n            let outX = global_id.y;\n            let outY = global_id.x;\n            \n            if (outX >= xSize || outY >= ySize) {\n                return;\n            }\n\n            var ySum: f32 = 0;\n            var xSum: f32 = 0.0;\n\n            // Iterate along the dimension we're averaging\n            if (reduceDim == 0u) { \n                let cCoord = outX * xStride + outY * yStride;\n                for (var z: u32 = 0u; z < dimLength; z++) {\n                    let inputIndex = cCoord + (z * zStride);\n                    let xi: f32 = f32(firstData[inputIndex]);\n                    let yi: f32 = f32(secondData[inputIndex]);\n                    if (xi != xi || yi != yi){ //This only evaluates if a value is NaN\n                        continue;\n                    }\n                    xSum += f32(firstData[inputIndex]);\n                    ySum += f32(secondData[inputIndex]);\n                }\n            } else if (reduceDim == 1u) { \n                let cCoord = outX * xStride + outY * zStride;\n                for (var y: u32 = 0u; y < dimLength; y++) {\n                    let inputIndex = cCoord + (y * yStride);\n                    let xi: f32 = f32(firstData[inputIndex]);\n                    let yi: f32 = f32(secondData[inputIndex]);\n                    if (xi != xi || yi != yi){ //This only evaluates if a value is NaN\n                        continue;\n                    }\n                    xSum += f32(firstData[inputIndex]);\n                    ySum += f32(secondData[inputIndex]);\n                }\n            } else { \n                let cCoord = outX * yStride + outY * zStride;\n                for (var x: u32 = 0u; x < dimLength; x++) {\n                    let inputIndex = cCoord + (x * xStride);\n                    let xi: f32 = f32(firstData[inputIndex]);\n                    let yi: f32 = f32(secondData[inputIndex]);\n                    if (xi != xi || yi != yi){ //This only evaluates if a value is NaN\n                        continue;\n                    }\n                    xSum += f32(firstData[inputIndex]);\n                    ySum += f32(secondData[inputIndex]);\n                }\n            }\n            \n            let xMean: f32 = xSum / f32(dimLength);\n            let yMean: f32 = ySum / f32(dimLength);\n            var numSum: f32 = 0;\n            var denomSum: f32 = 0;\n\n            if (reduceDim == 0u) { // Average along Z\n                let cCoord = outX * xStride + outY * yStride;\n                for (var z: u32 = 0u; z < dimLength; z++) {\n                    let inputIndex = cCoord + (z * zStride);\n                    let xi: f32 = f32(firstData[inputIndex]);\n                    let yi: f32 = f32(secondData[inputIndex]);\n                    if (xi != xi || yi != yi){ //This only evaluates if a value is NaN\n                        continue;\n                    }\n                    numSum += (xi - xMean)*(f32(yi) - yMean);\n                    denomSum += (f32(yi) - yMean)*(f32(yi) - yMean);\n                }\n            } else if (reduceDim == 1u) { // Average along Y\n                let cCoord = outX * xStride + outY * zStride;\n                for (var y: u32 = 0u; y < dimLength; y++) {\n                    let inputIndex = cCoord + (y * yStride);\n                    let xi: f32 = f32(firstData[inputIndex]);\n                    let yi: f32 = f32(secondData[inputIndex]);\n                    if (xi != xi || yi != yi){ //This only evaluates if a value is NaN\n                        continue;\n                    }\n                    numSum += (xi - xMean)*(f32(yi) - yMean);\n                    denomSum += (f32(yi) - yMean)*(f32(yi) - yMean);\n                }\n            } else { // Average along X\n                let cCoord = outX * yStride + outY * zStride;\n                for (var x: u32 = 0u; x < dimLength; x++) {\n                    let inputIndex = cCoord + (x * xStride);\n                    let xi: f32 = f32(firstData[inputIndex]);\n                    let yi: f32 = f32(secondData[inputIndex]);\n                    if (xi != xi || yi != yi){ //This only evaluates if a value is NaN\n                        continue;\n                    }\n                    numSum += (xi - xMean)*(f32(yi) - yMean);\n                    denomSum += (f32(yi) - yMean)*(f32(yi) - yMean);\n                }\n            }\n            \n            let outputIndex = outY * xSize + outX;\n            outputData[outputIndex] = ").concat(e,"(numSum/(denomSum+1e-4));\n        }\n    "),CovarianceReduction:"\n        ".concat(n,"\n        struct Params {\n        zStride: u32,\n        yStride: u32,\n        xStride: u32,\n        xSize: u32,\n        ySize: u32,\n        reduceDim: u32,\n        dimLength: u32,\n        };\n        @group(0) @binding(0) var<storage, read> firstData: array<").concat(e,">;\n        @group(0) @binding(1) var<storage, read> secondData: array<").concat(e,">;\n        @group(0) @binding(2) var<storage, read_write> outputData: array<").concat(e,">;\n        @group(0) @binding(3) var<uniform> params: Params;\n\n        @compute @workgroup_size(16, 16, 1)\n        fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n            let zStride = params.zStride;\n            let yStride = params.yStride;\n            let xStride = params.xStride;\n            let xSize = params.xSize;\n            let ySize = params.ySize;\n            let reduceDim = params.reduceDim;\n            let dimLength = params.dimLength;\n                            \n            let outX = global_id.y;\n            let outY = global_id.x;\n            \n            if (outX >= xSize || outY >= ySize) {\n                return;\n            }\n            var ySum: f32 = 0;\n            var xSum: f32 = 0.0;\n            var numSum: f32 = 0;\n\n        // Calculate base coordinate and stride for the dimension we're iterating over\n            var baseCoord: u32;\n            var iterStride: u32;\n\n            if (reduceDim == 0u) {\n                baseCoord = outX * xStride + outY * yStride;\n                iterStride = zStride;\n            } else if (reduceDim == 1u) {\n                baseCoord = outX * xStride + outY * zStride;\n                iterStride = yStride;\n            } else {\n                baseCoord = outX * yStride + outY * zStride;\n                iterStride = xStride;\n            }\n\n            // Single pass: calculate sums, means, and covariance\n            for (var i: u32 = 0u; i < dimLength; i++) {\n                let inputIndex = baseCoord + (i * iterStride);\n                let xi: f32 = f32(firstData[inputIndex]);\n                let yi: f32 = f32(secondData[inputIndex]);\n                if (xi != xi || yi != yi){ //This only evaluates if a value is NaN\n                    continue;\n                }\n                xSum += xi;\n                ySum += yi;\n            }\n\n            let xMean: f32 = xSum / f32(dimLength);\n            let yMean: f32 = ySum / f32(dimLength);\n\n            // Second pass for covariance calculation\n            for (var i: u32 = 0u; i < dimLength; i++) {\n                let inputIndex = baseCoord + (i * iterStride);\n                let xi: f32 = f32(firstData[inputIndex]);\n                let yi: f32 = f32(secondData[inputIndex]);\n                if (xi != xi || yi != yi){ //This only evaluates if a value is NaN\n                    continue;\n                }\n                numSum += (xi - xMean) * (yi - yMean);\n            }\n\n            let outputIndex = outY * xSize + outX;\n            outputData[outputIndex] = ").concat(e,"(numSum / (f32(dimLength) - 1));\n        }\n    "),CorrelationReduction:"\n        ".concat(n,"\n        struct Params {\n            zStride: u32,\n            yStride: u32,\n            xStride: u32,\n            xSize: u32,\n            ySize: u32,\n            reduceDim: u32,\n            dimLength: u32,\n        };\n        @group(0) @binding(0) var<storage, read> firstData: array<").concat(e,">;\n        @group(0) @binding(1) var<storage, read> secondData: array<").concat(e,">;\n        @group(0) @binding(2) var<storage, read_write> outputData: array<").concat(e,">;\n        @group(0) @binding(3) var<uniform> params: Params;\n\n        @compute @workgroup_size(16, 16, 1)\n        fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n            let zStride = params.zStride;\n            let yStride = params.yStride;\n            let xStride = params.xStride;\n            let xSize = params.xSize;\n            let ySize = params.ySize;\n            let reduceDim = params.reduceDim;\n            let dimLength = params.dimLength;\n                            \n            let outX = global_id.y;\n            let outY = global_id.x;\n            \n            if (outX >= xSize || outY >= ySize) {\n                return;\n            }\n\n            var xSum: f32 = 0.0;\n            var xxSum: f32 = 0.0;\n            var ySum: f32 = 0.0;\n            var yySum: f32 = 0.0;\n            var xySum: f32 = 0.0;\n            // Iterate along the dimension we're averaging\n            if (reduceDim == 0u) { // Average along Z\n                let cCoord = outX * xStride + outY * yStride;\n                for (var z: u32 = 0u; z < dimLength; z++) {\n                    let inputIndex = cCoord + (z * zStride);\n                    let xI = f32(firstData[inputIndex]);\n                    let yI = f32(secondData[inputIndex]);\n                    if (xI != xI || yI != yI){ //This only evaluates if a value is NaN\n                        continue;\n                    }\n                    xSum += xI;\n                    xxSum += xI * xI;\n                    ySum += yI;\n                    yySum += yI * yI;\n                    xySum += xI * yI;\n                }\n            } else if (reduceDim == 1u) { // Average along Y\n                let cCoord = outX * xStride + outY * zStride;\n                for (var y: u32 = 0u; y < dimLength; y++) {\n                    let inputIndex = cCoord + (y * yStride);\n                    let xI = f32(firstData[inputIndex]);\n                    let yI = f32(secondData[inputIndex]);\n                    if (xI != xI || yI != yI){ //This only evaluates if a value is NaN\n                        continue;\n                    }\n                    xSum += xI;\n                    xxSum += xI * xI;\n                    ySum += yI;\n                    yySum += yI * yI;\n                    xySum += xI * yI;\n                }\n            } else { // Average along X\n                let cCoord = outX * yStride + outY * zStride;\n                for (var x: u32 = 0u; x < dimLength; x++) {\n                    let inputIndex = cCoord + (x * xStride);\n                    let xI = f32(firstData[inputIndex]);\n                    let yI = f32(secondData[inputIndex]);\n                    if (xI != xI || yI != yI){ //This only evaluates if a value is NaN\n                        continue;\n                    }\n                    xSum += xI;\n                    xxSum += xI * xI;\n                    ySum += yI;\n                    yySum += yI * yI;\n                    xySum += xI * yI;\n                }\n            }\n\n            let N: f32 = f32(dimLength);\n            let meanX = xSum / N;\n            let meanY = ySum / N;\n            let varX = (xxSum / N) - (meanX * meanX);\n            let varY = (yySum / N) - (meanY * meanY);\n            let covXY = (xySum / N) - (meanX * meanY);\n            let sigmaX = sqrt(max(0.0, varX));\n            let sigmaY = sqrt(max(0.0, varY));\n            let epsilon = 1e-6;\n            let denominator = sigmaX * sigmaY + epsilon;\n            let correlation = covXY / denominator;\n\n            let outputIndex = outY * xSize + outX;\n            outputData[outputIndex] = ").concat(e,"(correlation);\n        }\n    "),MeanConvolution:"\n            ".concat(r,"    \n            var sum: f32 = 0.0;\n            var count: u32 = 0u;\n            for (var kx: i32 = xy_start; kx < xy_end; kx++) {\n                for (var ky: i32 = xy_start; ky < xy_end; ky++) {\n                    for (var kz: i32 = z_start; kz < z_end; kz++){\n                        let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                        if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                            in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                            in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                            let xOffset = kx * i32(xStride);\n                            let yOffset = ky * i32(yStride);\n                            let zOffset = kz * i32(zStride);\n                            let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                            sum += f32(inputData[u32(newIdx)]);\n                            count ++;\n                        }\n                    }\n                }\n            }\n            outputData[globalIdx] = ").concat(e,"(sum / f32(count));\n        }\n    "),MinConvolution:"\n        ".concat(r,"  \n            var minVal: f32 = 1e12;\n            var count: u32 = 0u;\n            for (var kx: i32 = xy_start; kx < xy_end; kx++) {\n                for (var ky: i32 = xy_start; ky < xy_end; ky++) {\n                    for (var kz: i32 = z_start; kz < z_end; kz++){\n                        let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                        if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                            in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                            in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                            let xOffset = kx * i32(xStride);\n                            let yOffset = ky * i32(yStride);\n                            let zOffset = kz * i32(zStride);\n                            let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                            let sampledVal = f32(inputData[u32(newIdx)]);\n                            if (sampledVal < minVal){\n                                minVal = sampledVal;\n                            }\n                        }\n                    }\n                }\n            }\n            \n            outputData[globalIdx] = ").concat(e,"(minVal);\n        }\n    "),MaxConvolution:"\n        ".concat(r,"  \n\n            var maxVal: f32 = -1e12;\n            var count: u32 = 0u;\n            for (var kx: i32 = xy_start; kx < xy_end; kx++) {\n                for (var ky: i32 = xy_start; ky < xy_end; ky++) {\n                    for (var kz: i32 = z_start; kz < z_end; kz++){\n                        let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                        if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                            in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                            in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                            let xOffset = kx * i32(xStride);\n                            let yOffset = ky * i32(yStride);\n                            let zOffset = kz * i32(zStride);\n                            let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                            let sampledVal = f32(inputData[u32(newIdx)]);\n                            if (sampledVal > maxVal){\n                                maxVal = sampledVal;\n                            }\n                        }\n                    }\n                }\n            }\n            outputData[globalIdx] = ").concat(e,"(maxVal);\n        }\n    "),StDevConvolution:"\n        ".concat(r,"  \n            var sum: f32 = 0.0;\n            var count: u32 = 0u;\n            for (var kx: i32 = xy_start; kx < xy_end; kx++) {\n                for (var ky: i32 = xy_start; ky < xy_end; ky++) {\n                    for (var kz: i32 = z_start; kz < z_end; kz++){\n                        let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                        if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                            in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                            in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                            let xOffset = kx * i32(xStride);\n                            let yOffset = ky * i32(yStride);\n                            let zOffset = kz * i32(zStride);\n                            let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                            let newVal = f32(inputData[u32(newIdx)]);\n                            if (newVal != newVal){ //This only evaluates if newVal is NaN\n                                continue;\n                            }\n                            sum += newVal;\n                            count ++;\n                        }\n                    }\n                }\n            }\n            \n            let mean: f32 = sum / f32(count);\n\n            var squaredDiffSum: f32 = 0.0;\n\n            for (var kx: i32 = xy_start; kx < xy_end; kx++) {\n                for (var ky: i32 = xy_start; ky < xy_end; ky++) {\n                    for (var kz: i32 = z_start; kz < z_end; kz++){\n                        let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n\n                        if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                            in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                            in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                            let xOffset = kx * i32(xStride);\n                            let yOffset = ky * i32(yStride);\n                            let zOffset = kz * i32(zStride);\n                            let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                            let newVal = f32(inputData[u32(newIdx)]);\n                            if (newVal != newVal){ //This only evaluates if newVal is NaN\n                                continue;\n                            }\n                            let diff: f32 = mean - newVal;\n                            squaredDiffSum += diff*diff;\n                        }\n                    }\n                }\n            }\n\n            let stDev: f32 = sqrt(squaredDiffSum / f32(count));\n\n            outputData[globalIdx] = ").concat(e,"(stDev);\n        }\n    "),CorrelationConvolution:"\n        ".concat(n,"\n        struct Params {\n            xStride: u32,\n            yStride: u32,\n            zStride: u32,\n            xSize: u32,\n            ySize: u32,\n            zSize: u32,\n            workGroups: vec3<u32>,\n            kernelSize: u32,\n            kernelDepth: u32\n        };\n        @group(0) @binding(0) var<storage, read> firstData: array<").concat(e,">;\n        @group(0) @binding(1) var<storage, read> secondData: array<").concat(e,">;\n        @group(0) @binding(2) var<storage, read_write> outputData: array<").concat(e,">;\n        @group(0) @binding(3) var<uniform> params: Params;\n\n        @compute @workgroup_size(4, 4, 4)\n        fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n            let zStride = params.zStride;\n            let yStride = params.yStride;\n            let xStride = params.xStride; \n            let xSize = params.xSize;\n            let ySize = params.ySize;\n            let zSize = params.zSize; \n            let workGroups = params.workGroups;\n            let kernelSize = params.kernelSize;\n            let kernelDepth = params.kernelDepth;\n\n            let outX = global_id.x; \n            let outY = global_id.y;\n            let outZ = global_id.z; \n\n            if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n                return;\n            }\n\n            let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n            let globalIdx = global_id.z * total_threads_per_slice + \n                            global_id.y * (workGroups.x * 4) + \n                            global_id.x;\n\n            let xy_radius: i32 = i32(kernelSize/2u);\n            let z_radius: i32 = i32(kernelDepth/2u);\n\n            var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n            var zOffset: i32 = 0;\n            if (xy_radius == 0){\n                xyOffset = -1;\n            }\n            if (z_radius == 0){\n                zOffset = -1;\n            }\n\n            var xSum: f32 = 0.0;\n            var xxSum: f32 = 0.0;\n            var ySum: f32 = 0.0;\n            var yySum: f32 = 0.0;\n            var xySum: f32 = 0.0;\n\n            var count: u32 = 0u;\n            for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n                for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                    for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                        let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                        if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                            in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                            in_coord.z >= 0 && in_coord.z < i32(zSize)) { //Ensure the sampled point is within 3D dataspace\n                            let xOffset = kx * i32(xStride);\n                            let yOffset = ky * i32(yStride);\n                            let zOffset = kz * i32(zStride);\n                            let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n\n                            let xI = f32(firstData[newIdx]);\n                            let yI = f32(secondData[newIdx]);\n                            if (xI != xI || yI != yI){ //This only evaluates if a value is NaN\n                                continue;\n                            }\n                            xSum += xI;\n                            xxSum += xI * xI;\n                            ySum += yI;\n                            yySum += yI * yI;\n                            xySum += xI * yI;\n                            count ++;\n                        }\n                    }\n                }\n            }\n\n            let N: f32 = f32(count);\n            let meanX = xSum / N;\n            let meanY = ySum / N;\n            let varX = (xxSum / N) - (meanX * meanX);\n            let varY = (yySum / N) - (meanY * meanY);\n            let covXY = (xySum / N) - (meanX * meanY);\n            let sigmaX = sqrt(max(0.0, varX));\n            let sigmaY = sqrt(max(0.0, varY));\n            let epsilon = 1e-6;\n            let denominator = sigmaX * sigmaY + epsilon;\n            let correlation = covXY / denominator;\n\n            outputData[globalIdx] = ").concat(e,"(correlation);\n        }\n    "),CovarianceConvolution:"\n        ".concat(n,"\n        struct Params {\n            xStride: u32,\n            yStride: u32,\n            zStride: u32,\n            xSize: u32,\n            ySize: u32,\n            zSize: u32,\n            workGroups: vec3<u32>,\n            kernelSize: u32,\n            kernelDepth: u32\n        };\n        @group(0) @binding(0) var<storage, read> firstData: array<").concat(e,">;\n        @group(0) @binding(1) var<storage, read> secondData: array<").concat(e,">;\n        @group(0) @binding(2) var<storage, read_write> outputData: array<").concat(e,">;\n        @group(0) @binding(3) var<uniform> params: Params;\n\n        @compute @workgroup_size(4, 4, 4)\n        fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n            let zStride = params.zStride;\n            let yStride = params.yStride;\n            let xStride = params.xStride; \n            let xSize = params.xSize;\n            let ySize = params.ySize;\n            let zSize = params.zSize; \n            let workGroups = params.workGroups;\n            let kernelSize = params.kernelSize;\n            let kernelDepth = params.kernelDepth;\n\n            let outX = global_id.x; \n            let outY = global_id.y;\n            let outZ = global_id.z; \n\n            if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n                return;\n            }\n\n            let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n            let globalIdx = global_id.z * total_threads_per_slice + \n                            global_id.y * (workGroups.x * 4) + \n                            global_id.x;\n\n            let xy_radius: i32 = i32(kernelSize/2u);\n            let z_radius: i32 = i32(kernelDepth/2u);\n\n            var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n            var zOffset: i32 = 0;\n            if (xy_radius == 0){\n                xyOffset = -1;\n            }\n            if (z_radius == 0){\n                zOffset = -1;\n            }\n\n            var xSum: f32 = 0.0;\n            var ySum: f32 = 0.0;\n            var numSum: f32 = 0.0;\n\n            var count: u32 = 0u;\n            for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n                for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                    for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                        let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                        if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                            in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                            in_coord.z >= 0 && in_coord.z < i32(zSize)) { \n                            let xOffset = kx * i32(xStride);\n                            let yOffset = ky * i32(yStride);\n                            let zOffset = kz * i32(zStride);\n                            let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                            let xI = f32(firstData[newIdx]);\n                            let yI = f32(secondData[newIdx]);\n                            if (xI != xI || yI != yI){ //This only evaluates if a value is NaN\n                                continue;\n                            }\n                            xSum += xI;    \n                            ySum += yI;\n                            count ++;\n                        }\n                    }\n                }\n            }\n\n            let N: f32 = f32(count);\n            let meanX = xSum / N;\n            let meanY = ySum / N;\n            \n            for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n                for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                    for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                        let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                        if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                            in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                            in_coord.z >= 0 && in_coord.z < i32(zSize)) { \n                            let xOffset = kx * i32(xStride);\n                            let yOffset = ky * i32(yStride);\n                            let zOffset = kz * i32(zStride);\n                            let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                            let xI = f32(firstData[newIdx]);\n                            let yI = f32(secondData[newIdx]);\n                            if (xI != xI || yI != yI){ //This only evaluates if a value is NaN\n                                continue;\n                            }\n                            numSum += (xI - meanX) * (yI - meanY);\n                            count ++;\n                        }\n                    }\n                }\n            }\n            outputData[globalIdx] = ").concat(e,"(numSum/(N-1));\n        }\n    "),TwoVarLinearSlopeConvolution:"\n        ".concat(n,"\n        struct Params {\n            xStride: u32,\n            yStride: u32,\n            zStride: u32,\n            xSize: u32,\n            ySize: u32,\n            zSize: u32,\n            workGroups: vec3<u32>,\n            kernelSize: u32,\n            kernelDepth: u32\n        };\n        @group(0) @binding(0) var<storage, read> firstData: array<").concat(e,">;\n        @group(0) @binding(1) var<storage, read> secondData: array<").concat(e,">;\n        @group(0) @binding(2) var<storage, read_write> outputData: array<").concat(e,">;\n        @group(0) @binding(3) var<uniform> params: Params;\n\n        @compute @workgroup_size(4, 4, 4)\n        fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n            let zStride = params.zStride;\n            let yStride = params.yStride;\n            let xStride = params.xStride; \n            let xSize = params.xSize;\n            let ySize = params.ySize;\n            let zSize = params.zSize; \n            let workGroups = params.workGroups;\n            let kernelSize = params.kernelSize;\n            let kernelDepth = params.kernelDepth;\n\n            let outX = global_id.x; \n            let outY = global_id.y;\n            let outZ = global_id.z; \n\n            if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n                return;\n            }\n\n            let total_threads_per_slice = workGroups.x * workGroups.y * 16;\n            let globalIdx = global_id.z * total_threads_per_slice + \n                            global_id.y * (workGroups.x * 4) + \n                            global_id.x;\n\n            let xy_radius: i32 = i32(kernelSize/2u);\n            let z_radius: i32 = i32(kernelDepth/2u);\n\n            var xyOffset: i32 = 0; //These offsets are for kernelsizes of 1. I didn't wanna rewrite everything else for that case\n            var zOffset: i32 = 0;\n            if (xy_radius == 0){\n                xyOffset = -1;\n            }\n            if (z_radius == 0){\n                zOffset = -1;\n            }\n\n            var xSum: f32 = 0.0;\n            var ySum: f32 = 0.0;\n\n            var count: u32 = 0u;\n            for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n                for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                    for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                        let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                        if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                            in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                            in_coord.z >= 0 && in_coord.z < i32(zSize)) { \n                            let xOffset = kx * i32(xStride);\n                            let yOffset = ky * i32(yStride);\n                            let zOffset = kz * i32(zStride);\n                            let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                            let xI = f32(firstData[newIdx]);\n                            let yI = f32(secondData[newIdx]);\n                            if (xI != xI || yI != yI){ //This only evaluates if a value is NaN\n                                continue;\n                            }\n                            xSum += xI;    \n                            ySum += yI;\n                            count ++;\n                        }\n                    }\n                }\n            }\n\n\n            let N: f32 = f32(count);\n            let meanX = xSum / N;\n            let meanY = ySum / N;\n            var numSum: f32 = 0;\n            var denomSum: f32 = 0;\n            \n            for (var kx: i32 = -xy_radius + xyOffset; kx < xy_radius; kx++) {\n                for (var ky: i32 = -xy_radius + xyOffset; ky < xy_radius; ky++) {\n                    for (var kz: i32 = -z_radius + zOffset; kz < z_radius; kz++){\n                        let in_coord = vec3<i32>(global_id) + vec3<i32>(kx, ky, kz);\n                        if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                            in_coord.y >= 0 && in_coord.y < i32(ySize) &&\n                            in_coord.z >= 0 && in_coord.z < i32(zSize)) { \n                            let xOffset = kx * i32(xStride);\n                            let yOffset = ky * i32(yStride);\n                            let zOffset = kz * i32(zStride);\n                            let newIdx = i32(globalIdx) + xOffset + yOffset + zOffset;\n                            let xI = f32(firstData[newIdx]);\n                            let yI = f32(secondData[newIdx]);\n                            if (xI != xI || yI != yI){ //This only evaluates if a value is NaN\n                                continue;\n                            }\n                            numSum += (xI - meanX)*(f32(yI) - meanY);\n                            denomSum += (f32(yI) - meanY)*(f32(yI) - meanY);\n                        }\n                    }\n                }\n            }\n            outputData[globalIdx] = ").concat(e,"(numSum/denomSum);\n        }\n    "),MeanConvolution2D:"\n            ".concat(i,"    \n            var sum: f32 = 0;\n            var count: u32 = 0u;\n            for (var kx: i32 = -xy_radius; kx <= xy_radius; kx++) {\n                for (var ky: i32 = -xy_radius; ky <= xy_radius; ky++) {\n                    let in_coord = vec2<i32>(i32(global_id.x), i32(global_id.y)) + vec2<i32>(kx, ky);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset;\n                        let newVal = f32(inputData[u32(newIdx)]);\n                        if (newVal != newVal){ //This only evaluates if newVal is NaN\n                            continue;\n                        }\n                        sum += newVal;\n                        count ++;\n                    }\n                }\n            }\n            outputData[globalIdx] = ").concat(e,"(sum / f32(count));\n        }\n    "),MinConvolution2D:"\n        ".concat(i,"   \n            var minVal: f32 = 1e12;\n            for (var kx: i32 = -xy_radius; kx <= xy_radius; kx++) {\n                for (var ky: i32 = -xy_radius; ky <= xy_radius; ky++) {\n                    let in_coord = vec2<i32>(i32(global_id.x), i32(global_id.y)) + vec2<i32>(kx, ky);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset;\n                        let newVal = f32(inputData[u32(newIdx)]);\n                        if (newVal != newVal){ //This only evaluates if newVal is NaN\n                            continue;\n                        }\n                        if (newVal < minVal){\n                            minVal = newVal;\n                        }\n                    }\n                }\n            }\n            outputData[globalIdx] = ").concat(e,"(minVal);\n        }\n    "),MaxConvolution2D:"\n        ".concat(i,"  \n            var maxVal: f32 = -1e12;\n            for (var kx: i32 = -xy_radius; kx <= xy_radius; kx++) {\n                for (var ky: i32 = -xy_radius; ky <= xy_radius; ky++) {\n                    let in_coord = vec2<i32>(i32(global_id.x), i32(global_id.y)) + vec2<i32>(kx, ky);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset;\n                        let newVal = f32(inputData[u32(newIdx)]);\n                        if (newVal != newVal){ //This only evaluates if newVal is NaN\n                            continue;\n                        }\n                        if (newVal > maxVal){\n                            maxVal = newVal;\n                        }\n                    }\n                }\n            }\n            outputData[globalIdx] = ").concat(e,"(maxVal);\n        }\n    "),StDevConvolution2D:"\n        ".concat(i,"  \n            var sum: f32 = 0.;\n            var count: u32 = 0u;\n            for (var kx: i32 = -xy_radius; kx <= xy_radius; kx++) {\n                for (var ky: i32 = -xy_radius; ky <= xy_radius; ky++) {\n                    let in_coord = vec2<i32>(i32(global_id.x), i32(global_id.y)) + vec2<i32>(kx, ky);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset;\n                        let newVal = f32(inputData[u32(newIdx)]);\n                        if (newVal != newVal){ //This only evaluates if newVal is NaN\n                            continue;\n                        }\n                        sum += newVal;\n                        count ++;\n                    }\n                }\n            }\n            \n            let mean: f32 = sum / f32(count);\n\n            var squaredDiffSum: f32 = 0.0;\n\n            for (var kx: i32 = -xy_radius; kx <= xy_radius; kx++) {\n                for (var ky: i32 = -xy_radius; ky <= xy_radius; ky++) {\n                    let in_coord = vec2<i32>(i32(global_id.x), i32(global_id.y)) + vec2<i32>(kx, ky);\n                    if (in_coord.x >= 0 && in_coord.x < i32(xSize) &&\n                        in_coord.y >= 0 && in_coord.y < i32(ySize)) { //Ensure the sampled point is within 3D dataspace\n                        let xOffset = kx * i32(xStride);\n                        let yOffset = ky * i32(yStride);\n                        let newIdx = i32(globalIdx) + xOffset + yOffset;\n                        let newVal = f32(inputData[u32(newIdx)]);\n                        if (newVal != newVal){ //This only evaluates if newVal is NaN\n                            continue;\n                        }\n                        let diff: f32 = mean - newVal;\n                        squaredDiffSum += diff*diff;\n                    }\n                }\n            }\n            let stDev: f32 = sqrt(squaredDiffSum / f32(count));\n\n            outputData[globalIdx] = ").concat(e,"(stDev);\n        }\n    "),CUMSUM3D:"\n        ".concat(n,"\n        struct Params {\n            xStride: u32,\n            yStride: u32,\n            zStride: u32,\n            xSize: u32,\n            ySize: u32,\n            zSize: u32,\n            reduceDim: u32,\n            reverse: u32,\n            workGroups: vec3<u32>,\n        };\n        @group(0) @binding(0) var<storage, read> inputData: array<").concat(e,">;\n        @group(0) @binding(1) var<storage, read_write> outputData: array<f32>;\n        @group(0) @binding(2) var<uniform> params: Params;\n\n        @compute @workgroup_size(4, 4, 4)\n        fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {\n            let zStride = params.zStride;\n            let yStride = params.yStride;\n            let xStride = params.xStride; \n            let xSize = params.xSize;\n            let ySize = params.ySize;\n            let zSize = params.zSize; \n            let reverse = params.reverse;\n            let workGroups = params.workGroups;\n            let reduceDim = params.reduceDim;\n\n            let outX = global_id.x; \n            let outY = global_id.y;\n            let outZ = global_id.z; \n\n            if (outX >= xSize || outY >= ySize || outZ >= zSize) {\n                return;\n            }\n            let totalSize: u32 = xSize * ySize * zSize;\n            var baseIdx = outZ * zStride + outY * yStride + outX * xStride;\n            var accum: f32 = 0;\n\n            // Iterate along the dimension we're averaging\n            if (reduceDim == 0u) { // CUMSUM along Z\n                if (reverse == u32(1)){\n                    baseIdx = (zSize - outZ - 1) * zStride + outY * yStride + outX * xStride;\n                }\n                for (var z: u32 = 0u; z < outZ; z++) {\n                    var newZ: u32 = z;\n                    if (reverse == u32(1)){\n                        newZ = zSize - z - 1;\n                    }\n                    let idx = newZ * zStride + outY * yStride + outX * xStride;\n                    accum += f32(inputData[idx]);\n                }\n\n            } else if (reduceDim == 1u) { // CUMSUM along Y\n                if (reverse == u32(1)){\n                    baseIdx = outZ * zStride + (ySize - outY - 1)* yStride + outX * xStride;\n                }\n                for (var y: u32 = 0u; y < outY; y++) {\n                    var newY: u32 = y;\n                    if (reverse == u32(1)){\n                        newY = ySize - y - 1;\n                    }\n                    let idx = outZ * zStride + newY * yStride + outX * xStride;\n                    accum += f32(inputData[idx]);\n                }\n            } else { // CUMSUM along X\n                if (reverse == u32(1)){\n                    baseIdx = outZ * zStride + outY* yStride + (xSize - outX - 1) * xStride;\n                }\n                for (var x: u32 = 0u; x < outX; x++) {\n                    var newX: u32 = x;\n                    if (reverse == u32(1)){\n                        newX = xSize - x - 1;\n                    }\n                    let idx = outZ * zStride + outY * yStride + newX * xStride;\n                    accum += f32(inputData[idx]);\n                }\n            }\n                outputData[baseIdx] = accum;\n        }\n    ")}},X={Mean:"MeanReduction",Min:"MinReduction",Max:"MaxReduction",StDev:"StDevReduction",LinearSlope:"LinearSlopeReduction",Mean3D:"MeanConvolution",Min3D:"MinConvolution",Max3D:"MaxConvolution",StDev3D:"StDevConvolution",Mean2D:"MeanConvolution2D",Min2D:"MinConvolution2D",Max2D:"MaxConvolution2D",StDev2D:"StDevConvolution2D",Correlation2D:"CorrelationReduction",Correlation3D:"CorrelationConvolution",TwoVarLinearSlope2D:"TwoVarLinearSlopeReduction",TwoVarLinearSlope3D:"TwoVarLinearSlopeConvolution",Covariance2D:"CovarianceReduction",Covariance3D:"CovarianceConvolution",CUMSUM3D:"CUMSUM3D"},G=async()=>{var e;let n=await (null==(e=navigator.gpu)?void 0:e.requestAdapter()),t=null==n?void 0:n.limits.maxBufferSize,r=null==n?void 0:n.limits.maxStorageBufferBindingSize,i=!!n&&n.features.has("shader-f16"),a=i?await (null==n?void 0:n.requestDevice({requiredFeatures:["shader-f16"],requiredLimits:{maxBufferSize:t,maxStorageBufferBindingSize:r}})):await (null==n?void 0:n.requestDevice({requiredLimits:{maxBufferSize:t,maxStorageBufferBindingSize:r}}));return a||Error("need a browser that supports WebGPU"),{device:a,hasF16:i}};async function Z(e,n,t,r){let{device:i,hasF16:a}=await G();if(!i)return void Error("need a browser that supports WebGPU");let{strides:o,shape:l}=n,[s,u,d]=o,c=l.filter((e,n)=>n!=t),f=l[t],m=c[0]*c[1],p=c.map(e=>Math.ceil(e/16)),x=F(a?"f16":"f32")[X[r]],v=i.createShaderModule({label:"reduction compute module",code:x}),S=i.createComputePipeline({label:"reduction compute pipeline",layout:"auto",compute:{module:v}}),h=(0,R.Wu)(x),y=(0,R.FE)(h.uniforms.params);y.set({zStride:s,yStride:u,xStride:d,xSize:c[1],ySize:c[0],reduceDim:t,dimLength:f});let g=i.createBuffer({label:"Input Buffer",size:e.byteLength*(a?1:2),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),z=i.createBuffer({label:"Output Buffer",size:m*(a?2:4),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),w=i.createBuffer({size:y.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),b=i.createBuffer({label:"Output Buffer",size:m*(a?2:4),usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});i.queue.writeBuffer(g,0,a?e:new Float32Array(e)),i.queue.writeBuffer(w,0,y.arrayBuffer);let _=i.createBindGroup({layout:S.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:g}},{binding:1,resource:{buffer:z}},{binding:2,resource:{buffer:w}}]}),I=i.createCommandEncoder({label:"reduction encoder"}),C=I.beginComputePass({label:"reduction compute pass"});C.setPipeline(S),C.setBindGroup(0,_),C.dispatchWorkgroups(p[0],p[1]),C.end(),I.copyBufferToBuffer(z,0,b,0,m*(a?2:4)),i.queue.submit([I.finish()]),await b.mapAsync(GPUMapMode.READ);let D=b.getMappedRange(),M=new Float16Array(a?D.slice():new Float32Array(D.slice()));return b.unmap(),M}async function W(e,n,t,r){let{device:i,hasF16:a}=await G();if(!i)return void Error("need a browser that supports WebGPU");let{kernelDepth:o,kernelSize:l}=r,{strides:s,shape:u}=n,d=u[0]*u[1]*u[2],[c,f,m]=s,p=u.map(e=>Math.ceil(e/4)),x=F(a?"f16":"f32")[X[t]],v=i.createShaderModule({label:"convolution compute module",code:x}),S=i.createComputePipeline({label:"convolution compute pipeline",layout:"auto",compute:{module:v}}),h=(0,R.Wu)(x),y=(0,R.FE)(h.uniforms.params);y.set({xStride:m,yStride:f,zStride:c,xSize:u[2],ySize:u[1],zSize:u[0],workGroups:[p[2],p[1],p[0]],kernelDepth:o,kernelSize:l});let g=i.createBuffer({label:"Input Buffer",size:e.byteLength*(a?1:2),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),z=i.createBuffer({label:"Output Buffer",size:d*(a?2:4),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),w=i.createBuffer({label:"Uniform Buffer",size:y.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),b=i.createBuffer({label:"Read Buffer",size:d*(a?2:4),usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});i.queue.writeBuffer(g,0,a?e:new Float32Array(e)),i.queue.writeBuffer(w,0,y.arrayBuffer);let _=i.createBindGroup({layout:S.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:g}},{binding:1,resource:{buffer:z}},{binding:2,resource:{buffer:w}}]}),I=i.createCommandEncoder({label:"convolution encoder"}),C=I.beginComputePass({label:"convolution compute pass"});C.setPipeline(S),C.setBindGroup(0,_),C.dispatchWorkgroups(p[2],p[1],p[0]),C.end(),I.copyBufferToBuffer(z,0,b,0,d*(a?2:4)),i.queue.submit([I.finish()]),await b.mapAsync(GPUMapMode.READ);let D=b.getMappedRange(),M=new Float16Array(a?D.slice():new Float32Array(D.slice()));return b.unmap(),M}async function q(e,n,t,r,i){let{device:a,hasF16:o}=await G();if(!a)return void Error("need a browser that supports WebGPU");let{strides:l,shape:s}=t,[u,d,c]=l,f=s.filter((e,n)=>n!=r),m=s[r],p=f[0]*f[1],x=f.map(e=>Math.ceil(e/16)),v=F(o?"f16":"f32")[X[i]],S=a.createShaderModule({label:"Multivariate2D compute module",code:v}),h=a.createComputePipeline({label:"Multivariate2D compute pipeline",layout:"auto",compute:{module:S}}),y=(0,R.Wu)(v),g=(0,R.FE)(y.uniforms.params);g.set({zStride:u,yStride:d,xStride:c,xSize:f[1],ySize:f[0],reduceDim:r,dimLength:m});let z=a.createBuffer({label:"First Input Buffer",size:e.byteLength*(o?1:2),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),w=a.createBuffer({label:"Second Input Buffer",size:n.byteLength*(o?1:2),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),b=a.createBuffer({label:"Output Buffer",size:p*(o?2:4),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),_=a.createBuffer({size:g.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),I=a.createBuffer({label:"Output Buffer",size:p*(o?2:4),usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});a.queue.writeBuffer(z,0,o?e:new Float32Array(e)),a.queue.writeBuffer(w,0,o?n:new Float32Array(n)),a.queue.writeBuffer(_,0,g.arrayBuffer);let C=a.createBindGroup({layout:h.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:z}},{binding:1,resource:{buffer:w}},{binding:2,resource:{buffer:b}},{binding:3,resource:{buffer:_}}]}),D=a.createCommandEncoder({label:"Multivariate2D encoder"}),M=D.beginComputePass({label:"Multivariate2D compute pass"});M.setPipeline(h),M.setBindGroup(0,C),M.dispatchWorkgroups(x[0],x[1]),M.end(),D.copyBufferToBuffer(b,0,I,0,p*(o?2:4)),a.queue.submit([D.finish()]),await I.mapAsync(GPUMapMode.READ);let k=I.getMappedRange(),P=new Float16Array(o?k.slice():new Float32Array(k.slice()));return I.unmap(),P}async function H(e,n,t,r,i){let{device:a,hasF16:o}=await G();if(!a)return void Error("need a browser that supports WebGPU");let{kernelDepth:l,kernelSize:s}=r,{strides:u,shape:d}=t,[c,f,m]=u,p=d[0]*d[1]*d[2],x=d.map(e=>Math.ceil(e/4)),v=F(o?"f16":"f32")[X[i]],S=a.createShaderModule({label:"Multivariate3D compute module",code:v}),h=a.createComputePipeline({label:"Multivariate3D compute pipeline",layout:"auto",compute:{module:S}}),y=(0,R.Wu)(v),g=(0,R.FE)(y.uniforms.params);g.set({xStride:m,yStride:f,zStride:c,xSize:d[2],ySize:d[1],zSize:d[0],workGroups:[x[2],x[1],x[0]],kernelDepth:l,kernelSize:s});let z=a.createBuffer({label:"First Input Buffer",size:e.byteLength*(o?1:2),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),w=a.createBuffer({label:"Second Input Buffer",size:n.byteLength*(o?1:2),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),b=a.createBuffer({label:"Output Buffer",size:p*(o?2:4),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),_=a.createBuffer({size:g.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),I=a.createBuffer({label:"Read Buffer",size:p*(o?2:4),usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});a.queue.writeBuffer(z,0,o?e:new Float32Array(e)),a.queue.writeBuffer(w,0,o?n:new Float32Array(n)),a.queue.writeBuffer(_,0,g.arrayBuffer);let C=a.createBindGroup({layout:h.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:z}},{binding:1,resource:{buffer:w}},{binding:2,resource:{buffer:b}},{binding:3,resource:{buffer:_}}]}),D=a.createCommandEncoder({label:"Multivariate3D encoder"}),M=D.beginComputePass({label:"Multivariate3D compute pass"});M.setPipeline(h),M.setBindGroup(0,C),M.dispatchWorkgroups(x[2],x[1],x[0]),M.end(),D.copyBufferToBuffer(b,0,I,0,p*(o?2:4)),a.queue.submit([D.finish()]),await I.mapAsync(GPUMapMode.READ);let k=I.getMappedRange(),P=new Float16Array(o?k.slice():new Float32Array(k.slice()));return I.unmap(),P}async function K(e,n,t,r){let{device:i,hasF16:a}=await G();if(!i)return void Error("need a browser that supports WebGPU");let{strides:o,shape:l}=n,s=l[0]*l[1]*l[2],[u,d,c]=o,f=l.map(e=>Math.ceil(e/4)),m=F(a?"f16":"f32").CUMSUM3D,p=i.createShaderModule({label:"cumsum3d compute module",code:m}),x=i.createComputePipeline({label:"cumsum3d compute pipeline",layout:"auto",compute:{module:p}}),v=(0,R.Wu)(m),S=(0,R.FE)(v.uniforms.params);S.set({xStride:c,yStride:d,zStride:u,xSize:l[2],ySize:l[1],zSize:l[0],reduceDim:t,reverse:r,workGroups:[f[2],f[1],f[0]]});let h=i.createBuffer({label:"Input Buffer",size:e.byteLength*(a?1:2),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),y=i.createBuffer({label:"Output Buffer",size:4*s,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),g=i.createBuffer({label:"Uniform Buffer",size:S.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),z=i.createBuffer({label:"Read Buffer",size:4*s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});i.queue.writeBuffer(h,0,a?e:new Float32Array(e)),i.queue.writeBuffer(g,0,S.arrayBuffer);let w=i.createBindGroup({layout:x.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:h}},{binding:1,resource:{buffer:y}},{binding:2,resource:{buffer:g}}]}),b=i.createCommandEncoder({label:"cumsum3d encoder"}),_=b.beginComputePass({label:"cumsum3d compute pass"});_.setPipeline(x),_.setBindGroup(0,w),_.dispatchWorkgroups(f[2],f[1],f[0]),_.end(),b.copyBufferToBuffer(y,0,z,0,4*s),i.queue.submit([b.finish()]),await z.mapAsync(GPUMapMode.READ);let I=new Float32Array(z.getMappedRange().slice());return z.unmap(),I}async function Q(e,n,t,r){let{device:i,hasF16:a}=await G();if(!i)return void Error("need a browser that supports WebGPU");let{strides:o,shape:l}=n,s=l[0]*l[1],[u,d]=[o[0],o[1]],c=[Math.ceil(l[1]/16),Math.ceil(l[0]/16)],f=F(a?"f16":"f32")[X[t]],m=i.createShaderModule({label:"convolution2d compute module",code:f}),p=i.createComputePipeline({label:"convolution2d compute pipeline",layout:"auto",compute:{module:m}}),x=(0,R.Wu)(f),v=(0,R.FE)(x.uniforms.params);v.set({xStride:d,yStride:u,xSize:l[1],ySize:l[0],kernelSize:r});let S=i.createBuffer({label:"Input Buffer",size:e.byteLength*(a?1:2),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),h=i.createBuffer({label:"Output Buffer",size:s*(a?2:4),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),y=i.createBuffer({label:"Uniform Buffer",size:v.arrayBuffer.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),g=i.createBuffer({label:"Read Buffer",size:s*(a?2:4),usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});i.queue.writeBuffer(S,0,a?e:new Float32Array(e)),i.queue.writeBuffer(y,0,v.arrayBuffer);let z=i.createBindGroup({layout:p.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:S}},{binding:1,resource:{buffer:h}},{binding:2,resource:{buffer:y}}]}),w=i.createCommandEncoder({label:"convolution2d encoder"}),b=w.beginComputePass({label:"convolution2d compute pass"});b.setPipeline(p),b.setBindGroup(0,z),b.dispatchWorkgroups(c[0],c[1],1),b.end(),w.copyBufferToBuffer(h,0,g,0,s*(a?2:4)),i.queue.submit([w.finish()]),await g.mapAsync(GPUMapMode.READ);let _=g.getMappedRange(),I=new Float16Array(a?_.slice():new Float32Array(_.slice()));return g.unmap(),I}let $=e=>{let{setTexture:n,ZarrDS:t}=e,{strides:r,dataShape:i,valueScales:a,isFlat:o,setIsFlat:s,setDownloading:c,setShowLoading:f,setValueScales:p}=(0,u.on)((0,d.k)(e=>({strides:e.strides,dataShape:e.dataShape,valueScales:e.valueScales,isFlat:e.isFlat,setIsFlat:e.setIsFlat,setDownloading:e.setDownloading,setShowLoading:e.setShowLoading,setValueScales:e.setValueScales}))),x=(0,u.Ws)(e=>e.setPlotType),{axis:v,execute:S,operation:h,useTwo:y,variable2:g,valueScalesOrig:z,kernelOperation:w,kernelSize:b,kernelDepth:_,reverseDirection:I,analysisStore:C,analysisMode:D,analysisArray:M,analysisDim:k,setValueScalesOrig:P,setAnalysisArray:T,setAnalysisMode:O,setOperation:B}=(0,u.r2)((0,d.k)(e=>({axis:e.axis,execute:e.execute,operation:e.operation,useTwo:e.useTwo,variable2:e.variable2,valueScalesOrig:e.valueScalesOrig,kernelOperation:e.kernelOperation,kernelSize:e.kernelSize,kernelDepth:e.kernelDepth,reverseDirection:e.reverseDirection,analysisStore:e.analysisStore,analysisMode:e.analysisMode,analysisArray:e.analysisArray,analysisDim:e.analysisDim,setValueScalesOrig:e.setValueScalesOrig,setAnalysisArray:e.setAnalysisArray,setAnalysisMode:e.setAnalysisMode,setOperation:e.setOperation}))),{zSlice:A,ySlice:N,xSlice:j}=(0,u.SZ)((0,d.k)(e=>({zSlice:e.zSlice,ySlice:e.ySlice,xSlice:e.xSlice})));return(0,l.useEffect)(()=>{let e=(0,m.Td)(C);h&&!(e.length<=1)&&(async()=>{let l,u,d;f(!0);let S="Convolution"==h?w:h,C=!o,B=null;if(y){c(!0);let e=await t.GetArray(g,{zSlice:A,ySlice:N,xSlice:j});if(B=null==e?void 0:e.data,c(!1),!B){console.error("Failed to fetch data for the second variable."),f(!1);return}}let E=D?M:e,L={shape:i,strides:r},U={kernelDepth:_,kernelSize:b};switch(S){case"Mean":case"Min":case"Max":case"StDev":case"LinearSlope":l=await Z(E,L,v,S),C=!1;break;case"Mean3D":case"Min3D":case"Max3D":case"StDev3D":l=await W(E,L,S,U),C=!0;break;case"Mean2D":case"Min2D":case"Max2D":case"StDev2D":let V=i.length>2?i.filter((e,n)=>n!==k):i,R=r.length>2?[V[1],1]:r;l=await Q(E,{shape:V,strides:R},S,b),C=!1;break;case"Correlation2D":case"TwoVarLinearSlope2D":case"Covariance2D":l=await q(E,B,L,v,S),C=!1;break;case"Correlation3D":case"TwoVarLinearSlope3D":case"Covariance3D":l=await H(E,B,L,U,S),C=!0;break;case"CUMSUM3D":l=await K(E,L,v,I),C=!0;break;default:console.warn("Unknown operation: ".concat(S)),f(!1);return}if(!l)return f(!1);let F=["StDev","LinearSlope","Covariance","CUMSUM3D"].some(e=>S.includes(e)),X=S.includes("Correlation");F?(z||P(a),[u,d]=(0,m.Qt)(l)):X?(z||P(a),[u,d]=[-1,1]):{minVal:u,maxVal:d}=a,p({minVal:u,maxVal:d});let G=i.length>2?i.filter((e,n)=>n!==v):i,$=new Uint8Array(l.map(e=>{let n=(e-u)/(d-u);return isNaN(n)?255:254*n})),J=(0,Y.qw)(C?i:G,$);T(l),J&&n(J),s(!C),x(C?"volume":"flat"),O(!0),f(!1)})()},[S]),null},J=e=>{let{show:n}=e,{valueScales:t,variable:a,metadata:o}=(0,u.on)((0,d.k)(e=>({valueScales:e.valueScales,variable:e.variable,metadata:e.metadata}))),{exportImg:s,enableExport:f,includeBackground:m,includeColorbar:p,doubleSize:x,useCustomRes:v,getCbarLoc:S,getCbarNum:h,getCustomRes:g,setHideAxisControls:z,setHideAxis:w}=(0,u.qi)((0,d.k)(e=>({exportImg:e.exportImg,enableExport:e.enableExport,includeBackground:e.includeBackground,includeColorbar:e.includeColorbar,doubleSize:e.doubleSize,useCustomRes:e.useCustomRes,getCbarLoc:e.getCbarLoc,getCbarNum:e.getCbarNum,getCustomRes:e.getCustomRes,setHideAxisControls:e.setHideAxisControls,setHideAxis:e.setHideAxis}))),{gl:b,scene:_,camera:I}=(0,c.C)(),C=(0,y.$m)("--text-plot"),D=(0,y.$m)("--background");return(0,l.useEffect)(()=>{if(!n||!f)return;let e=b.domElement.width,r=b.domElement.height,l=g(),s=v?l[0]:x?2*e:e,u=v?l[1]:x?2*r:r,d=document.createElement("canvas"),c=d.getContext("2d");if(!c)return;if(d.width=s,d.height=u,m&&(c.fillStyle=D,c.fillRect(0,0,d.width,d.height)),v){let e,n=b.getSize(new i.I9Y);if(I instanceof i.ubm)e={aspect:I.aspect},I.aspect=s/u,I.updateProjectionMatrix();else if(I instanceof i.qUd){e={left:I.left,right:I.right,top:I.top,bottom:I.bottom};let n=s/u;if(n>(I.right-I.left)/(I.top-I.bottom)){let e=(I.top-I.bottom)*n,t=(I.left+I.right)/2;I.left=t-e/2,I.right=t+e/2}else{let e=(I.right-I.left)/n,t=(I.top+I.bottom)/2;I.top=t+e/2,I.bottom=t-e/2}I.updateProjectionMatrix()}b.setSize(s,u),b.render(_,I),c.drawImage(b.domElement,0,0,s,u),I instanceof i.ubm?I.aspect=e.aspect:I instanceof i.qUd&&(I.left=e.left,I.right=e.right,I.top=e.top,I.bottom=e.bottom),b.setSize(n.x,n.y),I.updateProjectionMatrix(),w(!1),z(!1),b.render(_,I)}else b.render(_,I),c.drawImage(b.domElement,0,0,s,u),b.render(_,I),w(!1),z(!1);c.fillStyle=C,c.font="".concat(x?72:36,'px "Segoe UI"'),c.fillText(a,x?40:20,x?100:50);let y=x?52:26;if(p){let n=document.getElementById("colorbar-canvas"),r=S(),i=x?Math.min(1024,.8*e):Math.min(512,.8*e),a=x?48:24,l=Math.round(s/2-i/2),d="top"===r?x?140:70:x?u-140:u-70,f="right"===r||"left"===r;if(f){let e=i;i=a,d=Math.round(u/2-(a=e)/2),l="right"===r?x?s-140:s-70:x?140:70}if(n instanceof HTMLCanvasElement)if(f){c.save();let e=l+i/2,t=d+a/2;c.translate(e,t),c.rotate(-Math.PI/2);let r=x?1024:512,o=x?48:24;c.drawImage(n,-r/2,-o/2,r,o),c.restore()}else c.drawImage(n,l,d,i,a);let m=h(),p=t.maxVal-t.minVal,v=1/(m-1),g=f?1/(m-1)*a:1/(m-1)*i;if(c.font="".concat(x?36:18,'px "Segoe UI"'),f){c.textBaseline="middle",c.textAlign="left"==r?"left":"right";for(let e=0;e<m;e++)"left"==r?c.fillText(String((t.minVal+e*v*p).toFixed(2)),l+i+6,d+a-e*g):c.fillText(String((t.minVal+e*v*p).toFixed(2)),l-6,d+a-e*g)}else{c.textBaseline="top",c.textAlign="center";for(let e=0;e<m;e++)c.fillText(String((t.minVal+e*v*p).toFixed(2)),l+e*g,d+a+6)}c.fillStyle=C,c.font="".concat(y,'px "Segoe UI" bold'),c.textAlign="center",c.fillText(null==o?void 0:o.units,l+i/2,d-y-4)}c.fillStyle="#888888",c.font="".concat(x?40:20,'px "Segoe UI", serif '),c.textAlign="left",c.textBaseline="bottom",c.fillText("browzarr.io",x?20:10,x?u-20:u-10),d.toBlob(e=>{if(!e)return;let n=URL.createObjectURL(e),t=document.createElement("a");t.download="browzarr-plot.png",t.href=n,t.click(),URL.revokeObjectURL(n)},"image/png")},[s]),(0,r.jsx)(r.Fragment,{})},ee=e=>{let{isFlat:n}=e,{resetCamera:t}=(0,u.Ws)((0,d.k)(e=>({resetCamera:e.resetCamera}))),a=(0,l.useRef)(null),o=(0,l.useRef)(!1);return(0,l.useEffect)(()=>{if(!o.current){o.current=!0;return}if(a.current){let e,t=a.current,r=performance.now(),o=t.object.position.clone(),l=t.position0.clone(),s=t.target.clone(),u=t.target0.clone(),d=t.object.zoom,f=a=>{(0,c.m)();let m=Math.min((a-r)/1e3,1);t.object.position.lerpVectors(o,l,m),t.target.lerpVectors(s,u,m),n&&(t.object.zoom=i.cj9.lerp(d,1e3,m),t.object.updateProjectionMatrix(),t.update()),m<1&&(e=requestAnimationFrame(f))};return e=requestAnimationFrame(f),()=>cancelAnimationFrame(e)}},[t]),(0,r.jsxs)(r.Fragment,{children:[n&&(0,r.jsx)(L.N,{ref:a,enableRotate:!1,enablePan:!0,maxDistance:50,minZoom:50,maxZoom:3e3}),!n&&(0,r.jsx)(L.N,{ref:a,enableRotate:!0,enablePan:!0,maxDistance:50})]})},en=e=>{let{ZarrDS:n}=e,{setShape:t,setDataShape:a,setFlipY:o,setValueScales:s,setMetadata:c,setDimArrays:p,setDimNames:v,setDimUnits:g,setPlotOn:z,setShowLoading:w}=(0,u.on)((0,d.k)(e=>({setShape:e.setShape,setDataShape:e.setDataShape,setFlipY:e.setFlipY,setValueScales:e.setValueScales,setMetadata:e.setMetadata,setDimArrays:e.setDimArrays,setDimNames:e.setDimNames,setDimUnits:e.setDimUnits,setPlotOn:e.setPlotOn,setShowLoading:e.setShowLoading}))),{colormap:b,variable:_,isFlat:I,metadata:C,valueScales:D,is4D:M,setIsFlat:k}=(0,u.on)((0,d.k)(e=>({colormap:e.colormap,variable:e.variable,isFlat:e.isFlat,metadata:e.metadata,valueScales:e.valueScales,is4D:e.is4D,setIsFlat:e.setIsFlat}))),{plotType:P,setPlotType:T}=(0,u.Ws)((0,d.k)(e=>({plotType:e.plotType,setPlotType:e.setPlotType}))),{zSlice:O,ySlice:B,xSlice:A,reFetch:N}=(0,u.SZ)((0,d.k)(e=>({zSlice:e.zSlice,ySlice:e.ySlice,xSlice:e.xSlice,reFetch:e.reFetch}))),{analysisMode:j}=(0,u.r2)((0,d.k)(e=>({analysisMode:e.analysisMode}))),E=(0,l.useRef)([0,0]),L=(0,l.useRef)(0),[U,R]=(0,l.useState)(!1),[F,X]=(0,l.useState)([0,0]),[G,Z]=(0,l.useState)(null),[W,q]=(0,l.useState)(!0);(0,l.useEffect)(()=>{if("Default"!=_){w(!0),q(!1);try{G&&G.forEach(e=>{e.dispose(),e.source.data=null}),n.GetArray(_,{xSlice:A,ySlice:B,zSlice:O}).then(e=>{let[n,r]=(0,Y.oW)({data:e.data,shape:e.shape});if(Z(n),e.scalingFactor){let{maxVal:n,minVal:t}=r;s({maxVal:n*Math.pow(10,e.scalingFactor),minVal:t*Math.pow(10,e.scalingFactor)})}else s(r);let o=e.shape.length;2==o?(k(!0),T("sphere")):k(!1);let l=e.shape[o-2]/e.shape[o-1]*2;t(new i.Pq0(2,l,2)),a(e.shape),q(!0),z(!0),w(!1)})}catch(e){w(!1);return}n.GetAttributes(_).then(e=>{c(e);let[t,r,i]=n.GetDimArrays();M&&(t=t.slice(1),r=r.slice(1),i=i.slice(1)),p(t),v(i),t.length>2?t[1][1]<t[1][0]?o(!0):o(!1):t[0][1]<t[0][0]?o(!0):o(!1),g(r),(0,m.QB)(r,t)})}else c(null)},[N]),(0,l.useEffect)(()=>{if(!j&&W){let{dataShape:e}=u.on.getState();k(2==e.length);let n=(0,Y.qw)(e);n&&Z(n)}},[j]);let H=(0,l.useMemo)(()=>({setLoc:X,setShowInfo:R,coords:E,val:L}),[]);(0,l.useEffect)(()=>()=>{G&&G.forEach(e=>{e.dispose()})},[G]);let K=(0,l.useMemo)(()=>y.Fp,[]);return(0,r.jsxs)("div",{className:"main-canvas",style:{width:"100vw"},children:[(0,r.jsx)($,{setTexture:Z,ZarrDS:n}),W&&(0,r.jsx)(y.PL,{units:null==C?void 0:C.units,valueScales:D}),(0,r.jsx)(K,{}),(I||"flat"==P)&&(0,r.jsx)(V,{loc:F,show:U,info:[...E.current,L.current]}),(!I&&"flat"!=P||I&&"sphere"===P)&&(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(h.Hl,{id:"main-canvas",camera:{position:I?[0,0,5]:[-4.5,3,4.5],fov:50},frameloop:"demand",gl:{preserveDrawingBuffer:!0},children:[(0,r.jsx)(ed,{}),(0,r.jsx)(J,{show:W}),W&&(0,r.jsx)(eh,{}),"volume"==P&&W&&(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(f,{volTexture:G}),(0,r.jsx)(x,{ZarrDS:n})]}),"point-cloud"==P&&W&&(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(S,{textures:{texture:G,colormap:b},ZarrDS:n})}),"sphere"==P&&W&&(0,r.jsx)(eo,{textures:G,ZarrDS:n}),(0,r.jsx)(ee,{isFlat:!1})]})}),(I||!I&&"flat"==P)&&(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(h.Hl,{id:"main-canvas",camera:{position:[0,0,5],zoom:1e3},orthographic:!0,frameloop:"demand",children:[(0,r.jsx)(J,{show:W}),(0,r.jsx)(ed,{}),W&&(0,r.jsx)(eh,{}),(0,r.jsx)(ei,{textures:G,infoSetters:H}),(0,r.jsx)(ee,{isFlat:!0})]})})]})};function et(e){let{points:n,tsID:t,pointSetters:a,scalers:o}=e,s=(0,l.useRef)(null),f=n.length,m=(0,l.useRef)(null),[p,x]=(0,l.useState)(!1),{setPointID:v,setPointLoc:S,setShowPointInfo:h}=a,[y,g]=(0,l.useState)(1),{pointColor:z,pointSize:w,useCustomPointColor:b}=(0,u.Ws)((0,d.k)(e=>({pointColor:e.pointColor,pointSize:e.linePointSize,showPoints:e.showPoints,useCustomPointColor:e.useCustomPointColor}))),{xScale:_,yScale:I}=o,{timeSeries:C}=(0,u.on)((0,d.k)(e=>({timeSeries:e.timeSeries}))),[D,M,k]=C[t].color,P=(0,l.useMemo)(()=>new i.Gu$(w),[w]),T=(0,l.useMemo)(()=>new i.V9B({color:new i.Q1f().setRGB(D/300,M/300,k/300).convertSRGBToLinear()}),[z,b,C]);return(0,l.useEffect)(()=>{if(s.current){let e=new i.B69;for(let t=0;t<f;t++){let r=n[t].toArray();e.position.set(r[0]*(_/2),r[1]*I,1),e.scale.set(w/y,w/y,w/y),e.updateMatrix(),s.current.setMatrixAt(t,e.matrix)}s.current.instanceMatrix.needsUpdate=!0}},[n,y,P,T,_,I,w]),(0,c.D)(e=>{let{camera:n}=e;n.zoom!==y&&g(n.zoom)}),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("mesh",{position:[0,0,5],onPointerEnter:function(e){if(s.current){let n=e.instanceId,r=new i.B69,a=new i.kn4,o=new i.Pq0;n!=m.current&&m.current&&(s.current.getMatrixAt(m.current,a),o.setFromMatrixPosition(a),r.scale.set(w/y,w/y,w/y),r.position.copy(o),r.updateMatrix(),s.current.setMatrixAt(m.current,r.matrix)),m.current=n,s.current.getMatrixAt(n,a),o.setFromMatrixPosition(a),r.scale.set(3*w/y,3*w/y,3/y),r.position.copy(o),r.updateMatrix(),s.current.setMatrixAt(e.instanceId,r.matrix),s.current.instanceMatrix.needsUpdate=!0,x(e=>!e),v([t,e.instanceId]),S([e.clientX,e.clientY]),h(!0)}},onPointerLeave:function(e){let n=e.instanceId;if(s.current){let e=new i.B69,t=new i.kn4,r=new i.Pq0;m.current&&(s.current.getMatrixAt(n,t),r.setFromMatrixPosition(t),e.scale.set(w/y,w/y,w/y),e.position.copy(r),e.updateMatrix(),s.current.setMatrixAt(n,e.matrix),s.current.instanceMatrix.needsUpdate=!0,x(e=>!e),h(n!=m.current))}},children:(0,r.jsx)("instancedMesh",{ref:s,args:[P,T,f]})})})}let er=e=>{let{height:n,xScale:t,yScale:a,pointSetters:o}=e,{valueScales:s,timeSeries:f,colormap:m}=(0,u.on)((0,d.k)(e=>({valueScales:e.valueScales,timeSeries:e.timeSeries,colormap:e.colormap}))),{lineWidth:p,useLineColor:x,lineColor:v,showPoints:S,lineResolution:h,useCustomColor:y}=(0,u.Ws)((0,d.k)(e=>({lineWidth:e.lineWidth,linePointSize:e.linePointSize,showPoints:e.showPoints,useLineColor:e.useLineColor,lineColor:e.lineColor,lineResolution:e.lineResolution,useCustomColor:e.useCustomColor}))),{camera:g}=(0,c.C)(),{maxVal:z,minVal:w}=s,b=(0,l.useMemo)(()=>{let e={};return Object.keys(f).reverse().map((n,r)=>{let[o,l,s]=f[n].color;e[n]=new i.BKk({glslVersion:i.Wdf,uniforms:{cmap:{value:m},xScale:{value:t},yScale:{value:a},aspect:{value:window.innerWidth/window.innerHeight},thickness:{value:p},miter:{value:1},useLineColor:{value:y},useMapColors:{value:x},lineColor:{value:new i.Q1f().setRGB(o/255,l/255,s/255)},userColor:{value:new i.Q1f(v)},zoom:{value:g.zoom}},vertexShader:"attribute float direction; \nattribute vec3 next;\nattribute vec3 previous;\nattribute float normed;\n\nvarying float vNormed;\n\nuniform float zoom;\nuniform float thickness;\nuniform int miter;\nuniform float xScale; \nuniform float yScale;\n\nfloat getOrthographicZoom(mat4 projectionMatrix, float referenceWidth) {\n    float m0 = projectionMatrix[0][0]; // Scaling factor: 2/(right-left)\n    float viewWidth = 2.0 / m0; // Viewable width\n    return referenceWidth / viewWidth; // Zoom level\n}\n\nvoid main() {\n    vec3 pos = position;\n    vec3 prev = previous;\n    vec3 nex = next;\n    pos.x *= xScale/2.0;\n    pos.y *= yScale;\n    prev.x *= xScale/2.0;\n    prev.y *= yScale;\n    nex.x *= xScale/2.0;\n    nex.y *= yScale;\n\n    // Transform positions to view space (before projection)\n    float zoom = getOrthographicZoom(projectionMatrix, 2.);\n    float zoomLevel = 2. / projectionMatrix[0][0]; // Extract vertical scale\n    vec4 currentView = modelViewMatrix * vec4(pos, 1.0);\n    vec4 prevView = modelViewMatrix * vec4(prev, 1.0);\n    vec4 nextView = modelViewMatrix * vec4(nex, 1.0);\n\n    // Compute directions in view space\n    vec3 dir = vec3(0.0);\n    if (currentView.xyz == prevView.xyz) {\n        dir = normalize(nextView.xyz - currentView.xyz);\n    } else if (currentView.xyz == nextView.xyz) {\n        dir = normalize(currentView.xyz - prevView.xyz);\n    } else {\n        vec3 dirA = normalize(currentView.xyz - prevView.xyz);\n        if (miter == 1) {\n            vec3 dirB = normalize(nextView.xyz - currentView.xyz);\n            vec3 tangent = normalize(dirA + dirB);\n            vec3 perp = vec3(-dirA.y, dirA.x, 0.0); // Perpendicular in view space\n            vec3 miterVec = vec3(-tangent.y, tangent.x, 0.0);\n            float miterLen = dot(miterVec, perp);\n            miterLen = max(miterLen, 0.5); // Avoid division by zero\n            dir = tangent;\n        } else {\n            dir = dirA;\n        }\n    }\n\n    // Compute normal in view space\n    vec3 normal = vec3(-dir.y, dir.x, 0.0); // Perpendicular to direction\n    float len = thickness / zoom/500.; // Thickness in world/view space units\n    normal *= 0.5 * len * direction; // Apply thickness and direction\n\n    // Apply offset in view space\n    currentView.xyz += normal;\n\n    // Project to clip space\n    gl_Position = projectionMatrix * currentView;\n\n\n    vNormed = normed;\n    gl_PointSize = 1.0;\n}",fragmentShader:"\n                out vec4 Color;\n                uniform sampler2D cmap;\n                uniform bool useLineColor;\n                uniform bool useMapColors;\n                uniform vec3 lineColor;\n                uniform vec3 userColor;\n                varying float vNormed;\n\n                void main() {\n                    vec4 texColor = texture(cmap, vec2(vNormed, 0.1));\n                    texColor.a = 1.;\n                    Color = useLineColor ? vec4(userColor, 1.0) : useMapColors ? texColor : vec4(lineColor, 1.0) ;\n                }\n                ",depthWrite:!1})}),e},[f]);(0,l.useEffect)(()=>{if(Object.values(b))for(let e of Object.values(b)){let n=e.uniforms;n.cmap.value=m,n.xScale.value=t,n.yScale.value=a,n.aspect.value=window.innerWidth/window.innerHeight,n.thickness.value=p,n.miter.value=1,n.useLineColor.value=y,n.useMapColors.value=x,n.userColor.value=new i.Q1f(v),n.zoom.value=g.zoom,(0,c.m)()}},[m,p,t,a,window.innerWidth,window.innerHeight,x,v,g.zoom,y]);let _=(0,l.useMemo)(()=>window.innerWidth,[window.innerWidth]),I=(0,l.useMemo)(()=>window.innerHeight-n,[window.innerWidth,n]),[C,D]=(0,l.useState)({}),M=(0,l.useMemo)(()=>{let e={},n={};return Object.keys(f).map((t,r)=>{let a=f[t].data,o=a.map(e=>(e-w)/(z-w)),l=function(e,n,t){let r=(n-e)/(t-1);return Array.from({length:t},(n,t)=>e+r*t)}(-_,_,a.length),s=o.map((e,n)=>new i.Pq0(l[n],(e-.5)*I,5));n[t]=s;let u=new i.B6O(s).getPoints(s.length*h-1),d=[];for(let e=0;e<u.length;e++){let n=e/(u.length-1)*(o.length-1),t=Math.floor(n),r=Math.min(o.length-1,Math.ceil(n)),i=n-t;d.push(o[t]*(1-i)+o[r]*i)}let c=u.length,m=[],p=[],x=[],v=[],S=[],y=[];for(let e=0;e<c;e++){let n=u[e],t=u[Math.max(0,e-1)],r=u[Math.min(c-1,e+1)];m.push(...n,...n),p.push(1,-1),x.push(...t,...t),v.push(...r,...r),S.push(d[e],d[e])}for(let e=0;e<c-1;e++){let n=2*e,t=n+1,r=n+2,i=n+3;y.push(n,t,r),y.push(t,i,r)}let g=new i.LoY;g.setAttribute("position",new i.qtW(m,3)),g.setAttribute("direction",new i.qtW(p,1)),g.setAttribute("previous",new i.qtW(x,3)),g.setAttribute("next",new i.qtW(v,3)),g.setAttribute("normed",new i.qtW(S,1)),g.setIndex(new i.A$4(y,1)),e[t]=g}),D(n),e},[f,h]);return(0,l.useEffect)(()=>{(0,c.m)()},[S]),(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)("group",{children:[Object.keys(f).map((e,n)=>(0,r.jsx)("mesh",{geometry:M[e],material:b[e]},"lineMesh_".concat(n))),S&&Object.keys(f).map((e,n)=>(0,r.jsx)(et,{points:C[e],tsID:e,pointSetters:o,scalers:{xScale:t,yScale:a}},"plotPoints_".concat(n)))]})})},ei=e=>{let{textures:n,infoSetters:t}=e,{setLoc:a,setShowInfo:o,val:s,coords:c}=t,{flipY:f,colormap:p,valueScales:x,dimArrays:v,isFlat:S,dataShape:h,textureArrayDepths:y}=(0,u.on)((0,d.k)(e=>({flipY:e.flipY,colormap:e.colormap,valueScales:e.valueScales,dimArrays:e.dimArrays,isFlat:e.isFlat,dataShape:e.dataShape,textureArrayDepths:e.textureArrayDepths}))),{cScale:g,cOffset:z,animProg:w,nanTransparency:b,nanColor:_}=(0,u.Ws)((0,d.k)(e=>({cOffset:e.cOffset,cScale:e.cScale,resetAnim:e.resetAnim,animate:e.animate,animProg:e.animProg,nanTransparency:e.nanTransparency,nanColor:e.nanColor}))),{axis:I,analysisMode:C,analysisArray:D}=(0,u.r2)((0,d.k)(e=>({axis:e.axis,analysisMode:e.analysisMode,analysisArray:e.analysisArray}))),{zSlice:M,ySlice:k,xSlice:P}=(0,u.SZ)((0,d.k)(e=>({zSlice:e.zSlice,ySlice:e.ySlice,xSlice:e.xSlice}))),T=[v[0].slice(M[0],M[1]?M[1]:void 0),v[1].slice(k[0],k[1]?k[1]:void 0),v.length>2?v[2].slice(P[0],P[1]?P[1]:void 0):[]],O=(0,l.useMemo)(()=>{if(2==h.length)return h[0]/h[1];if(!C)return h[1]/h[2];{let e=h.filter((e,n)=>n!=I);return e[0]/e[1]}},[I,C]),B=(0,l.useMemo)(()=>new i.bdM(2,2*O),[O]),A=(0,l.useRef)(!1),N=(0,l.useRef)(new i.I9Y(0,0)),j=C&&2==I,E=(0,l.useMemo)(()=>C?D:(0,m.Td)(),[C,D]),L=(0,l.useMemo)(()=>v.length>2?T.filter((e,n)=>n!=I):T,[T,I]),U=(0,l.useMemo)(()=>new i.BKk({glslVersion:i.Wdf,uniforms:{cScale:{value:g},cOffset:{value:z},map:{value:n},textureDepths:{value:new i.Pq0(y[2],y[1],y[0])},cmap:{value:p},animateProg:{value:w},nanColor:{value:new i.Q1f(_)},nanAlpha:{value:1-b}},vertexShader:" // by Jeran Poehls\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}",fragmentShader:S?" // Basic Shader for colors on a plane used in FlatMap with 2D data\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nout vec4 color;\r\n\r\nvarying vec2 vUv;\r\n\r\nuniform sampler2D map[14];\r\nuniform vec3 textureDepths;\r\nuniform sampler2D cmap;\r\nuniform float nanAlpha;\r\nuniform vec3 nanColor;\r\nuniform float cOffset;\r\nuniform float cScale;\r\n\r\n#define epsilon 0.0001\r\n\r\nfloat sample1(vec2 p, int index) { // Shader doesn't support dynamic indexing so we gotta use switching\r\n    if (index == 0) return texture(map[0], p).r;\r\n    else if (index == 1) return texture(map[1], p).r;\r\n    else if (index == 2) return texture(map[2], p).r;\r\n    else if (index == 3) return texture(map[3], p).r;\r\n    else if (index == 4) return texture(map[4], p).r;\r\n    else if (index == 5) return texture(map[5], p).r;\r\n    else if (index == 6) return texture(map[6], p).r;\r\n    else if (index == 7) return texture(map[7], p).r;\r\n    else if (index == 8) return texture(map[8], p).r;\r\n    else if (index == 9) return texture(map[9], p).r;\r\n    else if (index == 10) return texture(map[10], p).r;\r\n    else if (index == 11) return texture(map[11], p).r;\r\n    else if (index == 12) return texture(map[12], p).r;\r\n    else if (index == 13) return texture(map[13], p).r;\r\n    else return 0.0;\r\n}\r\n\r\n\r\nvoid main(){\r\n    int yStepSize = int(textureDepths.x); \r\n    vec2 texCoord = vUv;\r\n    ivec2 idx = clamp(ivec2(texCoord * textureDepths.xy), ivec2(0), ivec2(textureDepths.xy) - 1);\r\n    int textureIdx = idx.y * yStepSize + idx.x;\r\n    vec2 localCoord = texCoord * (textureDepths.xy); // Scale up\r\n    localCoord = fract(localCoord);\r\n\r\n    float strength = sample1(localCoord, textureIdx);\r\n    bool isNaN = strength == 1.;\r\n    float sampLoc = isNaN ? strength: (strength - 0.5)*cScale + 0.5;\r\n    sampLoc = isNaN ? strength : min(sampLoc+cOffset,0.995);\r\n    color = isNaN ? vec4(nanColor, nanAlpha) : vec4(texture2D(cmap, vec2(sampLoc, 0.5)).rgb, 1.);\r\n\r\n}":"//This is for Flat Textures but with 3D textures to sample from i,e; animation\r\n\r\nuniform sampler3D map[14];\r\nuniform sampler2D cmap;\r\nuniform vec3 textureDepths;\r\n\r\nuniform float cOffset;\r\nuniform float cScale;\r\nuniform float animateProg;\r\nuniform float nanAlpha;\r\nuniform vec3 nanColor;\r\n\r\nvarying vec2 vUv;\r\nout vec4 Color;\r\n#define epsilon 0.0001\r\n\r\nfloat sample1(vec3 p, int index) { // Shader doesn't support dynamic indexing so we gotta use switching\r\n    if (index == 0) return texture(map[0], p).r;\r\n    else if (index == 1) return texture(map[1], p).r;\r\n    else if (index == 2) return texture(map[2], p).r;\r\n    else if (index == 3) return texture(map[3], p).r;\r\n    else if (index == 4) return texture(map[4], p).r;\r\n    else if (index == 5) return texture(map[5], p).r;\r\n    else if (index == 6) return texture(map[6], p).r;\r\n    else if (index == 7) return texture(map[7], p).r;\r\n    else if (index == 8) return texture(map[8], p).r;\r\n    else if (index == 9) return texture(map[9], p).r;\r\n    else if (index == 10) return texture(map[10], p).r;\r\n    else if (index == 11) return texture(map[11], p).r;\r\n    else if (index == 12) return texture(map[12], p).r;\r\n    else if (index == 13) return texture(map[13], p).r;\r\n    else return 0.0;\r\n}\r\n\r\nvoid main() {\r\n    int zStepSize = int(textureDepths.y) * int(textureDepths.x); \r\n    int yStepSize = int(textureDepths.x); \r\n    vec3 texCoord = vec3(vUv, animateProg);\r\n    ivec3 idx = clamp(ivec3(texCoord * textureDepths), ivec3(0), ivec3(textureDepths) - 1);\r\n    int textureIdx = idx.z * zStepSize + idx.y * yStepSize + idx.x;\r\n    vec3 localCoord = texCoord * (textureDepths); // Scale up\r\n    localCoord = fract(localCoord);\r\n\r\n    float strength = sample1(localCoord, textureIdx);\r\n\r\n    bool isNaN = strength == 1.;\r\n    float sampLoc = isNaN ? strength: (strength)*cScale;\r\n    sampLoc = isNaN ? strength : min(sampLoc+cOffset,0.995);\r\n    Color = isNaN ? vec4(nanColor, nanAlpha) : vec4(texture2D(cmap, vec2(sampLoc, 0.5)).rgb, 1.);\r\n\r\n}",side:i.$EB}),[S,n]);(0,l.useEffect)(()=>{if(U){let e=U.uniforms;e.cOffset.value=z,e.map.value=n,e.cmap.value=p,e.animateProg.value=w,e.nanColor.value=new i.Q1f(_),e.nanAlpha.value=1-b,e.cScale.value=g}},[g,z,n,p,w,_,b]),(0,l.useEffect)(()=>{B.dispose()},[B]);let Y=(0,l.useRef)(null),V=(0,l.useCallback)(e=>{if(A.current&&e.uv){Y.current=e,a([e.clientX,e.clientY]),N.current=e.uv;let{x:n,y:t}=e.uv,r=S?C?L[1].length:T[1].length:T[2].length,i=S?C?L[0].length:T[0].length:T[1].length,o=Math.round(n*r-.5),l=Math.round(t*i-.5),u=r*l+o;u+=S?0:Math.floor((T[0].length-1)*w)*r*i;let d=E?E[u]:0;s.current=S&&!C?function(e,n){return e*(n.maxVal-n.minVal)+n.minVal}(d,x):d,c.current=S?C?[L[0][l],L[1][o]]:[T[0][l],T[1][o]]:[T[1][l],T[2][o]]}},[E,T,w]);return(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("mesh",{material:U,geometry:B,scale:[C&&2==I&&f?-1:1,f||C&&2==I?-1:1,1],rotation:[0,0,j?Math.PI/2:0],onPointerEnter:()=>{o(!0),A.current=!0},onPointerLeave:()=>{o(!1),A.current=!1},onPointerMove:V})})};function ea(e){return e*Math.PI/180}let eo=e=>{let{textures:n,ZarrDS:t}=e,{setPlotDim:a,updateDimCoords:o,updateTimeSeries:s}=(0,u.on)((0,d.k)(e=>({setPlotDim:e.setPlotDim,updateDimCoords:e.updateDimCoords,updateTimeSeries:e.updateTimeSeries}))),{analysisMode:c,analysisArray:f}=(0,u.r2)((0,d.k)(e=>({analysisMode:e.analysisMode,analysisArray:e.analysisArray}))),{colormap:x,isFlat:v,dimArrays:S,dimNames:h,dimUnits:y,valueScales:g,timeSeries:z,dataShape:w,strides:b,flipY:_,textureArrayDepths:I}=(0,u.on)((0,d.k)(e=>({colormap:e.colormap,isFlat:e.isFlat,dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits,valueScales:e.valueScales,timeSeries:e.timeSeries,dataShape:e.dataShape,strides:e.strides,flipY:e.flipY,textureArrayDepths:e.textureArrayDepths}))),{zSlice:C,ySlice:D,xSlice:M}=(0,u.SZ)((0,d.k)(e=>({zSlice:e.zSlice,ySlice:e.ySlice,xSlice:e.xSlice}))),k=[S[0].slice(C[0],C[1]?C[1]:void 0),S[1].slice(D[0],D[1]?D[1]:void 0),S.length>2?S[2].slice(M[0],M[1]?M[1]:void 0):[]],{animate:P,animProg:T,cOffset:O,cScale:B,selectTS:A,lonExtent:N,latExtent:j,lonResolution:E,latResolution:L,nanColor:U,nanTransparency:Y,sphereDisplacement:V,sphereResolution:R,getColorIdx:F,incrementColorIdx:X}=(0,u.Ws)((0,d.k)(e=>({animate:e.animate,animProg:e.animProg,cOffset:e.cOffset,cScale:e.cScale,selectTS:e.selectTS,lonExtent:e.lonExtent,latExtent:e.latExtent,lonResolution:e.lonResolution,latResolution:e.latResolution,nanColor:e.nanColor,nanTransparency:e.nanTransparency,sphereDisplacement:e.sphereDisplacement,sphereResolution:e.sphereResolution,getColorIdx:e.getColorIdx,incrementColorIdx:e.incrementColorIdx}))),[G,Z]=(0,l.useState)({}),[W,q]=(0,l.useState)(Array(10).fill(new i.IUQ(-1,-1,-1,-1))),[H,K]=(0,l.useMemo)(()=>v?w:[w[1],w[2]],[w]);(0,l.useEffect)(()=>{let e=Object.keys(G),n=Object.keys(z),t=(e=e.filter(e=>n.includes(e))).map(e=>G[e]);q([...t,...Array(Math.max(0,10-t.length)).fill(new i.IUQ(-1,-1,-1,-1))])},[G,z]);let[Q,$]=(0,l.useMemo)(()=>{let e=L/2,n=E/2;return[[Math.max(N[0]-n,-180),Math.min(N[1]+n,180)],[Math.max(j[0]-e,-90),Math.min(j[1]+e,90)]]},[j,N,E,L]),J=(0,l.useMemo)(()=>new i.WBB(1,R),[R]),ee=(0,l.useMemo)(()=>new i.BKk({glslVersion:i.Wdf,uniforms:{map:{value:n},textureDepths:{value:new i.Pq0(I[2],I[1],I[0])},selectTS:{value:A},selectBounds:{value:W},cmap:{value:x},cOffset:{value:O},cScale:{value:B},animateProg:{value:T},latBounds:{value:new i.I9Y(ea($[0]),ea($[1]))},lonBounds:{value:new i.I9Y(ea(Q[0]),ea(Q[1]))},nanColor:{value:new i.Q1f(U)},nanAlpha:{value:1-Y},displaceZero:{value:-g.minVal/(g.maxVal-g.minVal)},displacement:{value:V}},vertexShader:v?" // by Jeran Poehls\r\n\r\nuniform sampler2D map[14];\r\nuniform vec3 textureDepths;\r\n\r\nuniform float displaceZero;\r\nuniform float displacement;\r\nuniform vec2 latBounds;\r\nuniform vec2 lonBounds;\r\n\r\nvec2 giveUV(vec3 position){\r\n    vec3 n = normalize(position);\r\n    float latitude = asin(n.y);\r\n    float longitude = atan(n.z, n.x);\r\n    latitude = (latitude - latBounds.x)/(latBounds.y - latBounds.x);\r\n    longitude = (longitude - lonBounds.x)/(lonBounds.y - lonBounds.x);\r\n\r\n    return vec2(1.-longitude, latitude);\r\n}\r\n\r\nfloat sample1(vec2 p, int index) { // Shader doesn't support dynamic indexing so we gotta use switching\r\n    if (index == 0) return texture(map[0], p).r;\r\n    else if (index == 1) return texture(map[1], p).r;\r\n    else if (index == 2) return texture(map[2], p).r;\r\n    else if (index == 3) return texture(map[3], p).r;\r\n    else if (index == 4) return texture(map[4], p).r;\r\n    else if (index == 5) return texture(map[5], p).r;\r\n    else if (index == 6) return texture(map[6], p).r;\r\n    else if (index == 7) return texture(map[7], p).r;\r\n    else if (index == 8) return texture(map[8], p).r;\r\n    else if (index == 9) return texture(map[9], p).r;\r\n    else if (index == 10) return texture(map[10], p).r;\r\n    else if (index == 11) return texture(map[11], p).r;\r\n    else if (index == 12) return texture(map[12], p).r;\r\n    else if (index == 13) return texture(map[13], p).r;\r\n    else return 0.0;\r\n}\r\n\r\nout vec3 aPosition;\r\n\r\nvoid main() {\r\n    vec2 uv = giveUV(position);\r\n    vec3 normal = normalize(position);\r\n    int yStepSize = int(textureDepths.x); \r\n    ivec2 idx = clamp(ivec2(uv * textureDepths.xy), ivec2(0), ivec2(textureDepths.xy) - 1);\r\n    int textureIdx = idx.y * yStepSize + idx.x;\r\n    vec2 localCoord = uv * (textureDepths.xy); // Scale up\r\n    localCoord = fract(localCoord);\r\n\r\n    float dispStrength = sample1(localCoord, textureIdx);\r\n    float noNan = float(dispStrength != 1.0);\r\n    vec3 newPos = position + (normal * (dispStrength-displaceZero) * noNan * displacement);\r\n    aPosition = position; //Pass out position for sphere frag\r\n    vec4 worldPos = modelViewMatrix * vec4( newPos, 1.0 );\r\n    gl_Position = projectionMatrix * worldPos;\r\n}":" // by Jeran Poehls\r\n\r\nuniform sampler3D map[14];\r\nuniform vec3 textureDepths;\r\n\r\nuniform float displaceZero;\r\nuniform float displacement;\r\nuniform vec2 latBounds;\r\nuniform vec2 lonBounds;\r\nuniform float animateProg;\r\n\r\nvec2 giveUV(vec3 position){\r\n    vec3 n = normalize(position);\r\n    float latitude = asin(n.y);\r\n    float longitude = atan(n.z, n.x);\r\n    latitude = (latitude - latBounds.x)/(latBounds.y - latBounds.x);\r\n    longitude = (longitude - lonBounds.x)/(lonBounds.y - lonBounds.x);\r\n\r\n    return vec2(1.-longitude, latitude);\r\n}\r\n\r\nfloat sample1(vec3 p, int index) { // Shader doesn't support dynamic indexing so we gotta use switching\r\n    if (index == 0) return texture(map[0], p).r;\r\n    else if (index == 1) return texture(map[1], p).r;\r\n    else if (index == 2) return texture(map[2], p).r;\r\n    else if (index == 3) return texture(map[3], p).r;\r\n    else if (index == 4) return texture(map[4], p).r;\r\n    else if (index == 5) return texture(map[5], p).r;\r\n    else if (index == 6) return texture(map[6], p).r;\r\n    else if (index == 7) return texture(map[7], p).r;\r\n    else if (index == 8) return texture(map[8], p).r;\r\n    else if (index == 9) return texture(map[9], p).r;\r\n    else if (index == 10) return texture(map[10], p).r;\r\n    else if (index == 11) return texture(map[11], p).r;\r\n    else if (index == 12) return texture(map[12], p).r;\r\n    else if (index == 13) return texture(map[13], p).r;\r\n    else return 0.0;\r\n}\r\n\r\nout vec3 aPosition;\r\n\r\nvoid main() {\r\n    vec2 uv = giveUV(position); // We can't just pass this as a varying because the fragment will try to interpoalte between the seems which looks bad \r\n    vec3 normal = normalize(position);\r\n    int zStepSize = int(textureDepths.y) * int(textureDepths.x); \r\n    int yStepSize = int(textureDepths.x); \r\n    vec3 texCoord = vec3(uv, animateProg);\r\n    ivec3 idx = clamp(ivec3(texCoord * textureDepths), ivec3(0), ivec3(textureDepths) - 1); // Ivec3 is like running a \"floor\" operation on all three at once. The clamp is because the very last idx is OOR\r\n    int textureIdx = idx.z * zStepSize + idx.y * yStepSize + idx.x;\r\n    vec3 localCoord = texCoord * textureDepths; // Scale up\r\n    localCoord = fract(localCoord);\r\n\r\n    float dispStrength = sample1(localCoord, textureIdx);\r\n    float noNan = float(dispStrength != 1.0);\r\n    vec3 newPos = position + (normal * (dispStrength-displaceZero) * noNan * displacement);\r\n    aPosition = position; //Pass out position for sphere frag\r\n    vec4 worldPos = modelViewMatrix * vec4( newPos, 1.0 );\r\n    gl_Position = projectionMatrix * worldPos;\r\n}",fragmentShader:v?" // by Jeran Poehls\nprecision highp float;\nprecision highp sampler2D;\n\nout vec4 color;\n\nin vec3 aPosition;\n\nuniform sampler2D map[14];\nuniform sampler2D cmap;\nuniform vec3 textureDepths;\n\nuniform float cOffset;\nuniform float cScale;\nuniform float animateProg;\nuniform bool selectTS;\nuniform vec2 latBounds;\nuniform vec2 lonBounds;\nuniform vec3 nanColor;\nuniform float nanAlpha;\n\n#define pi 3.141592653\n\nfloat sample1(vec2 p, int index) { // Shader doesn't support dynamic indexing so we gotta use switching\n    if (index == 0) return texture(map[0], p).r;\n    else if (index == 1) return texture(map[1], p).r;\n    else if (index == 2) return texture(map[2], p).r;\n    else if (index == 3) return texture(map[3], p).r;\n    else if (index == 4) return texture(map[4], p).r;\n    else if (index == 5) return texture(map[5], p).r;\n    else if (index == 6) return texture(map[6], p).r;\n    else if (index == 7) return texture(map[7], p).r;\n    else if (index == 8) return texture(map[8], p).r;\n    else if (index == 9) return texture(map[9], p).r;\n    else if (index == 10) return texture(map[10], p).r;\n    else if (index == 11) return texture(map[11], p).r;\n    else if (index == 12) return texture(map[12], p).r;\n    else if (index == 13) return texture(map[13], p).r;\n    else return 0.0;\n}\n\nvec2 giveUV(vec3 position){\n    vec3 n = normalize(position);\n    float latitude = asin(n.y);\n    float longitude = atan(n.z, n.x);\n    latitude = (latitude - latBounds.x)/(latBounds.y - latBounds.x);\n    longitude = (longitude - lonBounds.x)/(lonBounds.y - lonBounds.x);\n\n    return vec2(1.-longitude, latitude);\n}\n\nvoid main(){\n    vec2 texCoord = giveUV(aPosition);\n    int yStepSize = int(textureDepths.x); \n    ivec2 idx = clamp(ivec2(texCoord * textureDepths.xy), ivec2(0), ivec2(textureDepths.xy) - 1);\n    int textureIdx = idx.y * yStepSize + idx.x;\n    vec2 localCoord = texCoord * (textureDepths.xy); // Scale up\n    localCoord = fract(localCoord);\n\n    float strength = sample1(localCoord, textureIdx);\n    bool isNaN = strength == 1.;\n    strength = isNaN ? strength : (strength - 0.5)*cScale + 0.5;\n    strength = isNaN ? strength : min(strength+cOffset,0.99);\n    color = isNaN ? vec4(nanColor, nanAlpha) : texture(cmap, vec2(strength, 0.5));\n    if (!isNaN){\n        color.a = 1.;\n    }\n\n\n}":" // by Jeran Poehls\nprecision highp float;\nprecision highp sampler3D;\n\nout vec4 color;\n\nin vec3 aPosition;\n\nuniform sampler3D map[14];\nuniform sampler2D cmap;\nuniform vec3 textureDepths;\n\nuniform float cOffset;\nuniform float cScale;\nuniform float animateProg;\nuniform vec4[10] selectBounds; \nuniform bool selectTS;\nuniform vec2 latBounds;\nuniform vec2 lonBounds;\nuniform vec3 nanColor;\nuniform float nanAlpha;\n\n#define pi 3.141592653\n#define epsilon 0.0001\n\nvec2 giveUV(vec3 position){\n    vec3 n = normalize(position);\n    float latitude = asin(n.y);\n    float longitude = atan(n.z, n.x);\n    latitude = (latitude - latBounds.x)/(latBounds.y - latBounds.x);\n    longitude = (longitude - lonBounds.x)/(lonBounds.y - lonBounds.x);\n\n    return vec2(1.-longitude, latitude);\n}\n\nbool isValid(vec2 sampleCoord){\n    for (int i = 0; i < 10; i++){\n        vec4 thisBound = selectBounds[i];\n        if (thisBound.x == -1.){\n            return false;\n        }\n        bool cond = (sampleCoord.x < thisBound.r || sampleCoord.x > thisBound.g || sampleCoord.y < thisBound.b ||  sampleCoord.y > thisBound.a);\n        if (!cond){\n            return true;\n        }\n    }\n    return false;\n}\n\nfloat sample1(vec3 p, int index) { // Shader doesn't support dynamic indexing so we gotta use switching\n    if (index == 0) return texture(map[0], p).r;\n    else if (index == 1) return texture(map[1], p).r;\n    else if (index == 2) return texture(map[2], p).r;\n    else if (index == 3) return texture(map[3], p).r;\n    else if (index == 4) return texture(map[4], p).r;\n    else if (index == 5) return texture(map[5], p).r;\n    else if (index == 6) return texture(map[6], p).r;\n    else if (index == 7) return texture(map[7], p).r;\n    else if (index == 8) return texture(map[8], p).r;\n    else if (index == 9) return texture(map[9], p).r;\n    else if (index == 10) return texture(map[10], p).r;\n    else if (index == 11) return texture(map[11], p).r;\n    else if (index == 12) return texture(map[12], p).r;\n    else if (index == 13) return texture(map[13], p).r;\n    else return 0.0;\n}\n\nvoid main(){\n    vec2 sampleCoord = giveUV(aPosition);\n    bool inBounds = all(greaterThanEqual(sampleCoord, vec2(0.0))) && \n                all(lessThanEqual(sampleCoord, vec2(1.0)));\n    \n    if (inBounds) {\n        int zStepSize = int(textureDepths.y) * int(textureDepths.x); \n        int yStepSize = int(textureDepths.x); \n        vec3 texCoord = vec3(sampleCoord, animateProg);\n        ivec3 idx = clamp(ivec3(texCoord * textureDepths), ivec3(0), ivec3(textureDepths) - 1);\n        int textureIdx = idx.z * zStepSize + idx.y * yStepSize + idx.x;\n        vec3 localCoord = texCoord * (textureDepths); // Scale up\n        localCoord = fract(localCoord);\n\n        float strength = sample1(localCoord, textureIdx);\n        bool isNaN = strength == 1.;\n        strength = isNaN ? strength : (strength)*cScale;\n        strength = isNaN ? strength : min(strength+cOffset,0.99);\n        color = isNaN ? vec4(nanColor, nanAlpha) : texture(cmap, vec2(strength, 0.5));\n        if (!isNaN){\n            color.a = 1.;\n        }\n        bool cond = isValid(sampleCoord);\n        if (!cond && selectTS){\n            color.rgb *= 0.65;\n        }\n    } else {\n        color = vec4(nanColor, 1.); // Black\n        color.a = nanAlpha;\n    }\n\n}",blending:i.NTi,side:i.hB5,transparent:!0,depthWrite:!0}),[v,n]),en=ee.clone();return en.side=i.hsX,(0,l.useEffect)(()=>{if(ee){let e=ee.uniforms;e.map.value=n,e.selectTS.value=A,e.selectBounds.value=W,e.cmap.value=x,e.cOffset.value=O,e.cScale.value=B,e.animateProg.value=T,e.latBounds.value=new i.I9Y(ea($[0]),ea($[1])),e.lonBounds.value=new i.I9Y(ea(Q[0]),ea(Q[1])),e.nanColor.value=new i.Q1f(U),e.nanAlpha.value=1-Y,e.displaceZero.value=-g.minVal/(g.maxVal-g.minVal),e.displacement.value=V}if(en){let e=en.uniforms;e.map.value=n,e.selectTS.value=A,e.selectBounds.value=W,e.cmap.value=x,e.cOffset.value=O,e.cScale.value=B,e.animateProg.value=T,e.latBounds.value=new i.I9Y(ea($[0]),ea($[1])),e.lonBounds.value=new i.I9Y(ea(Q[0]),ea(Q[1])),e.nanColor.value=new i.Q1f(U),e.nanAlpha.value=1-Y,e.displaceZero.value=-g.minVal/(g.maxVal-g.minVal),e.displacement.value=V}},[n,T,x,O,B,P,W,A,Q,$,U,Y,V,g]),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("mesh",{renderOrder:1,geometry:J,material:ee,onClick:e=>A&&function(e){let n=function(e,n,t){let r=Math.atan2(e.z,e.x),a=Math.asin(e.y),o=(r-ea(t[0]))/(ea(t[1])-ea(t[0])),l=(a-ea(n[0]))/(ea(n[1])-ea(n[0]));return new i.I9Y(1-o,l)}(e.point.normalize(),$,Q),r=new i.Pq0(0,0,1);if(t){var l,u;let e=_?new i.I9Y(n.x,1-n.y):n,t=(0,m.PE)({data:c?f:(0,m.Td)(),shape:w,stride:b},{uv:e,normal:r});a(0);let d=(0,m.jT)({normal:r,uv:n}).map((e,n)=>e?k[n][Math.round(e*k[n].length)]:null),x=h.filter((e,n)=>null!==d[n]),v=y.filter((e,n)=>null!==d[n]);d=d.filter(e=>null!==e);let S="".concat(d[0],"_").concat(d[1]),g={color:(0,p.md)(F()/10,"Paired"),data:t};X(),s({[S]:g}),o({[S]:{first:{name:x[0],loc:null!=(l=d[0])?l:0,units:v[0]},second:{name:x[1],loc:null!=(u=d[1])?u:0,units:v[1]},plot:{units:y[0]}}}),function(e,n){let t=Math.floor(e.x*K)+.5,r=Math.ceil(e.y*H)-.5,a=1/K,o=1/H,l={[n]:new i.IUQ(...[t/K-a/2,t/K+a/2],...[r/H-o/2,r/H+o/2])};Z(e=>({...l,...e}))}(n,S)}}(e)}),(0,r.jsx)("mesh",{renderOrder:0,geometry:J,material:en})]})};function el(e,n,t){let[r,i]=e,a=(r-n[0])/(n[1]-n[0]),o=(i-t[0])/(t[1]-t[0]);return a-=.5,o-=.5,[a*=2,(o*=2)/2,0]}function es(e){let[n,t]=e,r=t*Math.PI/180,i=n*Math.PI/180;return[Math.cos(r)*Math.cos(i)*1.001,1.001*Math.sin(r),Math.cos(r)*Math.sin(i)*1.001]}function eu(e){let{features:n}=e,{xRange:t,yRange:a,plotType:o,borderColor:f,lonExtent:m,latExtent:p,lonResolution:x,latResolution:v}=(0,u.Ws)((0,d.k)(e=>({xRange:e.xRange,yRange:e.yRange,plotType:e.plotType,borderColor:e.borderColor,lonExtent:e.lonExtent,latExtent:e.latExtent,lonResolution:e.lonResolution,latResolution:e.latResolution}))),{flipY:S,shape:h}=(0,u.on)((0,d.k)(e=>({flipY:e.flipY,shape:e.shape}))),[y,g]=(0,l.useMemo)(()=>{let e=v/2,n=x/2,t=[Math.max(m[0]-n,-180),Math.min(m[1]+n,180)],r=[Math.max(p[0]-e,-90),Math.min(p[1]+e,90)];return[t,r=S?[r[1],r[0]]:r]},[p,m,x,v]),[z,w]=(0,l.useState)(!1);(0,l.useEffect)(()=>{"sphere"===o?w(!0):w(!1)},[o]);let b=(0,l.useMemo)(()=>new i.BKk({glslVersion:i.Wdf,vertexShader:s,fragmentShader:"precision highp float;\r\nprecision highp sampler3D;\r\n\r\nout vec4 color;\r\n\r\nin vec3 aPosition;\r\n\r\nuniform vec2 xBounds;\r\nuniform vec2 yBounds;\r\nuniform vec3 borderColor;\r\nuniform bool trim;\r\n\r\nvoid main() {\r\n\r\n    if ((aPosition.x < xBounds.x || aPosition.x > xBounds.y || aPosition.y < yBounds.x || aPosition.y > yBounds.y) && trim){\r\n        discard;\r\n    }\r\n\r\n    color = vec4(borderColor, 1.0);\r\n}",uniforms:{xBounds:{value:new i.I9Y(t[0],t[1])},yBounds:{value:new i.I9Y(a[0]/h.x,a[1]/h.x)},borderColor:{value:new i.Q1f(f)},trim:{value:!z}}}),[]);(0,l.useEffect)(()=>{if(b){let e=b.uniforms;e.xBounds.value=new i.I9Y(t[0],t[1]),e.yBounds.value=new i.I9Y(a[0]/h.x,a[1]/h.x),e.borderColor.value=new i.Q1f(f),e.trim.value=!z,(0,c.m)()}},[t,a,f,z]);let _=(0,l.useMemo)(()=>n.flatMap((e,n)=>{let t=[];if("LineString"===e.geometry.type){let n=[];e.geometry.coordinates.forEach(e=>{let[t,r]=e,[a,o,l]=z?es([-t,r]):el([t,r],y,g);n.push(new i.Pq0(a,o,l))});let r=new Float32Array(3*n.length);n.forEach((e,n)=>{r.set([e.x,e.y,e.z],3*n)});let a=new i.LoY;a.setAttribute("position",new i.THS(r,3)),t.push(a)}else"MultiPolygon"===e.geometry.type?e.geometry.coordinates.forEach((e,n)=>{let r=n,a=e[0],o=[];a.forEach(e=>{let[n,t]=e;r++;let[a,l,s]=z?es([-n,t]):el([n,t],y,g);o.push(new i.Pq0(a,l,s))});let l=new Float32Array(3*o.length);o.forEach((e,n)=>{l.set([e.x,e.y,e.z],3*n)});let s=new i.LoY;s.setAttribute("position",new i.THS(l,3)),t.push(s)}):("Polygon"===e.geometry.type?[e.geometry.coordinates]:e.geometry.coordinates).forEach(e=>{let n=[];e.forEach(e=>{e.forEach(e=>{let[t,r]=e,[a,o,l]=z?es([-t,r]):el([t,r],y,g);n.push(new i.Pq0(a,o,l))})});let r=new Float32Array(3*n.length);n.forEach((e,n)=>{r.set([e.x,e.y,e.z],3*n)});let a=new i.LoY;a.setAttribute("position",new i.THS(r,3)),t.push(a)});return t}),[n,z,S,y,g]),I=(0,l.useMemo)(()=>_.map((e,n)=>{let t=new i.N1A(e,b);return(0,r.jsx)("primitive",{object:t},"border-".concat(n))}),[_,b]);return(0,r.jsx)(r.Fragment,{children:I})}let ed=()=>{let[e,n]=(0,l.useState)(null),[t,i]=(0,l.useState)(null),[a,o]=(0,l.useState)(!1),{dataShape:s,is4D:f}=(0,u.on)((0,d.k)(e=>({dataShape:e.dataShape,is4D:e.is4D}))),{zRange:m,plotType:p,showBorders:x,timeScale:v}=(0,u.Ws)((0,d.k)(e=>({zRange:e.zRange,plotType:e.plotType,showBorders:e.showBorders,timeScale:e.timeScale}))),{analysisMode:S,axis:h}=(0,u.r2)((0,d.k)(e=>({analysisMode:e.analysisMode,axis:e.axis}))),[y,g]=(0,l.useState)(!1);(0,l.useEffect)(()=>{"sphere"===p?g(!0):g(!1)},[p]),(0,c.D)(e=>{let{camera:n}=e;!y&&(Math.abs(n.rotation.z)>Math.PI/2?o(!0):a&&o(!1))}),(0,l.useEffect)(()=>{fetch("./ne_110m_coastline.json").then(e=>e.json()).then(e=>n(e.features)),fetch("./ne_110m_admin_0_countries.json").then(e=>e.json()).then(e=>i(e.features))},[]);let z="point-cloud"==p,w=s[0]/s[2]*v;return(0,r.jsxs)("group",{visible:x&&!(S&&0!=h),position:y?[0,0,0]:[0,0,a?m[0]*(z?w:1):m[1]*(z?w:1)],children:[e&&(0,r.jsx)(eu,{features:e}),t&&(0,r.jsx)(eu,{features:t})]})};var ec=t(8024),ef=t(8719),em=t(9228);let ep={INITIAL_RESOLUTION:7,MAX_RESOLUTION:20,MIN_RESOLUTION:1,PC_GLOBAL_SCALE_DIVISOR:500,LINE_WIDTH:2,TICK_LENGTH_FACTOR:.05,TICK_FONT_SIZE_FACTOR:.05,TITLE_FONT_SIZE_FACTOR:.08,CONTROL_FONT_SIZE_FACTOR:.15,X_TITLE_OFFSET_FACTOR:.15,Z_TITLE_OFFSET_FACTOR:.15},ex=e=>{let{flipX:n,flipY:t,flipDown:a}=e,{dimArrays:o,dimNames:s,dimUnits:c,dataShape:f,revY:p}=(0,u.on)((0,d.k)(e=>({dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits,dataShape:e.dataShape,revY:e.flipY}))),{zSlice:x,ySlice:v,xSlice:S}=(0,u.SZ)((0,d.k)(e=>({zSlice:e.zSlice,ySlice:e.ySlice,xSlice:e.xSlice}))),{xRange:h,yRange:g,zRange:z,plotType:w,timeScale:b,animProg:_}=(0,u.Ws)((0,d.k)(e=>({xRange:e.xRange,yRange:e.yRange,zRange:e.zRange,plotType:e.plotType,timeScale:e.timeScale,animProg:e.animProg}))),{hideAxis:I,hideAxisControls:C}=(0,u.qi)((0,d.k)(e=>({hideAxis:e.hideAxis,hideAxisControls:e.hideAxisControls}))),D=[(x[1]?x[1]:o[0].length)-x[0],(v[1]?v[1]:o[1].length)-v[0],(S[1]?S[1]:o[2].length)-S[0]],M=[o[0].slice(x[0],x[1]?x[1]:void 0),p?o[1].slice(v[0],v[1]?v[1]:void 0).reverse():o[1].slice(v[0],v[1]?v[1]:void 0),o[2].slice(S[0],S[1]?S[1]:void 0)],[k,P]=(0,l.useState)(ep.INITIAL_RESOLUTION),[T,O]=(0,l.useState)(ep.INITIAL_RESOLUTION),[B,A]=(0,l.useState)(ep.INITIAL_RESOLUTION),N=(0,l.useMemo)(()=>"point-cloud"==w,[w]),j=N?f[2]/ep.PC_GLOBAL_SCALE_DIVISOR:1,L=(0,l.useMemo)(()=>f[0]/f[2]*b,[f,b]),U=(0,l.useMemo)(()=>f[1]/f[2],[f]),Y=(0,y.$m)("--text-plot"),V=(0,l.useMemo)(()=>{if(Y)return new i.Q1f(Y).getHex()},[Y]),R=(0,l.useMemo)(()=>new em.G({color:V||0,linewidth:ep.LINE_WIDTH}),[V]),F=ep.TICK_LENGTH_FACTOR*j,X=(0,l.useMemo)(()=>{let e=new ec.n().setPositions([h[0]*j-F/2,0,0,h[1]*j+F/2,0,0]);return new ef.b(e,R)},[h,R,j]),G=(0,l.useMemo)(()=>{let e=new ec.n().setPositions([0,g[0]*U*j,0,0,g[1]*U*j+F/2,0]);return new ef.b(e,R)},[g,U,R,j]),Z=(0,l.useMemo)(()=>{let e=new ec.n().setPositions([0,0,N?z[0]*j*L-F/2:z[0]-F/2,0,0,N?z[1]*j*L+F/2:z[1]+F/2]);return new ef.b(e,R)},[z,L,N,R,j]),W=(0,l.useMemo)(()=>{let e=new ec.n().setPositions([0,0,0,0,0,F]);return new ef.b(e,R)},[R,j]),q=k/(k-1),H=1/(k-1),K=T/(T-1),Q=1/(T-1),$=B/(B-1),J=1/(B-1),ee=(0,l.useMemo)(()=>(s[2].length*ep.TITLE_FONT_SIZE_FACTOR/2+.1)*j,[s,j]),en=(0,l.useMemo)(()=>(s[1].length*ep.TITLE_FONT_SIZE_FACTOR/2+.1)*j,[s,j]),et=(0,l.useMemo)(()=>(s[0].length*ep.TITLE_FONT_SIZE_FACTOR/2+.1)*j,[s,j]);return(0,r.jsxs)("group",{visible:"sphere"!=w&&"flat"!=w&&!I,children:[(0,r.jsxs)("group",{position:[0,N?U*j*g[0]:U*g[0],0],children:[(0,r.jsxs)("group",{position:[0,0,n?N?z[0]*L*j-F/2:z[0]-F/2:N?z[1]*j*L+F/2:z[1]+F/2],rotation:[a?n?-Math.PI/2:Math.PI/2:0,0,0],children:[(0,r.jsx)("primitive",{object:X},"xLine"),Array(k).fill(null).map((e,t)=>(h[0]+1)/2<=t*q/k&&(h[1]+1)/2>=t*q/k&&(0,r.jsxs)("group",{position:[N?-j+t*q/(k/2)*j:-1+t*q/(k/2),0,0],children:[(0,r.jsx)("primitive",{object:W.clone(),rotation:[0,n?Math.PI:0,0]},t),(0,r.jsx)(E.E,{anchorX:0==t?n?"right":"left":t==k-1?n?"left":"right":"center",anchorY:"top",fontSize:ep.TICK_FONT_SIZE_FACTOR*j,color:V,"material-depthTest":!1,rotation:[-Math.PI/2,0,n?Math.PI:0],position:[0,0,n?-ep.TICK_LENGTH_FACTOR*j:ep.TICK_LENGTH_FACTOR*j],children:(0,m.SB)(M[2][Math.floor((D[2]-1)*t*H)],c[2])},"textX_".concat(t))]},"xGroup_".concat(t))),(0,r.jsxs)("group",{rotation:[-Math.PI/2,0,n?Math.PI:0],position:[(h[0]+h[1])/2*j,0,n?-ep.X_TITLE_OFFSET_FACTOR*j:ep.X_TITLE_OFFSET_FACTOR*j],children:[(0,r.jsx)(E.E,{anchorX:"center",anchorY:"top",fontSize:ep.TITLE_FONT_SIZE_FACTOR*j,color:V,"material-depthTest":!1,children:s[2]},"xTitle"),(0,r.jsxs)("group",{visible:!C,children:[k<ep.MAX_RESOLUTION&&(0,r.jsx)(E.E,{anchorX:"center",anchorY:"middle",fontSize:.15*j,color:V,"material-depthTest":!1,position:[ee,-ep.TITLE_FONT_SIZE_FACTOR*j/2,0],onClick:e=>P(e=>Math.min(e+1,ep.MAX_RESOLUTION)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"+"},"xAdd"),k>ep.MIN_RESOLUTION&&(0,r.jsx)(E.E,{anchorX:"center",anchorY:"middle",fontSize:.15*j,color:V,"material-depthTest":!1,position:[-ee,-ep.TITLE_FONT_SIZE_FACTOR*j/2,0],onClick:e=>P(e=>Math.max(e-1,ep.MIN_RESOLUTION)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"-"},"xSub")]})]})]}),(0,r.jsxs)("group",{position:[t?h[1]*j+F/2:h[0]*j-F/2,0,0],rotation:[0,0,a?t?-Math.PI/2:Math.PI/2:0],children:[(0,r.jsx)("primitive",{object:Z},"zLine"),Array(B).fill(null).map((e,n)=>(z[0]+1)/2<=n*$/B&&(z[1]+1)/2>=n*$/B&&(0,r.jsxs)("group",{position:[0,0,N?-L*j+n*$/(B/2)*L*j:-1+n*$/(B/2)],children:[(0,r.jsx)("primitive",{object:W.clone(),rotation:[0,t?Math.PI/2:-Math.PI/2,0]},n),(0,r.jsx)(E.E,{anchorX:0==n?t?"right":"left":n==B-1?t?"left":"right":"center",anchorY:"top",fontSize:ep.TICK_FONT_SIZE_FACTOR*j*.8,color:V,"material-depthTest":!1,rotation:[-Math.PI/2,0,t?Math.PI/2:-Math.PI/2],position:[t?ep.TICK_LENGTH_FACTOR*j:-ep.TICK_LENGTH_FACTOR*j,0,0],children:(0,m.SB)(M[0][(Math.floor((D[0]-1)*n*J)+Math.floor(D[0]*_))%D[0]],c[0])},"textY_".concat(n))]},"zGroup_".concat(n))),(0,r.jsxs)("group",{rotation:[-Math.PI/2,0,t?Math.PI/2:-Math.PI/2],position:[t?ep.Z_TITLE_OFFSET_FACTOR*j:-ep.Z_TITLE_OFFSET_FACTOR*j,0,N?(z[0]+z[1])/2*L*j:(z[0]+z[1])/2],children:[(0,r.jsx)(E.E,{anchorX:"center",anchorY:"top",fontSize:ep.TITLE_FONT_SIZE_FACTOR*j,color:V,"material-depthTest":!1,children:s[0]},"zTitle"),(0,r.jsxs)("group",{visible:!C,children:[B<ep.MAX_RESOLUTION&&(0,r.jsx)(E.E,{anchorX:"center",anchorY:"middle",fontSize:.15*j,color:V,"material-depthTest":!1,position:[et,-ep.TITLE_FONT_SIZE_FACTOR*j/2,0],onClick:e=>A(e=>Math.min(e+1,ep.MAX_RESOLUTION)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"+"},"zAdd"),B>ep.MIN_RESOLUTION&&(0,r.jsx)(E.E,{anchorX:"center",anchorY:"middle",fontSize:.15*j,color:V,"material-depthTest":!1,position:[-et,-ep.TITLE_FONT_SIZE_FACTOR*j/2,0],onClick:e=>A(e=>Math.max(e-1,ep.MIN_RESOLUTION)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"-"},"zSub")]})]})]})]}),(0,r.jsxs)("group",{position:[t?h[0]*j-F/2:h[1]*j+F/2,0,n?N?z[0]*L*j-F/2:z[0]-F/2:N?z[1]*L*j+F/2:z[1]+F/2],children:[(0,r.jsx)("primitive",{object:G},"yLine"),Array(T).fill(null).map((e,i)=>(g[0]+1)/2<=i*K/T&&(g[1]+1)/2>=i*K/T&&(0,r.jsxs)("group",{position:[0,N?-U*j+i*K/(T/2)*U*j:-U+i*K/(T/2)*U,0],children:[(0,r.jsx)("primitive",{object:W.clone(),rotation:[0,t?-Math.PI/2:Math.PI/2,0]},i),(0,r.jsx)(E.E,{anchorX:t?n?"left":"right":n?"right":"left",anchorY:"middle",fontSize:.05*j,color:V,"material-depthTest":!1,rotation:[0,n?Math.PI:0,0],position:[t?-.07*j:.07*j,0,0],children:(0,m.SB)(M[1][Math.floor((D[1]-1)*i*Q)],c[1])},"text_".concat(i))]},"yGroup_".concat(i))),(0,r.jsxs)("group",{rotation:[0,n?Math.PI:0,0],position:[t?-.32*j:.32*j,(g[0]+g[1])/2*U*j,0],children:[(0,r.jsx)(E.E,{anchorX:"center",anchorY:"middle",fontSize:.08*j,color:V,"material-depthTest":!1,rotation:[0,0,Math.PI/2],children:s[1]},"yTitle"),(0,r.jsxs)("group",{visible:!C,children:[T<ep.MAX_RESOLUTION&&(0,r.jsx)(E.E,{anchorX:"center",anchorY:"middle",fontSize:ep.CONTROL_FONT_SIZE_FACTOR*j,color:V,"material-depthTest":!1,position:[0,en,0],onClick:e=>O(e=>Math.min(e+1,ep.MAX_RESOLUTION)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"+"},"zAdd"),T>ep.MIN_RESOLUTION&&(0,r.jsx)(E.E,{anchorX:"center",anchorY:"middle",rotation:[0,0,Math.PI/2],fontSize:ep.CONTROL_FONT_SIZE_FACTOR*j,color:V,"material-depthTest":!1,position:[0,-en,0],onClick:e=>O(e=>Math.max(e-1,ep.MIN_RESOLUTION)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"-"},"zSub")]})]})]})]})},ev={INITIAL_RESOLUTION:7,MAX_RESOLUTION:20,MIN_RESOLUTION:1,LINE_WIDTH:2,TICK_LENGTH:.05,TICK_FONT_SIZE:.05,TITLE_FONT_SIZE:.08,X_TITLE_OFFSET:.15,Y_TITLE_OFFSET:.325},eS=()=>{let{dimArrays:e,dimNames:n,dimUnits:t,flipY:a,isFlat:o}=(0,u.on)((0,d.k)(e=>({dimArrays:e.dimArrays,dimNames:e.dimNames,dimUnits:e.dimUnits,flipY:e.flipY,isFlat:e.isFlat}))),{plotType:s}=(0,u.Ws)((0,d.k)(e=>({plotType:e.plotType}))),{zSlice:c,ySlice:f,xSlice:p}=(0,u.SZ)((0,d.k)(e=>({zSlice:e.zSlice,ySlice:e.ySlice,xSlice:e.xSlice}))),{hideAxis:x,hideAxisControls:v}=(0,u.qi)((0,d.k)(e=>({hideAxis:e.hideAxis,hideAxisControls:e.hideAxisControls}))),{analysisMode:S,axis:h}=(0,u.r2)((0,d.k)(e=>({analysisMode:e.analysisMode,axis:e.axis}))),g=2==e.length,z=g?[f,p]:[c,f,p],w=(0,l.useMemo)(()=>S&&!g?e.map((e,n)=>(z[n][1]?z[n][1]:e.length)-z[n][0]).filter((e,n)=>n!=h):e.map((e,n)=>(z[n][1]?z[n][1]:e.length)-z[n][0]),[h,e,S]),b=(0,l.useMemo)(()=>g?[a?e[0].slice().reverse():e[0],e[1]]:[e[0].slice(c[0],c[1]?c[1]:void 0),a?e[1].slice(f[0],f[1]?f[1]:void 0).reverse():e[1].slice(f[0],f[1]?f[1]:void 0),e[2].slice(p[0],p[1]?p[1]:void 0)],[e,a]),_=(0,l.useMemo)(()=>S&&2==h&&!g,[h,S]),I=_?w.length-2:w.length-1,C=_?w.length-1:w.length-2,[D,M]=(0,l.useState)(ev.INITIAL_RESOLUTION),[k,P]=(0,l.useState)(ev.INITIAL_RESOLUTION),{axisArrays:T,axisUnits:O,axisNames:B}=(0,l.useMemo)(()=>S&&!g?{axisArrays:b.filter((e,n)=>n!=h),axisUnits:t.filter((e,n)=>n!=h),axisNames:n.filter((e,n)=>n!=h)}:{axisArrays:b,axisUnits:t,axisNames:n},[S,e,t,n,b]),A=(0,l.useMemo)(()=>(S,w[C]/w[I]),[w,S,h]),N=(0,y.$m)("--text-plot"),j=(0,l.useMemo)(()=>{if(N)return new i.Q1f(N).getHex()},[N]),L=(0,l.useMemo)(()=>new em.G({color:j||0,linewidth:ev.LINE_WIDTH}),[j]),U=ev.TICK_LENGTH,Y=(0,l.useMemo)(()=>{let e=new ec.n().setPositions([-1/(_?A:1)-U/2,0,0,1/(_?A:1)+U/2,0,0]);return new ef.b(e,L)},[L,_,A]),V=(0,l.useMemo)(()=>{let e=new ec.n().setPositions([0,-(_?1:A)-U/2,0,0,(_?1:A)+U/2,0]);return new ef.b(e,L)},[A,L,_,A]),R=(0,l.useMemo)(()=>{let e=new ec.n().setPositions([0,0,0,0,0,ev.TICK_LENGTH]);return new ef.b(e,L)},[L,_]),F=D/(D-1),X=1/(D-1),G=k/(k-1),Z=1/(k-1),W=(0,l.useMemo)(()=>B[I].length*ev.TITLE_FONT_SIZE/2+.1,[B,I]),q=(0,l.useMemo)(()=>B[C].length*ev.TITLE_FONT_SIZE/2+.1,[B,C]);return(0,r.jsxs)("group",{visible:"flat"==s&&!x,children:[(0,r.jsxs)("group",{position:[0,-(_?1:A)-U/2,0],rotation:[Math.PI/2,0,0],children:[(0,r.jsx)("primitive",{object:Y},"xLine"),Array(D).fill(null).map((e,n)=>D>ev.MIN_RESOLUTION&&(0,r.jsxs)("group",{position:[-(_?1/A:1)+n*F/(D/2)*(_?1/A:1),0,0],children:[(0,r.jsx)("primitive",{object:R.clone(),rotation:[0,0,0]},n),(0,r.jsx)(E.E,{anchorX:"center",anchorY:"top",fontSize:ev.TICK_FONT_SIZE,color:j,"material-depthTest":!1,rotation:[-Math.PI/2,0,0],position:[0,0,ev.TICK_LENGTH],children:(0,m.SB)(T[I][Math.floor((w[I]-1)*n*X)],O[I])},"textX_".concat(n))]},"xGroup_".concat(n))),(0,r.jsxs)("group",{rotation:[-Math.PI/2,0,0],position:[0,0,ev.X_TITLE_OFFSET],children:[(0,r.jsx)(E.E,{anchorX:"center",anchorY:"top",fontSize:ev.TITLE_FONT_SIZE,color:j,"material-depthTest":!1,children:B[I]},"xTitle"),(0,r.jsxs)("group",{visible:!v,children:[D<ev.MAX_RESOLUTION&&(0,r.jsx)(E.E,{anchorX:"center",anchorY:"middle",fontSize:.125,color:j,"material-depthTest":!1,position:[W,-.05,0],onClick:e=>M(e=>Math.min(e+1,ev.MAX_RESOLUTION)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"+"},"xAdd"),D>ev.MIN_RESOLUTION&&(0,r.jsx)(E.E,{anchorX:"center",anchorY:"middle",fontSize:.125,color:j,"material-depthTest":!1,position:[-W,-.05,0],onClick:e=>M(e=>Math.max(e-1,ev.MIN_RESOLUTION)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"-"},"xSub")]})]})]}),(0,r.jsxs)("group",{position:[-(_?1/A:1)-U/2,0,0],children:[(0,r.jsx)("primitive",{object:V},"yLine"),Array(k).fill(null).map((e,n)=>k>ev.MIN_RESOLUTION&&(0,r.jsxs)("group",{position:[0,-(_?1:A)+n*G/(k/2)*(_?1:A),0],rotation:[0,0,Math.PI],children:[(0,r.jsx)("primitive",{object:R.clone(),rotation:[0,Math.PI/2,0]},n),(0,r.jsx)(E.E,{anchorX:"right",anchorY:"middle",fontSize:ev.TICK_FONT_SIZE,color:j,"material-depthTest":!1,rotation:[0,0,-Math.PI],position:[1.4*ev.TICK_LENGTH,0,0],children:(0,m.SB)(T[C][Math.floor((w[C]-1)*n*Z)],O[C])},"text_".concat(n))]},"yGroup_".concat(n))),(0,r.jsxs)("group",{rotation:[0,0,0],position:[-ev.Y_TITLE_OFFSET,0,0],children:[(0,r.jsx)(E.E,{anchorX:"center",anchorY:"middle",rotation:[0,0,Math.PI/2],fontSize:ev.TITLE_FONT_SIZE,color:j,"material-depthTest":!1,children:B[C]},"yTitle"),(0,r.jsxs)("group",{visible:!v,children:[k<ev.MAX_RESOLUTION&&(0,r.jsx)(E.E,{anchorX:"center",anchorY:"middle",fontSize:.125,color:j,"material-depthTest":!1,position:[0,q,0],onClick:e=>P(e=>Math.min(e+1,ev.MAX_RESOLUTION)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"+"},"zAdd"),k>ev.MIN_RESOLUTION&&(0,r.jsx)(E.E,{anchorX:"center",anchorY:"middle",fontSize:.125,color:j,"material-depthTest":!1,position:[0,-q,0],onClick:e=>P(e=>Math.max(e-1,ev.MIN_RESOLUTION)),onPointerEnter:e=>document.body.style.cursor="pointer",onPointerLeave:e=>document.body.style.cursor="default",children:"-"},"zSub")]})]})]})]})},eh=()=>{let[e,n]=(0,l.useState)(!1),[t,i]=(0,l.useState)(!1),[a,o]=(0,l.useState)(!1),{isFlat:s}=(0,u.on)((0,d.k)(e=>({isFlat:e.isFlat})));return(0,c.D)(r=>{let{camera:l}=r,s=Math.abs(l.rotation.z)>Math.PI/2;e!==s&&n(s);let u=l.rotation.z>0&&l.rotation.x<0||l.rotation.z<=0&&l.rotation.x>0;t!==u&&i(u);let d=l.rotation.x>0||l.position.y<=0;a!==d&&o(d)}),(0,r.jsxs)(r.Fragment,{children:[!s&&(0,r.jsx)(ex,{flipX:e,flipY:t,flipDown:a}),(0,r.jsx)(eS,{})]})};var ey=t(6659);let eg=()=>{let e=(0,l.useRef)(null),{gl:n}=(0,c.C)(),{setMaxTextureSize:t,setMax3DTextureSize:a}=(0,u.Ws)((0,d.k)(e=>({setMaxTextureSize:e.setMaxTextureSize,setMax3DTextureSize:e.setMax3DTextureSize})));(0,l.useEffect)(()=>{let e=n.getContext();a(e.getParameter(e.MAX_3D_TEXTURE_SIZE)),t(e.getParameter(e.MAX_TEXTURE_SIZE))},[]);let{colormap:o}=(0,u.on)((0,d.k)(e=>({colormap:e.colormap}))),{spherePositions:s,cubePositions:f,planePositions:m}=(0,l.useMemo)(()=>{let e=new Float32Array(46875),n=new Float32Array(46875),t=new Float32Array(46875),r=Math.PI*(3-Math.sqrt(5));for(let n=0;n<15625;n++){let t=1-n/15624*2,i=Math.sqrt(1-t*t),a=r*n,o=Math.cos(a)*i,l=Math.sin(a)*i;e[3*n]=1.2*o,e[3*n+1]=1.2*t,e[3*n+2]=1.2*l}let i=0;for(let e=0;e<25;e++)for(let t=0;t<25;t++)for(let r=0;r<25;r++)n[3*i]=(e/25-.5)*2,n[3*i+1]=(t/25-.5)*2,n[3*i+2]=(r/25-.5)*2,i++;i=0;for(let e=0;e<125;e++)for(let n=0;n<125;n++)t[3*i]=(e/125-.5)*2.5,t[3*i+1]=(n/125-.5)*2.5,t[3*i+2]=0,i++;return{spherePositions:e,cubePositions:n,planePositions:t}},[15625]),p=(0,l.useMemo)(()=>new i.BKk({glslVersion:i.Wdf,uniforms:{uSphereMix:{value:1},uCubeMix:{value:0},uPlaneMix:{value:0},uTime:{value:0},cmap:{value:o}},vertexShader:"uniform float uSphereMix;\r\nuniform float uCubeMix;\r\nuniform float uPlaneMix;\r\nuniform float uSize;\r\nuniform float uTime;\r\nuniform sampler2D cmap;\r\n\r\nattribute vec3 aSpherePosition;\r\nattribute vec3 aCubePosition;\r\nattribute vec3 aPlanePosition;\r\n\r\nvarying vec3 vColor; \r\n\r\nvoid main() {\r\n    // Linearly interpolate between the three shapes using the mix uniforms\r\n    vec3 pos = mix(aSpherePosition, aCubePosition, uCubeMix);\r\n    pos = mix(pos, aPlanePosition, uPlaneMix);\r\n\r\n    // Add a slight sine wave animation to make it more dynamic\r\n    // pos.y += sin(pos.x * 50.0 + uTime) * 0.005;\r\n    // pos.x += cos(pos.y * 50.0 + uTime) * 0.005;\r\n\r\n    float minBrightness = 0.2;\r\n    float maxBrightness = 0.96;\r\n\r\n    float r = sin(pos.z + (uTime * 0.2 ) )  ;\r\n    float g = cos(pos.y + (uTime * 0.3 ) );\r\n    float b = cos(pos.x+pos.y + (uTime * 0.5));\r\n\r\n    vColor = vec3(r, g, b);\r\n    float mag = min(((sin(r+g+b) + 1.) /2.), 0.996) ;\r\n    vec4 sampled = texture(cmap, vec2(mag, 0.5));\r\n    vColor = sampled.rgb;\r\n    // Calculate luminance (perceived brightness)\r\n\r\n    vec4 modelPosition = modelMatrix * vec4(pos, 1.0);\r\n    vec4 viewPosition = viewMatrix * modelPosition;\r\n    vec4 projectedPosition = projectionMatrix * viewPosition;\r\n\r\n    gl_Position = projectedPosition;\r\n\r\n    // Make points smaller as they are further away (perspective)\r\n    gl_PointSize = (15.0 / -viewPosition.z);\r\n}\r\n\r\n",fragmentShader:"// Fragment Shader\r\n\r\nin vec3 vColor;\r\nout vec4 Color;\r\n\r\nvoid main() {\r\n    // Simple white color for the points\r\n    Color = vec4(vColor, 0.8);\r\n}"}),[]);return(0,l.useEffect)(()=>{let e=null;if(p){let n=p.uniforms;(e=ey.Ay.timeline({repeat:-1,yoyo:!1})).to(n.uCubeMix,{value:1,duration:2,delay:3,ease:"power2.inOut"}),e.to(n.uCubeMix,{value:0,duration:2,delay:3,ease:"power2.inOut"}),e.to(n.uPlaneMix,{value:1,duration:2,ease:"power2.inOut"},"<"),e.to(n.uPlaneMix,{value:0,duration:2,delay:3,ease:"power2.inOut"})}return()=>{e&&e.kill()}},[]),(0,c.D)(n=>{p&&(p.uniforms.uTime.value=n.clock.getElapsedTime()),e.current&&(e.current.rotation.y+=.001,e.current.rotation.x+=.001)}),(0,l.useEffect)(()=>{p&&(p.uniforms.cmap.value=o)},[o]),(0,r.jsx)("points",{ref:e,material:p,children:(0,r.jsxs)("bufferGeometry",{children:[(0,r.jsx)("bufferAttribute",{attach:"attributes-position",args:[s,3],count:15625}),(0,r.jsx)("bufferAttribute",{attach:"attributes-aSpherePosition",args:[s,3],count:15625}),(0,r.jsx)("bufferAttribute",{attach:"attributes-aCubePosition",args:[f,3],count:15625}),(0,r.jsx)("bufferAttribute",{attach:"attributes-aPlanePosition",args:[m,3],count:15625})]})})},ez=()=>(0,r.jsx)("div",{className:"w-[100vw] h-[100vh]",children:(0,r.jsx)(h.Hl,{camera:{position:[0,0,3]},children:(0,r.jsx)(eg,{})})});i.l2R.enabled=!0;let ew=function(){let{initStore:e,timeSeries:n,variable:t,metadata:i,plotOn:s,setZMeta:c,setVariables:f,setPlotOn:m,setTitleDescription:p}=(0,u.on)((0,d.k)(e=>({initStore:e.initStore,timeSeries:e.timeSeries,variable:e.variable,metadata:e.metadata,plotOn:e.plotOn,setZMeta:e.setZMeta,setVariables:e.setVariables,setPlotOn:e.setPlotOn,setTitleDescription:e.setTitleDescription}))),{currentStore:x,setCurrentStore:v,setZSlice:S,setYSlice:h,setXSlice:g}=(0,u.SZ)((0,d.k)(e=>({currentStore:e.currentStore,setCurrentStore:e.setCurrentStore,setZSlice:e.setZSlice,setYSlice:e.setYSlice,setXSlice:e.setXSlice})));(0,l.useEffect)(()=>{S([0,null]),h([0,null]),g([0,null]),e.startsWith("local")||v((0,o.Oe)(e))},[e,v]);let z=(0,l.useMemo)(()=>new o.Y5(x),[x]);return(0,l.useEffect)(()=>{let e=!0;(0,a.tz)(x).then(n=>{e&&p(n)});let n=(0,a.Tk)(x),t=(0,a.Bi)(n);return n.then(e=>c(e)),t.then(e=>f(e)),()=>{e=!1}},[x,c,f,p]),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(y.oU,{}),"Default"==t&&(0,r.jsx)(ez,{}),(0,r.jsx)(y.$D,{}),!s&&(0,r.jsx)(y.Fp,{}),(0,r.jsx)(y.Rh,{}),"Default"!=t&&(0,r.jsx)(en,{ZarrDS:z}),i&&(0,r.jsx)(y.OS,{data:i}),Object.keys(n).length>=1&&(0,r.jsx)(j,{})]})}},9645:()=>{}},e=>{e.O(0,[456,17,863,99,969,925,478,11,432,667,60,544,235,103,459,195,643,100,970,984,790,340,434,75,992,277,647,358],()=>e(e.s=642)),_N_E=e.O()}]);